<h1>About</h1>
<p>網際內容管理 (Web-based Content Management)</p>
<p><a href="https://mde.tw/lab/blog/wcm-w13-ubuntu-and-blogs.html">為什麼會在機械設計工程系開設網際內容管理課程?</a></p>
<p>利用瀏覽器作為前端, 並將數位內容有系統地送到雲端伺服器中進行管理與運用的架構即稱為網際內容管理.</p>
<p>從機械設計專業的角度看待網際內容管理.</p>
<p>機械設計工程師應該從 CAD 出發透過零組件系統建立, 模擬與控制, 並在流程中利用 CAE 進行設計功能確認後, 將所有持續改進的內容透過分散式版次與網際管理系統進行保存與數位資料再利用.</p>
<p><a href="https://nfulist.herokuapp.com/?semester=1092&amp;courseno=0741&amp;column=True">修課學員名單</a> (<a href="https://github.com/mdecourse/nfulist">nfulist 程式碼</a>)</p>
<p><a href="https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html">機械系的巔峰</a> (其他專業科系是否也適用?)</p>
<p>評分:</p>
<p style="padding-left: 30px;">出席 10%</p>
<p style="padding-left: 30px;">個人倉儲與網頁 30%</p>
<p style="padding-left: 30px;">每週網際簡報與 Pdf 報告 60% (含 Youtube 操作影片)</p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>三道牆理論</h2>
<p>KMOLab 所開設課程目的是將擋在機械工程師面前的三道牆, 直接利用課程講授的過程, 一一呈現, 讓大家有及時找出突破這三道障礙的機會, 不僅讓各自的潛能有所發揮, 同時也希望大家能更自在地面對未來的更多挑戰.<br/><br/>這三道牆分別是:</p>
<p>理論基礎障礙<br/>實務練習障礙<br/>確立目標障礙</p>
<h4>理論基礎障礙</h4>
<p>所謂的理論基礎障礙就是技職體系學生在高中階段經常疏忽的英文, 數學與邏輯思考與獲取學問的基本能力. 也就是英文聽說讀寫的基本能力, 數學基本能力與了解如何透過邏輯思考解題, 並且學習如何發問, 如何與人協同合作解決問題的能力.</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/W10-W14.html">http://mde.tw/cad2020/content/W10-W14.html</a></p>
<h4>實務練習障礙</h4>
<p>第二道牆則是實務練習障礙, 許多人不願意花時間在突破上述第一道障礙的原因, 通常是因為不知道學習這些相對抽象的知識有甚麼用處? 因此, 為了凸顯突破第一道牆的重要性, 就必須要透過實際的課程案例, 讓大家了解一旦能突破第一道牆的障礙後, 養成持續學習這些理論基礎內容之後, 就可以相對用比較有效率的方式解決各種問題.</p>
<p>但是這需要學習者付出時間與耐性, 當面對完全陌生議題時, 就必須檢討是否第一道牆仍然卡在自己與解決方案中間. 然後用心不斷思考, 探索與練習之後, 若還是無法解決問題. 就必須要先試著描述問題後再尋求他人的協助.</p>
<p>假如能有以上的正確學習態度, 就有機會在面對各種問題時, 持續突破前面的兩道牆, 然後看到自己所追求的第三道牆, 並且此後能夠竭盡全力, 翻閱第三道牆的障礙, 積極達成預定目標.</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/HW1.html">http://mde.tw/cad2020/content/HW1.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/HW2.html">http://mde.tw/cad2020/content/HW2.html</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cad2020/content/HW1_SW.html">http://mde.tw/cad2020/content/HW1_SW.html</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p>
<h4>確立目標障礙</h4>
<p>你的人生目標是甚麼?</p>
<p style="padding-left: 30px;"><a href="https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html">https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html</a></p><h2>機械工程師</h2>
<p>參考: <a href="https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html">機械系的巔峰</a></p>
<p>cse (customer support engineer)</p>
<p>半導體機台 (&gt;300萬美元) 設計牽涉:</p>
<ol>
<li>力學 (Mechanics)</li>
<li>熱傳學 (heat tranfer)－晶圓表面與游離氣體反應所產生的高熱, 需要藉由底部的吸盤降溫, 或是晶圓本身的熱膨脹, etc.</li>
<li>電磁學 (Electromagnetics)－靜電吸盤中的電極吸附以及靜電所產生的延遲時間, 或是 <a href="https://www.hitachi-hightech.com/global/products/device/semiconductor/cd-sem.html">CD-SEM</a> (Critical Dimension Scanning Electron Microscope)量測機台的原理, etc.</li>
<li>光學 (Optics)－Optical CD (<a href="https://en.wikipedia.org/wiki/Metrology">Metrology</a>)的量測或是用光學顯微鏡在晶圓上 Alignment mark 作位置校正, 座標建立, etc.</li>
<li>材料力學 (Mechanics of Materials)－真空腔體的壁厚及材料選用, 金屬的表面處理及反應後 particle issue 的關係, etc.</li>
<li>控制 (Automatic Control)－機械手臂的控制理論(很多廠商都外包了), stage, sensor, Encoder, 手臂或真空如何作動能降低 Overhead, etc.</li>
<li>其它還有游離電漿的化學反應及反應中/氣體的流體力學對晶圓邊緣膜厚或蝕刻均勻度的影響等.</li>
</ol>
<p>pse (process support engineer)</p>
<p>其他內容重點請各分組負責整理.</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://tsmccutie.com/%E5%A4%96%E5%95%86%E5%92%8C%E4%BD%A0%E6%83%B3%E7%9A%84%E4%B8%8D%E4%B8%80%E6%A8%A3%E5%88%A5%E5%9C%A8%E9%9D%A2%E8%A9%A6%E6%99%82%E8%AA%AA%E9%80%99%E6%98%AF%E4%BD%A0%E7%9A%84dream-job/">外商與你想的不一樣</a></p>
<p></p><h2>Programming</h2>
<p>利用 MSYS2 與 Tiny C 編譯 ANSI C</p>
<p><a href="/downloads/programming_in_c.pdf">programming_in_c.pdf</a></p>
<p><a href="/downloads/cprogramming_tutorial.pdf">cprogramming_tutorial.pdf</a></p>
<p><a href="/downloads/ctext.pdf">ctext.pdf</a></p>
<p><a href="/downloads/c-primer.pdf">c-primer.pdf</a></p>
<p><a href="/downloads/c-refcard.pdf">c-refcard.pdf</a></p>
<h4>應用練習:</h4>
<p style="padding-left: 30px;">編譯修改 <a href="https://fossil-scm.org">https://fossil-scm.org</a> 增加新功能, 或令其可以透過 Oauth2 登入.</p>
<p style="padding-left: 30px;"><a href="https://fossil-scm.org/home/doc/trunk/www/theory1.wiki">https://fossil-scm.org/home/doc/trunk/www/theory1.wiki</a></p>
<h4>About Fossil SCM:</h4>
<p>The underlying database is very simple: it is an unordered collection of "artifacts". An artifact is a list of bytes - a "file" in the usual manner of thinking. Many artifacts are simply the content of source files that have been checked into the Fossil repository. Call these "content artifacts". Other artifacts, known as "control artifacts", contain ASCII text in a particular format that defines relationships between other artifacts, such as which content artifacts that go together to form a particular version of the project. Each artifact is named by its SHA1 or SHA3-256 hash and is thus immutable. Artifacts can be added to the database but not removed (if we ignore the exceptional case of shunning.) Repositories synchronize by computing the union of their artifact sets. SQL and relation theory play no role in any of this.</p><h2>Heroku</h2>
<p>在 Heroku 部署 Python Flask 網際程式, 令其從 <a href="https://qry.nfu.edu.tw/">https://qry.nfu.edu.tw/</a>  取出所需資料.</p>
<p>範例:</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2020/content/%E4%BA%82%E6%95%B8%E5%88%86%E7%B5%84.html">http://mde.tw/cp2020/content/亂數分組.html</a></p>
<p style="padding-left: 30px;"><a href="https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776&amp;column=True">https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776&amp;column=True</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a></p>
<p>練習:</p>
<p style="padding-left: 30px;">如何從 <a href="https://qry.nfu.edu.tw/classroom.php">https://qry.nfu.edu.tw/classroom.php</a> 取出機械設計工程系各實驗室的使用時間表, 並利用 <a href="https://developers.google.com/calendar">https://developers.google.com/calendar</a> 將資料存入 mde.nfu.edu.tw G Suite 所屬的 Calendar 中?</p>
<p style="padding-left: 30px;">該如何利用 <a href="https://developers.google.com/calendar">https://developers.google.com/calendar</a> 建立一個機械設計工程系各實驗室的網際借用管理系統?</p>
<p style="padding-left: 30px;">有沒有機會在 Heroku 部署服務程式, 透過 <a href="https://pypi.org/project/pydiscourse/">https://pypi.org/project/pydiscourse/</a> 從 <a href="https://forum.eng.nfu.edu.tw">https://forum.eng.nfu.edu.tw</a> 中撈出所需的資料並轉存入 Blogger 或 Pelican blog 系統?</p>
<p style="padding-left: 30px;">有沒有機會利用<a href="https://github.com/KmolYuan/metaheuristics/blob/master/rga.pyx">基因演算法</a>建立一個網際排課系統?</p>
<p style="padding-left: 60px;"><a href="https://github.com/AkaZuko/timetable_scheduler">https://github.com/AkaZuko/timetable_scheduler</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/edceliz/GeneticAlgorithmUniversityClassScheduler">https://github.com/edceliz/GeneticAlgorithmUniversityClassScheduler</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/Baksonator/evolutionary-timetable-scheduling">https://github.com/Baksonator/evolutionary-timetable-scheduling</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/hayrapetyan-armine/Timetable">https://github.com/hayrapetyan-armine/Timetable</a></p>
<h1>Topics</h1>
<p><a href="https://nfulist.herokuapp.com/?semester=1092&amp;courseno=0741&amp;column=True">修課學員名單</a> (<a href="https://github.com/mdecourse/nfulist">nfulist 程式碼</a>)</p>
<p>上列連結可以透過瀏覽器, 從學校教務主機中根據學期與課號取出最新的修課學員名單, 這就是典型的網際內容管理應用.</p>
<p>當機械設計工程師在進行產品開發過程, 除了 <a href="https://en.wikipedia.org/wiki/Performance_indicator">KPI</a> 之外, 更應該從網際內容管理的角度, 思考是否已經替產品開發過程中的每一個步驟或工具提供靈活的開放 <a href="https://en.wikipedia.org/wiki/API">API</a>. Why?</p>
<p>2021 Spring 的課程將從 <a href="https://github.com/mdecourse/nfulist/discussions/2">https://github.com/mdecourse/nfulist/discussions/2</a> 開始. 然後進行 <a href="http://mde.tw/wcm2021/content/Topic%201.html">http://mde.tw/wcm2021/content/Topic%201.html</a> 以及<a href="http://mde.tw/wcm2021/content/%E5%88%86%E7%B5%84%E5%B0%88%E9%A1%8C.html">分組專題</a>, 其餘網站各頁面則提供參考, 其中的重點包括</p>
<ol>
<li><a href="http://mde.tw/wcm2021/content/WSL.html">http://mde.tw/wcm2021/content/WSL.html</a></li>
<li><a href="https://github.com/mdecourse/wcm2021/discussions/6">Flask CRUD 範例 </a></li>
<li><a href="https://github.com/mdecourse/wcm2021/discussions/8">CMU Web</a></li>
<li><a href="https://ubuntu.com">Ubuntu</a> 實體與 <a href="https://www.virtualbox.org/">Virtualbox</a> 虛擬主機的安裝與應用.</li>
</ol><h2>W1-W2</h2>
<p>網際內容管理課程簡介</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/hZMriptiTU4" width="560"></iframe></p>
<p>網際內容管理將從學校教務主機, 以 Flask 與 bs4 擷取出各種相關資料作為開端, 以下為初步流程介紹:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/37l2T6lF2oo" width="560"></iframe></p>
<p>為了讓各學員可以從 <a href="http://a.kmol.info:88">http://a.kmol.info:88</a> 取下 Python 3.9.1 版的可攜程式系統, 特別將需要 @gm 權限的兩階段程式系統, 從 @gm 移動到 <a href="http://a.kmol.info:88">http://a.kmol.info:88</a>, 其中使用 sftp 與 ssh 對 a.kmol.info 進行連線:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/OaOdFv3EbIs" width="560"></iframe></p>
<p>因為電腦輔助設計室第三磁區上課時使用純 IPv6 網路協定上線, 在 Python 3.8.5 可直接執行連結到 IPv4 網站的程式 (因為 Python 會自動使用 Windows 系統中所設定的 Proxy), 但在 Python 3.9.1 環境則必須明確宣告所使用的 IPv6 代理主機 (見以下註解說明, 因為至今 Python 3.9 仍無法如 3.8 自動透過 Windows 系統代理主機執行程式).</p>
<p>註解: 根據 <a href="https://github.com/psf/requests/issues/5740">https://github.com/psf/requests/issues/5740</a> 的說明, 之所以 Python 3.8 與 3.9 在 requests 呼叫之所以產生差異的原因: Python 3.9 中目前仍存在 <span><a href="https://bugs.python.org/issue42627">urllib.request.getproxies() misparses Windows registry proxy settings</a> bug. 無法在 Windows 環境中執行時自動使用系統所設定的 Proxy Server. 但此問題可以自行在 Python 3.9 執行時的程式碼中設定代理主機而避開.</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/c-AsFU2UMBE" width="560"></iframe></p>
<p>W2 說明 KMOLab 基本概念就是希望機械設計工程師能夠善用計算機程式與網路, 讓產品開發流程更有效率.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9-Qu-xwJmRE" width="560"></iframe></p>
<p><span class="style-scope yt-formatted-string" dir="auto">說明如何建立 kmol_hybrid 隨身程式系統</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/oLdV6S9GuZ0" width="560"></iframe></p>
<p><span class="style-scope yt-formatted-string" dir="auto">說明如何利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 建立個人倉儲與網站 </span><span class="style-scope yt-formatted-string" dir="auto"></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/bZupkkT4T5c" width="560"></iframe></p>
<p>說明與 cmsimde 編輯及轉靜態網頁有關的認知</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/s5ty-MpnK7c" width="560"></iframe></p>
<p>說明 topic0 執行動機以及自選組員後所衍生相關資料擷取問題的因應及處理</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ZHeFGqNRaDw" width="560"></iframe></p>
<h3>Hybrid 系統</h3>
<p>所謂的 Hybrid 可攜隨身程式系統, 是將非個人專屬的可攜程式檔案放在 C:, 而將 home_ipv4, home_ipv6 與 tmp 等存放個人資料倉儲與 SSH 認證或個人屬性設定的檔案 (如 start_ipv6.bat 與 stop.bat) 放在 USB 隨身碟中.</p>
<p>由於在建立隨身系統過程 pip.exe 與 leo.exe 等原先置於 Python39\Scripts 下的檔案會直接寫入帶有路徑設定的字串, 在 Hybrid 系統下必須將 python.exe 絕對路徑改為相對路徑.</p>
<p>而且 SciTE.exe 下的 Python 解譯器設定, 也必須一併改為相對路徑.</p>
<p>修改 pip.exe 與 leo.exe 中的 python.exe 字串, 可以使用 <a href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a></p><h3>網頁除錯</h3>
<p>利用 08 倉儲作為範例, 說明若近端的 cmsimde 已經弄亂, 可以重新 git clone 遠端倉儲進行除錯<br/><br/>這個影片最後因為 ssh key 設定錯誤因此在下一個影片才能直接進行 acp.bat 之執行示範.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/JlM5FIFo-50" width="560"></iframe></p>
<p>接續上一個影片, 說明若使用最新 cmsimde 版本, 可以進入 cmsimde 目錄 git pull 後, 從 up_dir 複製 <br/>cms.bat<br/>acp.bat<br/>http-server.py<br/>localhost.crt<br/>localhost.key 至倉儲根目錄後, 再回到根目錄進行 acp "提交訊息" 即可.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/wUESHGHovvY" width="560"></iframe></p><h2>W4</h2>
<h4>分組專題</h4>
<h4>W3 自選組員 6 人一組</h4>
<h4>W4 - W9 分組專題:</h4>
<p style="padding-left: 30px;">1. 各組根據 W1 - W3 的課程內容從 <a href="https://qry.nfu.edu.tw/">https://qry.nfu.edu.tw/</a> 以網際程式截取四技設一甲班上各課程的開課時段與修課人員名單, 並使用 <a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a> 程式架構, 將分組程式送到 <a href="https://www.heroku.com/">Heroku</a> 伺服.</p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cp2020/content/nfu-project.html">http://mde.tw/cp2020/content/nfu-project.html</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cp2020/content/scissor-rock-paper.html">http://mde.tw/cp2020/content/scissor-rock-paper.html</a></p>
<p style="padding-left: 30px;">2. <a href="http://mde.tw/wcmj2021/content/W4.html">http://mde.tw/wcmj2021/content/W4.html</a></p>
<p style="padding-left: 30px;">3. 請根據 <a href="https://qry.nfu.edu.tw/classroom.php">https://qry.nfu.edu.tw/classroom.php</a> 中有關機械設計工程系相關的實習實驗室排課時數, 按照排課時數多寡, 列出各實習實驗室的總排課時數表.</p>
<p style="padding-left: 30px;">4. 請問從各學制的班級名條 (<a href="https://qry.nfu.edu.tw/classlist.php">https://qry.nfu.edu.tw/classlist.php</a>) 統計, 可以算出各學制 2021 Spring 總註冊人數嗎?</p>
<p style="padding-left: 30px;">練習英文打字與寫作編輯:</p>
<p style="padding-left: 60px;">請將下列 paper 重新打字整理為 .txt 純文字檔案, 之後再利用 LaTeX 整理為 pdf 檔案.</p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cd2021/downloads/typing_practice/1990_evaluating_the_use_of_cad_systems_in_mechanical_design_engineering.pdf">1990_evaluating_the_use_of_cad_systems_in_mechanical_design_engineering.pdf</a></p>
<h4>W10 - W18 自選與網際內容管理相關的題目完成:</h4>
<p style="padding-left: 30px;">各組必選項目:</p>
<p style="padding-left: 60px;">請各組學員協同研究如何利用 <a href="https://www.autodesk.com/education/edu-software/overview">Fusion 360</a> 進行零組件設計繪圖, 並利用 <a href="https://cyberbotics.com/doc/guide/web-interface">Web Interface</a> 進行動態模擬:</p>
<p style="padding-left: 90px;"><a href="https://rawgit.com/AutodeskFusion360/AutodeskFusion360.github.io/master/Installation.html">https://rawgit.com/AutodeskFusion360/AutodeskFusion360.github.io/master/Installation.html</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/AutodeskFusion360">https://github.com/AutodeskFusion360</a></p>
<p style="padding-left: 90px;"><a href="https://2019wcm.blogspot.com/search/label/webots">https://2019wcm.blogspot.com/search/label/webots</a></p>
<p style="padding-left: 90px;"><a href="https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/">https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Lc4GaaS7-jA" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VJj-H4we71g" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/hCuz6KhbScA" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/iUqVgykaF-k" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/WXAkvWOWsnM" width="560"></iframe></p>
<p style="padding-left: 30px;">Reveal 期中報告</p>
<p style="padding-left: 60px;">LaTeX PDF 期中報告</p>
<p style="padding-left: 30px;">Reveal 期末報告</p>
<p style="padding-left: 60px;">LaTeX PDF 期末報告</p>
<p>Reference:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/latex-on-ci-cd">https://github.com/mdecourse/latex-on-ci-cd</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/texpdf">https://github.com/mdecourse/texpdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/tex-pdf-pipeline">https://github.com/mdecourse/tex-pdf-pipeline</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/travis-ci-latex-pdf">https://github.com/mdecourse/travis-ci-latex-pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.vipinajayakumar.com/continuous-integration-of-latex-projects-with-gitlab-pages.html">https://www.vipinajayakumar.com/continuous-integration-of-latex-projects-with-gitlab-pages.html</a></p>
<p style="padding-left: 30px;"></p><h3>W4 教學</h3>
<p>簡要說明網際內容管理課程開課緣由, 以及課程目標.<br/>其次說明 wcm2021 Topic0 專案執行目的.<br/><br/>相關頁面: <a href="http://mde.tw/wcm2021/content/Topic 0.html">http://mde.tw/wcm2021/content/Topic 0.html</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/SJlrxoBCIRw" title="YouTube video player" width="560"></iframe></p>
<p>說明如何從特定主機, 利用 requests 送出 post 參數後取回 html, 並以 bs4 解讀後利用指令要求 firefox 檢視傳回資料.<br/><br/>擷取程式: <a href="https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py">https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/2y2tIj0Zg2o" title="YouTube video player" width="560"></iframe></p>
<p>說明 <a href="https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py">https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py</a> 程式內容.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/GXpTPfpbmlc" title="YouTube video player" width="560"></iframe></p>
<p>說明如何利用 cms.bat 與 acp.bat 開啟動態網頁並透過 ssh 進行 git add, commit 與 push.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/0XZdN6KaR-s" title="YouTube video player" width="560"></iframe></p>
<p><br/>說明如何在近端啟動 <a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a> <br/>因為目前近端為純 IPv6 上網, 且使用 Python 3.9.1 解譯, 因此啟動 server 時必須自行以程式設定 Proxy (due to bug of Python 3.9.1, 不會自動使用 Windows 10 的 Proxy 設定上網).</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Ec9lc9DLzaE" title="YouTube video player" width="560"></iframe></p><h2>W5</h2>
<p>各分組開始執行 W4-W9 的分組專案 (延續 <a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a> 的程式開發), 並從下列台灣未來 10 年科技願景內容中, 確認此舉隸屬未來創新教育體系 (<span style="background-color: #ffff99;">多元適性, 未來產業人才, 終身學習</span>) 的一環.</p>
<p>創新教育體系下, 個人學習心態 (Mindset):</p>
<ol>
<li>多元適性 - <span style="background-color: #ffff99;">自主知識</span>學習, 動手<span style="background-color: #ffff99;">實作驗證知識效用</span>, 發揮<span style="background-color: #ffff99;">個人特色</span>. (<a href="https://github.com/mdecourse/wcm2021/tree/main/downloads/textbooks">開放專業教材範例</a>)</li>
<li>未來產業人才 - <span style="background-color: #ffff99;">數位化</span>多元環境下 (<span style="background-color: #ccffcc;">分散式版次管理</span>, <span style="background-color: #ccffcc;">區塊鍊, AI</span>), 充分與產業發展及需求結合. (<a href="https://git-scm.com/book/en/v2">Pro Git</a>, <a href="/downloads/blockchain/BlockchainTextBook.pdf">Blockchain</a>, <a href="/downloads/ai/Design_and_Development_of_High_School_AI.pdf">AI</a>)</li>
<li>終身學習 - 以<span style="background-color: #ffff99;">敏捷</span> (Agile) 及<span style="background-color: #ffff99;">彈性</span> (Flexible) 學習, 適應未來科技與自然環境的變化. (<a href="https://link.springer.com/book/10.1007/978-3-319-73842-0">The Scrum Culture</a>)</li>
</ol>
<p>還沒有啟用 SSH 對 Github 推送的學員, 請參考 <a href="http://mde.tw/cd2021/content/SSH%20%E4%BA%86%E6%B2%92.html">SSH 了沒</a> 中的說明, 儘快啟用.</p>
<p style="padding-left: 30px;">一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\SOFTWARE\SimonTatham] 將 registry 設定匯出存為 y:\my_github.reg, 並在 start_ipv6.bat 中以  regedit.exe /S y:\my_github.reg 將設定匯入.</p>
<h4>台灣 2030 科技願景:</h4>
<p style="padding-left: 30px;"><a href="/downloads/taiwan_2030_tech_vision.pdf">taiwan_2030_tech_vision.pdf</a></p>
<p style="padding-left: 60px;">台灣2030—創新、包容、永續, 實現樂活社會、高值經濟、強韌環境、普惠科技、創新教育等五大目標.</p>
<p style="padding-left: 60px;">鑒於IoT、AI 與區塊鏈等新科技應用越趨成熟，數位化轉型趨勢已然成形.</p>
<ol>
<li style="padding-left: 30px;">數位科技驅動的創新社會 - 產業創新, 跨域加乘, 勞動升級.</li>
<li style="padding-left: 30px;">跨文化、族群、世代的多元包容社會 - 長幼安居, 青壯樂業, 族群多元.</li>
<li style="padding-left: 30px;">循環再生、零污染、智慧強韌的永續社會 - 循環生態, 韌性家園.</li>
</ol>
<p><img alt="" height="373" src="/images/2030_tech_vision_targets.png" width="800"/></p>
<h4>WCM2021 Programming Project:</h4>
<p>目前的 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a>  只提供將動態文件 config/content.htm 轉為 content 中各靜態頁面的功能, 為了能夠整理上述 CoppeliaSim 說明文件的轉換, 首先需要建立將 content 中各頁面, 設法集結為 config/content.htm 的功能, 而這項任務將列為 <a href="https://mde.tw/wcm2021">https://mde.tw/wcm2021</a>  課程中的網際內容管理課程專案.</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/cd2021/content/W5.html">http://mde.tw/cd2021/content/W5.html</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/copsim/discussions/1">https://github.com/mdecourse/copsim/discussions/1</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/showdownjs/showdown">https://github.com/showdownjs/showdown</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/cyberbotics">https://github.com/cyberbotics</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/bulletphysics/bullet3/tree/master/examples/pybullet">https://github.com/bulletphysics/bullet3/tree/master/examples/pybullet</a></p>
<p style="padding-left: 30px;"><a href="http://a.kmol.info:88/">http://a.kmol.info:88/</a></p><h3>W5 教學影片</h3>
<p>假如您使用的 cmsimde 並不是最新版本, 可以設法進入 cmsimde 子目錄後, 以 git pull origin master 拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/WvkJ1wMAUE4" title="YouTube video player" width="560"></iframe></p>
<p>為了要讓各組組員更清楚網際內容管理課程內容, 以及期中簡報必須涵蓋的內容,  特別將 W1-W4 與課程相關的頁面及內容加以說明.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/4IXLYSmtRT0" title="YouTube video player" width="560"></iframe></p>
<p>說明如何利用 Putty 設定以 SSH 將近端版本推送至 Github</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/l5vJYuwb2uU" title="YouTube video player" width="560"></iframe></p><h3>創新教育</h3>
<p>創新教育有下列三項策略:</p>
<ol>
<li>推動多元適性教育</li>
<li>培育未來產業人才</li>
<li>營造終身學習環境</li>
</ol>
<p></p>
<ol>
<li>推動多元適性教育<br/><br/>策略說明:<br/><br/>科技顛覆工作與就業所需的技能, 因此學齡教育更需要能夠按照學童的能力、興趣及需求, 提供<span style="background-color: #ffff99;">個人化的教學方式</span>, 並且創造公平學習機會, 強化學童<span style="background-color: #ffff99;">自主學習與動手實作</span>的動機, 朝向<span style="background-color: #ffff99;">深度知識學習</span>, 進而為未來社會與公民做出有意義的貢獻.<br/><br/>回應族群:<br/><br/>滿足學童自我探索知識且能深入理解內容的需求, 包含對於知識資訊、概念想法、實作技巧與直覺等, 並<span style="background-color: #ffff99;">建立同儕認同感, 以共同合作取代競爭</span>觀念; 提供橋接多元教育及升學途徑之認證體系, 緩減家長經濟負擔與學童學習壓力.<br/><br/>國際標竿:<br/><br/>愛沙尼亞推動<span style="background-color: #ccffcc;">全面的數位科技教育應用</span>, 讓學生能充分獲得數位技能, 例如"ekool" 和 "Stuudium" 能協助教師與家長討論學童學習狀況和教學方法的平台, "電子書包(e-Scoolbag)" 提供數位教材, 如電子教科書、互動遊戲, 且能蒐集學習數據.<br/><br/>新加坡自 2019 年開始逐步<span style="background-color: #ffff99;">取消中小學考試</span>, 從傳統的菁英教育轉型為提供公平教育機會、培育未來人才的搖籃, 改為採用 "<span style="background-color: #ccffcc;">課堂評估</span>" 瞭解學生學習狀況, 讓老師能以彈性的方式取代制式教學, 注重每一個學生個體的成長與發展.<br/><br/>建議推動方向:<br/><br/>- 科技輔助自主深度學習<br/>- 協助彌平城鄉數位落差<br/><br/><br/>2. 培育未來產業人才<br/><br/>策略說明:<br/><br/>依據未來產業發展階段之可能需求, <span style="background-color: #ffff99;">培養數位人才</span>, 並縮短學用落差. 理解產業需求脈絡, 建置<span style="background-color: #ffff99;">數位化勞動技能地圖</span>, 以科技強化職場與技職教育連結, 讓<span style="background-color: #ffff99;">學歷、技能與資歷認證流程數位化</span>. 同時也應標靶式鎖定特定領域, 強化延攬與留住專業人才, 使人才供應更活化多元.<br/><br/>回應族群:<br/><br/>回應中壯年面對自動化科技持續演進趨勢下, 將被迫面臨專業或就業轉換的挑戰, 跨越技能落差, 破除求職障礙; 滿足青年族群預判職業發展所需具備技能, 強化教育與職場連結的人才培育; 滿足產業界對於高階人才(如科技、數位人才)的需求, 支持國內產業轉型.<br/><br/>國際標竿:<br/><br/>美國勞工部的生涯輔導網站 CareerOneStop, 提供整合職業生涯訊息的網路平台, 目的在於幫助求職者、學生、勞工、人資單位及雇主, 可以有效運用資源藉以達到自我發展, 並在新經濟環境下做出有效的決策. 更提供美國地區的未來就業預測, 針對不同教育程度提供未來 10 年就業的可能環境.<br/><br/>體驗新加坡 (Contact  Singapore) 計劃: 海內外共設有 9 個專門吸引外籍專業人士及海外學生的據點, 提供最新的就業規範及生活訊息. 透過寬鬆的專業人士移民政策、外籍專業人士稅賦優惠及親屬安置、個人化就業許可證、維持良好生活環境等, 提高人才駐留入籍的誘因.<br/><br/>建議推動方向:<br/><br/>‒創建<span style="background-color: #ffff99;">勞動與數位技能地圖</span>連結職場<br/>‒推動<span style="background-color: #ffff99;">目標導向</span>專業人才平台設置<br/><br/>3. <span style="background-color: #ccffcc;">營造終身學習環境</span><br/><br/>策略說明:<br/><br/>協助建立終身學習平台, 可記錄實體和數位技能學習的進程與軌跡, 提供多元微課程的推薦服務, 能夠自主選擇培養興趣課程或累積培訓進修權利, 可輕鬆參與學習社群, 分享學習資源或合作實踐成果, 增加學習的持久性並促進社會參與.<br/><br/>回應族群:<br/><br/>滿足中高齡與高齡者終身學習與持續貢獻社會的需求, 提供能按自有學習經驗, 連結吸收新知的管道或加入學習社群; 同時, 也提供教育工作者研究及交流數位教學方法內容之設計, 協助教師社群應用數位工具, 發展創新的教學模式.<br/><br/>國際標竿:<br/><br/>新加坡終身學習及培訓帳戶 "SkillsFuture" 提供 25 歲以上的新加坡公民每年新加坡幣 500 元 (約新台幣一萬元) 的津貼, 讓<span style="background-color: #ccffcc;">公民能夠選修超過 200 堂技能加值與進修課程</span>, 另外也提供額外 500 元新幣協助 40 到 60 歲的勞工就業或轉職.<br/><br/>愛沙尼亞的教育資訊系統 (EHIS) 儲存 2005 年以來, 學生受教的資訊與統計數據, 能夠協助老師調整教學方法, 成為政府確保未來勞動力的重要依據, 也能<span style="background-color: #ccffcc;">促進老師和教育科技廠商共同開發新的科技教材、教具</span>, 啟發學生自主學習動機.<br/><br/>建議推動方向:<br/><br/>‒打造<span style="background-color: #ffff99;">全齡個人學習帳戶</span><br/>‒推動<span style="background-color: #ffff99;">數位師資</span>培訓革新</li>
</ol><h3>網際程式開發</h3>
<p>實習目的:</p>
<ol>
<li>利用網際模組擷取資料 (<a href="https://requests.readthedocs.io/en/master/">Python requests</a>)</li>
<li>利用 bs4 擷取網頁資料</li>
<li>利用 Flask 編寫網際程式</li>
<li>利用 Heroku 部署網際程式</li>
<li>利用 Ubuntu 虛擬主機作為伺服器</li>
</ol>
<p>先看懂 <a href="https://github.com/mdecourse/scissor-rock-paper2/blob/main/wsgi.py">https://github.com/mdecourse/scissor-rock-paper2/blob/main/wsgi.py</a></p>
<p style="padding-left: 30px;"><span class="pl-s1">request</span>.<span class="pl-s1">args</span>.<span class="pl-en">get</span>(<span class="pl-s">'user'</span>) 以 GET 方式取得 user 出拳變數值</p>
<p style="padding-left: 30px;">電腦出拳以亂數取值</p>
<p style="padding-left: 30px;">兩者比較後傳回超文件顯示比賽結果</p>
<p style="padding-left: 30px;">部署到 Heroku 需要 <a href="https://raw.githubusercontent.com/mdecourse/scissor-rock-paper2/main/requirements.txt">requirements.txt</a>, <a href="https://raw.githubusercontent.com/mdecourse/scissor-rock-paper2/main/runtime.txt">runtime.txt</a> 與 <a href="https://raw.githubusercontent.com/mdecourse/scissor-rock-paper2/main/Procfile">Procfile</a>.</p>
<p>接著請試著透過 <a href="http://mde.tw/lab/content/Heroku.html">http://mde.tw/lab/content/Heroku.html</a> 與 <a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a> 的導引, 將 <a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a> 中的機械設計系實驗室排課時間表程式部署到 Heroku. 至於個人 Github 靜態網站也可以同步一份到 Heroku.</p>
<p>Beautifulsoup 參考教材:</p>
<p style="padding-left: 30px;"><a href="/downloads/beautifulsoup.pdf">beautifulsoup.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/WebScraping_with_bs4.pdf">WebScraping_with_bs4.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/beautiful_soup_tutorial.pdf">beautiful_soup_tutorial.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2019_beautifulsoup_document.pdf">2019_beautifulsoup_document.pd</a></p>
<p>Flask 參考教材:</p>
<p style="padding-left: 30px;"><a href="/downloads/flask.pdf">flask.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/flask_tutorial.pdf">flask_tutorial.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/flask_document.pdf">flask_document.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2021_flask_document.pdf">2021_flask_document.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://realpython.com/primer-on-python-decorators/">https://realpython.com/primer-on-python-decorators/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/decorator">https://www.programiz.com/python-programming/decorator</a></p>
<p style="padding-left: 30px;"><a href="https://www.python-course.eu/python3_decorators.php">https://www.python-course.eu/python3_decorators.php</a></p>
<p style="padding-left: 60px;">Python has a feature called decorators to add functionality to an existing code. This is also called metaprogramming because a part of the program tries to modify another part of the program at compile time.</p>
<p style="padding-left: 60px;">Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it.</p>
<p>Heroku 參考教材:</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2020/content/scissor-rock-paper.html">http://mde.tw/cp2020/content/scissor-rock-paper.html</a> (<a href="https://scissor-rock-paper.herokuapp.com">https://scissor-rock-paper.herokuapp.com</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/scissor-rock-paper2">https://github.com/mdecourse/scissor-rock-paper2</a> (<a href="https://scissor-rock-paper2.herokuapp.com/">https://scissor-rock-paper2.herokuapp.com/</a>)</p>
<p style="padding-left: 30px;"><a href="/downloads/heroku.pdf">heroku.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2017_web_apps.pdf">2017_web_apps.pdf</a></p>
<p><a href="https://assets.ubuntu.com/v1/f954307f-ubuntu-server-guide.pdf">Ubuntu server 參考教材</a>.</p>
<p><a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic 0</a> 已經列出兩組可以從學校教務主機擷取資料的程式, 分別可以根據學期代號與班級代號取出班級排課表, 還有利用學期代號與實習實驗室代號擷取排客時間表.</p>
<p>接下來實習的目標是希望寫一組程式可以擷取機械設計工程系各實習實驗室排課表, 並且統計各實驗室每週排課總時數.</p>
<p>我們先來看 <a href="https://requests.readthedocs.io/en/master/">Python requests</a> 的用法:</p>
<p>W5_requests_ex1.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests

r = requests.get("https://mde.tw")
print("status_code:", r.status_code)
print("content-type:", r.headers['content-type'])
print("encoding:", r.encoding)
print("text:", r.text)
</pre>
<p>要看懂下列程式, 必須知道何謂 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity">html entity</a>, 而且要會使用 requests.post() 與 bs4.BeautifulSoup()</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system()
import os
# for geting html file path
import pathlib
 
# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'
 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
 
'''
url:  'class_ajax.php',
data: { pselyr: pselyr, pselclss: pselclss
'''
semester = '1092'
classno = '42311'
column = True
 
if semester == None:
    semester = '1091'
if classno == None:
    # 42311 is 設一甲
    classno = '42311'
     
headers = {'X-Requested-With': 'XMLHttpRequest'}
 
url = 'https://qry.nfu.edu.tw/class_ajax.php'
post_var = {'pselyr': semester, 'pselclss': classno}
 
result = requests.post(url, data = post_var, headers = headers)
 
# result.content 傳回 binary 資料
# soup = bs4.BeautifulSoup(result.content, 'lxml')
# result.text 傳回純文字資料
soup = bs4.BeautifulSoup(result.text, 'lxml')
 
# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
 
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})
 
# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"
 
for i in table.contents:
    # 利用 replace 復原  
    # https://www.w3schools.com/html/html_entities.asp
    # https://developer.mozilla.org/en-US/docs/Glossary/Entity
    output += str(i).replace("&amp;amp;nbsp", " ")
output += "&lt;/table&gt;"
# print(output)
# 將 output 寫入 w1_class_local.html
with open("w1_class_local.html", "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\w1_class_local.html")</pre>
<p>以上在 CMSMDE 列出程式碼, 有一個技巧, 針對 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity">Html entity</a> 符號必須將 &amp; 表示為 &amp;amp; 否則在頁面程式引用時無法正確顯示出原始碼內容.</p>
<p>Flask example:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request
from datetime import datetime
import os

# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'
''' 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''
app = Flask(__name__)

# https://realpython.com/primer-on-python-decorators/
@app.route('/')
def hello():
    # 若取不到 name 則 name = None
    name = request.args.get('name')
    if name == None:
        name = "test"
    # https://realpython.com/python-formatted-output/
    return HELLO_HTML.format(
            name, str(datetime.now()))

HELLO_HTML = """
    &lt;html&gt;&lt;body&gt;
        &lt;h1&gt;Hello, {0}!&lt;/h1&gt;
        現在時間為: {1}.
    &lt;/body&gt;&lt;/html&gt;"""

if __name__ == "__main__":
    # Launch the Flask dev server
    app.run(host="localhost", debug=True)</pre>
<p></p><h3>開放教科書</h3>
<p><a href="https://www.openculture.com/free_textbooks">https://www.openculture.com/free_textbooks</a> (K-12)</p>
<p><a href="https://openstax.org/subjects">https://openstax.org/subjects</a> (University)</p>
<p></p>
<h4>透過理論分析與模擬進行產品設計:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/OpenFOAM">https://github.com/OpenFOAM</a></p>
<p style="padding-left: 30px;">有限元素分析法教科書: <a href="http://web.mit.edu/kjb/www/Books/FEP_2nd_Edition_4th_Printing.pdf">http://web.mit.edu/kjb/www/Books/FEP_2nd_Edition_4th_Printing.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/kGJ8fKWfWU8" title="YouTube video player" width="560"></iframe></p><h2>W6</h2>
<h4>教學目標:</h4>
<p style="padding-left: 30px;">W1-W5 除了熟悉利用 <a href="http://mde.tw/cd2021/content/SSH%20%E4%BA%86%E6%B2%92.html">SSH</a> 與 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 建立網站外, 也希望透過學校教務主機的資料擷取, 讓學員應用 <a href="https://mde.tw/cp2020">https://mde.tw/cp2020</a> 中的 Python 程式擷取網際資料, 練習自行編寫網際 Python 程式. 並將程式部署至 <a href="https://www.heroku.com/">Heroku</a>. (包括靜態網站與動態網站, Heroku 參考資料 <a href="http://mde.tw/lab/content/Heroku.html">1</a>, <a href="http://mde.tw/cp2020/content/Heroku.html">2</a>)</p>
<p style="padding-left: 30px;">自 W6 開始則將逐步引導學員以 Robotics 機電資整合系統為例, 利用 Python 程式操控 <a href="https://robodk.com">RoboDK</a> 模擬平台上的系統模型, 以了解各項機電資產品設計的核心包含 Mechanics 中的 Kinematics 與 Dynamics, 以及零組件 CAD 模型建立, 轉換以及自動控制. (<a href="http://mde.tw/cad2020/content/W10-W14.html">機械設計相關參考資料</a>)</p>
<p style="padding-left: 30px;">網際內容管理課程將以 <a href="https://robodk.com">RoboDK</a> 為例, <a href="https://www.coppeliarobotics.com">CoppeliaSim</a> 與 <a href="https://cyberbotics.com/">Webots</a> 則將在電腦輔助設計實習與協同產品設計實習課程中使用.</p>
<h4>Robot 適用場合:</h4>
<p style="padding-left: 30px;"><a href="https://robodk.com/blog/10-perfect-pick-and-place-tasks-for-a-robot/">https://robodk.com/blog/10-perfect-pick-and-place-tasks-for-a-robot/</a>, 堆疊, 分類, 包裝, 感測揀選, 品質管控, 上貨架, 下貨架, 製造輔助, 組立, 物品佈置.</p>
<h4>KMOLab 使用的機電資模擬套件:</h4>
<ol>
<li><a href="https://robodk.com">RoboDK</a> (<a href="https://robodk.com/pricing">Free Trial version</a>) <a href="https://portableapps.com/apps/music_video/obs-studio-portable">OBS</a> + Youtube Live + Web based Python API</li>
<li><a href="https://www.coppeliarobotics.com">CoppeliaSim</a> (<a href="https://www.coppeliarobotics.com/helpFiles/en/licensing.htm">Free Educational version</a>) Image sensor streamming + Web based Python remote API</li>
<li><a href="https://cyberbotics.com/">Webots</a> (<a href="https://cyberbotics.com/doc/guide/webots-license-agreement">Free Apache 2.0 version</a>) <a href="https://www.cyberbotics.com/doc/guide/web-interface">Web based ready</a></li>
</ol>
<p>進階延伸套件開發:</p>
<p style="padding-left: 30px;">從 <a href="http://a.kmol.info:88/Robot_stl.7z">Robot_stl.7z</a> 下載 Robot stl ASCII 檔案, 並利用 <a href="https://github.com/mdecourse/RobotSimulator">https://github.com/mdecourse/RobotSimulator</a> 程式架構, 結合 <a href="https://github.com/bulletphysics/bullet3">https://github.com/bulletphysics/bullet3</a> (可以利用 <a href="http://a.kmol.info:88/fall2020_v3.1_pybullet.7z">http://a.kmol.info:88/fall2020_v3.1_pybullet.7z</a> 可攜程式環境) 建立 Robotics oriented 開源套件.</p>
<h4 style="padding-left: 30px;">執行步驟:</h4>
<ol>
<li>將 Robot 所有零件 (STL ASCII 格式) 輸入 RoboDK 5.2.2, 透過 Utilities - Model Mechanism or Robot 功能與 Robot 對應的 xml 檔案資訊, 建立所屬 Robot 模型.</li>
<li>參考 <a href="http://mde.tw/virtualkossel/,">http://mde.tw/virtualkossel/</a> (<a href="https://github.com/mdecourse/virtualkossel">https://github.com/mdecourse/virtualkossel</a>), 將 Robot STL 零組件檔案轉入 <a href="https://threejs.org/">https://threejs.org/</a> 網際環境.</li>
<li>嘗試利用 Javascript 或 <a href="https://brython.info/">Brython</a> 操控上述 Robot.</li>
</ol>
<h4>離線模擬的準確性:</h4>
<p style="padding-left: 30px;"><a href="https://robodk.com/blog/robot-calibration-offline-programming/">https://robodk.com/blog/robot-calibration-offline-programming/</a></p>
<h4>10 Causes of Inaccurate Robot Programming:</h4>
<ol>
<li>Lack of calibration — The most important factor has got to be calibration, or lack of it. If your cell is not calibrated, you are setting yourself up to fail. I’ll cover calibration in more detail in the rest of this article.</li>
<li>Inaccurate robot model — Your offline program is only as good as your robot model. Over the years I have spent hours and hours building various robot models for simulators. In the process, I have learned this: if you can find an existing, accurate robot model (like the ones in RoboDK’s Robot Library) you’ll save yourself a lot of time and energy. The accuracy of the robot model can be improved using robot calibration.</li>
<li>Inaccurate cell layout design — Equally important is having an accurate model of the robot’s work cell. This you will almost certainly have to build yourself, so check and double check that it is an accurate representation of the real workstation.</li>
<li>Bad post-processor — The post-processor turns the program you have created in offline programming into code which the robot can use. If you are using a good post-processor (such as those included in RoboDK) this is very simple. However, if you have to write your own post-processor for any reason, it could introduce inaccuracies if it is not programmed correctly.</li>
<li>Distortions in the real world — The real world is never as clean as a simulated environment. The robot links will be slightly different sizes, its joint angles will be slightly different from the readings, etc. This is why calibration is so important.</li>
<li>Sensor inaccuracy — Sensors are used to detect the difference between the theoretical values and real robot values. The simplest example is a potentiometer to detect the real position of a robot joint. A more complex example is a 3D vision setup. However, sensors are also physical devices sensors so can also introduce errors.</li>
<li>Unhelpful product design — Some objects are harder to manipulate with a robot than others. Even if your robot program is entirely accurate, you may see inaccuracies in the robot’s actions if the objects it manipulates are not designed with robots in mind.</li>
<li>Different coordinate systems — Robot manufacturers sometimes use different coordinate systems. This can cause inaccuracies if the wrong system is used or if errors are introduced when converting between different systems.</li>
<li>Wrong reference frame — All positions in a robot program are given relative to a reference frame. Sometimes this is a fixed frame, e.g. the robot’s base, but you can also make it relative to another frame, like the manipulated object. Poorly calibrating this frame can cause inaccuracies.</li>
<li>Lack of testing — Test your program. Even when your cell is properly calibrated, you should always test the program thoroughly in software and then double check it on the real robot before you go into production</li>
</ol>
<h4>RoboDK (由 Solvespace 提供系統零組件 STL)</h4>
<p>利用 <a href="https://portableapps.com/apps/music_video/obs-studio-portable">https://portableapps.com/apps/music_video/obs-studio-portable</a> 將 Windows 10 上的 <a href="https://robodk.com/">RoboDK</a> 程式畫面串流至 Youtube Live 頻道, 並將 Python 控制程式轉為 Flask based 後, 將可讓使用者在網際環境操控遠端的 Robot 系統.</p>
<p>單機 <a href="https://robodk.com/pricing">RoboDK Free trial 版本</a>近端操作:</p>
<ol>
<li>免費評估版本無法存檔, 因此操作過程只能使用既有的 Station 範例檔案, 或者在操作時自行輸入所需的 robot 與相關定位座標.</li>
<li>下載 RoboDK 5.22 版本</li>
<li>開啟可攜程式系統與 RoboDK</li>
<li>執行 Draw 與 Pick and Place</li>
</ol>
<h4>練習:</h4>
<p style="padding-left: 30px;">請寫一個 Python 程式可以在 Pick and Place 程式架構下, 不使用 Replace Objects 情況下, 將所有的球放回原處.</p>
<h4>Tips:</h4>
<p style="padding-left: 30px;">Item.setParentStatic("ParentName")<br/><br/>Item should be the item to grab.<br/>ParentName should be the gripper name.</p>
<p><a href="/downloads/robodk/welding_ex1.7z">welding_ex1.7z</a></p>
<p>Draw:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dkRaf5n3OKs" title="YouTube video player" width="560"></iframe></p>
<p>Pick and Place:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/45J9Rr1VOt0" title="YouTube video player" width="560"></iframe></p>
<p>測試是否可以將 Solvespace 建立的 Robot 存為 RoboDK 的 .robot 格式.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/wZQ0uriwApY" title="YouTube video player" width="560"></iframe></p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/Robot.html">http://mde.tw/cad2020/content/Robot.html</a></p>
<p style="padding-left: 30px;"><a href="/downloads/UR3_IntroRobotics.pdf">UR3_IntroRobotics.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/RoboDK-Doc-EN-Getting-Started.pdf">RoboDK-Doc-EN-Getting-Started.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://wiredworkers.io/product/ur10/">https://wiredworkers.io/product/ur10/</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Multi-Robot Collaboration.pdf">Multi-Robot Collaboration.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Semi-Automatic Robot Welding for Workshops.pdf">Semi-Automatic Robot Welding for Workshops.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/UR5_User_Manual_en_US-3.5.5.pdf">UR5_User_Manual_en_US-3.5.5.pdf</a> (<a href="/downloads/UR5_scriptManual-3.5.4.pdf">UR5_scriptManual-3.5.4.pdf</a>, <a href="/downloads/UR5_ik_coppeliaSim.7z">UR5_ik_coppeliaSim.7z</a>)</p>
<p style="padding-left: 30px;"><a href="/downloads/UR5_Artificial Intelligence and ComputerVision Techniques for Human-RobotInteraction.pdf">/downloads/UR5_Artificial Intelligence and ComputerVision Techniques for Human-RobotInteraction.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://robodk.com/Python-API-examples">https://robodk.com/Python-API-examples</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/aikorea/awesome-rl">https://github.com/aikorea/awesome-rl</a></p>
<p style="padding-left: 30px;"><a href="http://www.cs.rhul.ac.uk/home/chrisw/new_thesis.pdf">Learning from delayed rewards.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.ias.informatik.tu-darmstadt.de/uploads/Publications/Kober_IJRR_2013.pdf">Reinforcement learning in robotics, a survey.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://spiral.imperial.ac.uk/bitstream/10044/1/12051/4/2300000021-Deisenroth-Vol2-ROB-021_published.pdf">A survey on policy search for Robotics.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://projekter.aau.dk/projekter/files/306588269/IRL_VT4.pdf">Robot Learning From a Human ExpertUsing Inverse Reinforcement Learning.pdf</a></p>
<h3>Heroku-實作</h3>
<p><span style="background-color: #ffff99;">步驟一:</span> (<span style="background-color: #ccffcc;">建立 Heroku 帳號</span>) 進入 <a href="https://heroku.com">https://heroku.com</a>, 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.</p>
<p>完成帳號登記後, 必須知道目前 Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB.</p>
<p><span style="background-color: #ffff99;">步驟二:</span> (<span style="background-color: #ccffcc;">建立 Heroku app</span>) 登入 Heroku 後, 先以 s + 學號 建立第一個 app, 完成後, 將可至 https://s學號.herokuapp.com 連線取得網站最初內容.</p>
<p><span style="background-color: #ffff99;">步驟三:</span> (下載 Heroku CLI) 從 <a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a> 下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置或者是 Hybrid 設定的位置.</p>
<p><span style="background-color: #ffff99;">步驟四:</span> (<span style="background-color: #ccffcc;">修改命令搜尋路徑</span>) 修改隨身系統的啟動批次檔案, 讓 Windows 的命令視窗中可以執行 heroku.exe, 或者稱作"設法將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一".</p>
<p>重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat</p>
<p><span style="background-color: #ffff99;">步驟五:</span> (<span style="background-color: #ccffcc;">測試 heroku 執行</span>) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功.</p>
<p><span style="background-color: #ffff99;">步驟六:</span> (<span style="background-color: #ccffcc;">設定 heroku 代理主機</span>) 先前我們已經知道網路的應用包含 client 與 server, 不同 client 採用不同的 proxy 設定與 server 連線, 其中 firefox 作為 WWW 網路協定的 client, 有其自己的網路 Proxy 設定, 也可以直接使用操作系統的 Proxy 設定.</p>
<p>Chrome 作為 WWW 網路協定的 client, 目前 Windows 下的最新版, 只能使用操作系統的 Proxy 設定.</p>
<p>而 git 作為 git client 與 github server 連線的 Proxy 設定, 則寫在 y:\home_ipv6 下的 .giconfig 中,  以 git config --global http.proxy "http://your_proxy:port" 進行設定.</p>
<p>相同的道理 heroku cli 作為 <a href="https://heroku.com">https://heroku.com</a> 伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for heroku login
set HTTP_PROXY=http://[2001:288:6004:17::53]:3128
set HTTPS_PROXY=http://[2001:288:6004:17::53]:3128</pre>
<p><span style="background-color: #ffff99;">步驟七:</span> (<span style="background-color: #ccffcc;">設定同步倉儲</span>) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁:</p>
<p>靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html</p>
<p>動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服.</p>
<p><span style="background-color: #ffff99;">步驟八:</span> (<span style="background-color: #ccffcc;">以 git 進行提交推送</span>) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲.</p>
<p>指令操作步驟:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc
heroku login -i
# 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.
heroku git:remote -a taiwan-no1</pre>
<p>上述步驟完成後的 Heroku 網站: <a href="https://taiwan-no1.herokuapp.com">https://taiwan-no1.herokuapp.com</a></p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/twtrubiks/Deploying-Flask-To-Heroku">https://github.com/twtrubiks/Deploying-Flask-To-Heroku</a></p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/bradtraversy/0029d655269c8a972df726ed0ac56b88">https://gist.github.com/bradtraversy/0029d655269c8a972df726ed0ac56b88</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/gmolveau/flask-sqlalchemy-heroku">https://github.com/gmolveau/flask-sqlalchemy-heroku</a> </p><h2>W7</h2>
<h4>各組開始執行期中分組專題</h4>
<p>在上週 <a href="http://mde.tw/wcm2021/content/Heroku-%E5%AF%A6%E4%BD%9C.html">Heroku 實作</a>中, 使用 heroku5 AT mde 建立了 <a href="https://taiwan-no1.herokuapp.com">https://taiwan-no1.herokuapp.com</a> (與 <a href="https://github.com/heroku5/taiwan-no1">https://github.com/heroku5/taiwan-no1</a> Github Pages 的靜態內容同步).</p>
<p>接下來我們要將執行一項<a href="http://mde.tw/wcm2021/content/%E7%B6%B2%E9%9A%9B%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC.html">網際程式開發</a>, 也就是以分組架構在期中考週前完成<a href="http://mde.tw/wcm2021/content/W4.html">分組專題的製作</a>.</p>
<p>其中必須要先設法完成 <a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a> 中的程式練習, 學會如何從教務主機中取出機械設計工程系各實習實驗室的排課時間表後, 再設法部署到 Heroku.</p>
<p>W9 週各組將要利用 ShareX 上台使用 Reveal 網際簡報錄製分組專題報告, 相關分組報告影片可參考協同產品設計實習 <a href="https://drive.google.com/drive/folders/1t38qYM30FeKw37F49nd0DAD5EMQseDnj">Stage1 簡報影片</a>.</p>
<h4>執行步驟:</h4>
<p>1. 充分了解 <a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a> 中的 <a href="https://github.com/mdecourse/nfulist/blob/master/wsgi.py">https://github.com/mdecourse/nfulist/blob/master/wsgi.py</a> 網際程式架構.</p>
<p>2. 知道將一個網際 Python 程式部署到 Heroku, 需要同時設定 <a href="https://github.com/mdecourse/nfulist/blob/master/Procfile">Procfile</a>, <a href="https://github.com/mdecourse/nfulist/blob/master/requirements.txt">requirements.txt</a> 與 <a href="https://github.com/mdecourse/nfulist/blob/master/runtime.txt">runtime.txt</a>, 其中 Process file (Procfile) 中的 web gunicorn wsgi:app, 是指定採用 gunicorn 作為網際 WSGI Http 伺服器, 且從 wsgi.py 中的 app 物件啟動執行. 而 requirements.txt 中則宣告必須執行的 Python 模組, 而 runtime.txt 則指定要使用的 Python 版次.</p>
<p>3. 從 <a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a> 可以取得透過教務主機查詢電腦輔助設計室排課時間表資料:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
 
# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'
 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
 
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0810'
column = True
 
if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0810'
     
headers = {'X-Requested-With': 'XMLHttpRequest'}
 
url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}
 
result = requests.post(url, data = post_var, headers = headers)
 
soup = bs4.BeautifulSoup(result.content, 'lxml')
 
# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
 
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})
 
# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"
 
for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;nbsp", " ")
output += "&lt;/table&gt;"
#print(output)
 
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)</pre>
<p>4. 因此只需要針對上列程式納入"學期代號"與"實驗室編號"等兩個 GET 網際 URL 變數後, 即可將此網際程式部署至 Heroku, 若再設法建立一個網際表格 (Table) 頁面, 分別放入綜一館 6F-9F 各實習實驗室的相關按鈕, 就可以讓使用者直接在網際頁面點擊實驗室按鈕, 查詢排課時間表.</p>
<p>5. 完成上述流程後, 若能再透過 Beatifulsoup 取得的各實習實驗室排課時間表, 將各 TD 標註的內容取出, 並判斷是否排入課程, 將可利用迴圈統計各實習實驗室每週的排課總時數.</p>
<p>6. 最後, 假如能夠在學期開始階段從教務主機取出各實習實驗室的既定排課時間表,  並將此資料納入資料庫, 並採網際模式建立 Oauth2 登入介面, 讓各實習實驗室管理者負責處理各實習實驗室的調課或借用事宜, 將可更進一步提升網際內容管理的應用範圍. (若要將此網際程式部署到 Heroku, 需要 <a href="https://devcenter.heroku.com/articles/heroku-postgresql">PostgreSQL</a> 與 <a href="http://docs.peewee-orm.com/en/latest/">peewee</a> 的搭配, 相關內容可以參考 <a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a> 與 <a href="http://mde.tw/cp2018/content/Pygrouf%20%E8%A7%A3%E6%9E%90.html">Pygrouf 解析</a>)</p>
<p>經過初步改為網際程式後, 共有六個修改步驟如下:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
# 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6
from flask import Flask, request 
from flask_cors import CORS


# 修改步驟 2/6 , 加入 Flask 相關物件設定
app = Flask(__name__)
# 此一設定可以讓程式跨網域擷取資料
CORS(app)

# for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定
proxy = 'http://[2001:288:6004:17::69]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''

# 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator
@app.route('/')
def timeTableList():
    semester = '1092'
    classroomno = 'BGA0810'
    column = True

    if semester == None:
        semester = '1092'
    if classroomno == None:
        # BGA0810 電腦輔助設計室
        classroomno = 'BGA0810'
        
    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
    post_var = {'pselyr': semester, 'pselclssroom': classroomno}

    result = requests.post(url, data = post_var, headers = headers)

    soup = bs4.BeautifulSoup(result.content, 'lxml')

    # 先除掉所有 anchor
    for a in soup.findAll('a'):
        # bs3 語法
        #a.replaceWithChildren()
        # bs4 語法, 將標註與內容拆開
        a.unwrap()

    # 根據輸出設定, 取出 class='tbcls' 的 table 資料
    table = soup.find('table', {'class': 'tbcls'})

    # 重建 table, 設定邊線為 1 pixel
    output = "&lt;table border='1'&gt;"

    for i in table.contents:
        # 利用 replace 復原  
        output += str(i).replace("&amp;nbsp", " ")
    output += "&lt;/table&gt;"
    #print(output)
    # 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回
    return output
    
# 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉
'''
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)
'''

# 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p></p>
<h3>SSH 設定</h3>
<p><a href="http://mde.tw/cd2021/content/SSH 了沒.html">http://mde.tw/cd2021/content/SSH 了沒.html</a> 中若使用者在公用電腦中啟動可攜系統時, 可以透過 start_ipv6.bat 中的 regedit.exe /S y:\myseesion.reg將先前設定好的登錄檔案 .reg 匯入, 確定連線 session 指到正確的 .ppk 位置.</p>
<p>而此 mysession.reg 乃利用命令列中的 regedit.exe 進入系統登錄檔案 [HKEY_CURRENT_USER\SOFTWARE\SimonTatham] 將 registry 設定匯出存為 y:\mysession.reg, 將此檔案存在 y:\ 的原因是希望每次啟動可攜系統後都能擷取到這個檔案, 不會因為可攜系統隨身碟在操作系統的代號差異而受影響.</p><h2>W8</h2>
<p>英文 - 擴大文獻搜尋與閱讀範圍.</p>
<p>數學 - 透過數值分析與模擬, 在原型實作之前, 確認已經完成最佳化設計與環境配置.</p>
<p>電腦 - 提供數位抽象化環境 (各種檔案格式內容儲存與處理), 可快速進行精確運算之設計之有效工具.</p>
<p>網路 - 連結分散在不同地理位置的電腦, 快速傳遞各種訊息, 可用於分散式版次管理與協同產品設計.</p>
<p><a href="https://www.epfl.ch">https://www.epfl.ch</a></p>
<p><a href="http://mde.tw/wcmj2021/content/W8.html">http://mde.tw/wcmj2021/content/W8.html</a></p>
<h4 style="padding-left: 30px;">FEM</h4>
<p style="padding-left: 60px;"><a href="https://github.com/Range-Software/range3">https://github.com/Range-Software/range3</a></p>
<p style="padding-left: 60px;"><a href="https://gitlab.com/akantu">https://gitlab.com/akantu</a> </p>
<p style="padding-left: 60px;"><a href="https://www.epfl.ch/labs/lsms/wp-content/uploads/2018/10/akantu_ug_v2.3.pdf">https://www.epfl.ch/labs/lsms/wp-content/uploads/2018/10/akantu_ug_v2.3.pdf</a></p>
<p style="padding-left: 60px;"><a href="http://fid.cl/courses/ai-robotics/vrep-tut/tutorial_VREP_bob.pdf">http://fid.cl/courses/ai-robotics/vrep-tut/tutorial_VREP_bob.pdf</a></p><h3>期中專案</h3>
<p>之前的 git 倉儲都是先在 Github 網際平台上建立後, 再設法 git clone 到近端改版, 但是這樣的前提是在 Github 建立倉儲時, 至少新增一個檔案 README.md,  但是假如在 Github 建立一個空倉儲則通常會建議使用者先在近端以 git init 產生一個空的 git 倉儲後, 納入改版資料然後再透過 git remote add 設定與遠端的 Github 倉儲 URL 進行對應.</p>
<p>而通常針對特定倉儲的 defualt 遠端 URL 連結的 git remote add 會以 origin 作為代號.</p>
<p>以下列 nfumde 近端的 .git/config 設定檔案為例:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = git@github.com:mdecourse/nfumde.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[remote "heroku"]
	url = https://git.heroku.com/nfumde.git
	fetch = +refs/heads/*:refs/remotes/heroku/*
[branch "main"]
	remote = origin
	merge = refs/heads/main</pre>
<p>當使用者在命令列中的特定目錄中以 git init 建立 .git 目錄時, .git/config 中只會有以下資料, 表示此目錄為 git 空倉儲, 尚未與遠端 Github 有任何對應:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true</pre>
<p>當使用者在該倉儲中, 執行 git remote add origin <a href="mailto:git@github.com:mdecourse/nfumde.git">git@github.com:mdecourse/nfumde.git</a> 後, .git/config 中將增加此一 git remote add 設定資料而成為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = git@github.com:mdecourse/nfumde.git
	fetch = +refs/heads/*:refs/remotes/origin/*</pre>
<p>當使用者在執行 git push --set-upstream origin main 或 git push -u origin main 時, 由於附加設定內建的 upstream 為 main 分支, 因此之後的 git push 與 git pull 若從 orgin 存取版本資料, 可以不用宣告分支, git 會假定存取 main 分支, 意即 git push 就是指 git push origin main. 此時.git/config 中將增加以下 upstream 設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[branch "main"]
	remote = origin
	merge = refs/heads/main</pre>
<p>最後若再執行 heroku login -i 以及 heroku git:remote -a nfumde, 也就是針對 Heroku 中的 nfumde app 設定 git remote add, 則最後的 .git/config 將成為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = git@github.com:mdecourse/nfumde.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[remote "heroku"]
	url = https://git.heroku.com/nfumde.git
	fetch = +refs/heads/*:refs/remotes/heroku/*
[branch "main"]
	remote = origin
	merge = refs/heads/main</pre>
<p>現在假如連倉儲的 origin url 都選擇自行設定, 其步驟如下:</p>
<ol>
<li>在近端命令視窗中, 以 git init (為了配合使用 main 作為主分支名稱, 可以使用 git config --global init.defaultBranch main 將設定寫入 home_ipv6\.gitconfig 中) 建立空的倉儲, 取得 Github 空倉儲的 url 後, 可以採用 https 或 SSH 模式進行 git remote add 的設定.</li>
<li>假如遠端的 Github 倉儲使用者帳號為 mdecourse, 而空倉儲名稱為 nfumde, 則其 https 的 url 為 <a href="https://github.com/mdecourse/nfumde">https://github.com/mdecourse/nfumde</a><a href="https://github.com/mdecourse/wcm_midterm,">,</a> 若採用 SSH 則其 url 為 <a href="mailto:git@my_putty_session:mdecourse/nfumde.git">git@my_putty_session:mdecourse/nfumde.git</a></li>
<li>步驟 2. 的指令為 git remote add origin https://github.com/mdecourse/nfumde.git, 或者使用 git remote add origin git@my_putty_session:mdecourse/nfumde.git</li>
<li>另外若將此一倉儲在近端使用 Heroku 的指令與遠端的 Heroku 名稱為 nfumde 的 app 進行對應設定, 則命令在 heroku login -i 之後, 以 heroku git:remote -a nfumde, 之後就可以透過 git push heroku 將此一倉儲的版本推向 Heroku.</li>
</ol>
<p>操作過程, 第一時間在近端以 git init 建立空倉儲時發現仍使用 master 作為主分支名稱, 因此利用 git config --global init.defaultBranch main 將設定存入 home_ipv6\.gitconfig 中, 將主分支名稱設為 main. 畫面如下:</p>
<p><img alt="" height="418" src="/images/nfumde_heroku_app.png" width="800"/></p>
<p>以上所完成的 Heroku 網際程式: <a href="http://nfumde.herokuapp.com/table">http://nfumde.herokuapp.com/table</a></p>
<p>假如要將上列網際程式改為 AJAX 模式, 可以參考下列程式碼, 以 button 的方式送出 AJAX 所需的 POST 變數:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import (Flask, request, jsonify)
                   
app = Flask(__name__)

html_page = """&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Rough AJAX Test&lt;/title&gt;
&lt;script&gt;
    function loadXMLDoc()
    {
        var req = new XMLHttpRequest()
        req.onreadystatechange = function()
        {
            if (req.readyState == 4)
            {
                if (req.status != 200)
                {
                    //error handling code here
                }
                else
                {
                    var response = JSON.parse(req.responseText)
                    document.getElementById('myDiv').innerHTML = response.username
                }
            }
        }
    
        req.open('POST', '/ajax')
        req.setRequestHeader("Content-type", "application/x-www-form-urlencoded")
        var un = document.getElementById('scname').value
        var sec = document.getElementById('secret').value
        var postVars = 'username='+un+'&amp;secret='+sec
        req.send(postVars)
        
        return false
    }
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Flask AJAX Test&lt;/h1&gt;
&lt;form action="" method="POST"&gt;
&lt;input type="text" name="scname" id="scname"&gt;
&lt;input type="hidden" name="secret" id="secret" value="shhh"&gt;
&lt;input type="button" value="Submit" onclick="return loadXMLDoc()"&gt;
&lt;/form&gt;
&lt;div id="myDiv"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;"""

@app.route('/')
def index():
    return html_page
        
        
@app.route('/ajax', methods = ['POST'])
def ajax_request():
    username = request.form['username']
    return jsonify(username=username)
    
    
if __name__ == "__main__":
    app.run(debug = True)</pre>
<p>以上的 html 原始碼可以利用 <a href="https://html-online.com/editor/">https://html-online.com/editor/</a> 進行編輯.</p>
<p></p><h3>RoboDK</h3>
<p>2015 年 <a href="https://robodk.com/">https://robodk.com/</a> 從 <a href="http://www.etsmtl.ca/unites-de-recherche/coro/accueil,">http://www.etsmtl.ca/unites-de-recherche/coro/accueil</a> spin off 創立公司, 最早開發的程式位於 <a href="https://www.parallemic.org/RoKiSim.html">https://www.parallemic.org/RoKiSim.html</a> (<a href="http://a.kmol.info:88/RoKiSim.7z">http://a.kmol.info:88/RoKiSim.7z</a>), 至今已經支援超過 500 型工業用機械手臂的離線與在線控制, 且支援 STL, STEP, IGES, WRML, 3DS and OBJ 的零件格式輸入. 相關介紹: <a href="https://en.wikipedia.org/wiki/RoboDK">https://en.wikipedia.org/wiki/RoboDK</a>.</p>
<p>RoboDK API 為開源套件: <a href="https://github.com/mdecourse/RoboDK-API">https://github.com/mdecourse/RoboDK-API</a></p>
<p style="padding-left: 30px;"><a href="https://robodk.com/doc/en/PythonAPI/index.html">https://robodk.com/doc/en/PythonAPI/index.html</a></p>
<p style="padding-left: 30px;"><a href="/downloads/robodk_modules_for_python39.7z">robodk_modules_for_python39.7z</a></p>
<p>以下在 RoboDK 的啟發下, 可以利用下列工具建立開源 Robotics 套件:</p>
<p style="padding-left: 30px;">從 <a href="http://a.kmol.info:88/Robot_stl.7z">Robot_stl.7z</a> 下載 Robot stl ASCII 檔案, 並利用 <a href="https://github.com/mdecourse/RobotSimulator">https://github.com/mdecourse/RobotSimulator</a> 程式架構, 結合 <a href="https://github.com/bulletphysics/bullet3">https://github.com/bulletphysics/bullet3</a> (可以利用 <a href="http://a.kmol.info:88/fall2020_v3.1_pybullet.7z">http://a.kmol.info:88/fall2020_v3.1_pybullet.7z</a> 可攜程式環境) 建立 Robotics oriented 開源套件.</p>
<h4>Tips:</h4>
<p style="padding-left: 30px;">從 <a href="https://robodk.com/forum/attachment.php?aid=502">https://robodk.com/forum/attachment.php?aid=502</a> 應該有機會將 RoboDK 執行畫面串流至網際伺服器.</p>
<p style="padding-left: 30px;">tool_item = robot.AddTool(robodk.Mat(mat))<br/> shape = RDK.AddShape(triangles)<br/> tool_item.AddGeometry(shape, robodk.eye())<br/> shape.Delete()</p>
<hr/>
<p style="padding-left: 30px;">csvdata = LoadList(strfile, ',')<br/>values = []<br/>for i in range(len(csvdata)):<br/>    print(csvdata[i])<br/>    values.append(csvdata[i])<br/>  <br/># We can also save the list back to a CSV file<br/># SaveList(csvdata, strfile, ',')</p>
<hr/>
<p style="padding-left: 30px;">在 RoboDK 中雙點擊 robot 即可開啟控制 Panel.</p>
<hr/>
<p style="padding-left: 30px;">Tool -Trace -Active 若為綠色, 表示 end-effector 移動將會留下軌跡, 若為紅色則不會留下軌跡, reset 可抹除先前留下的運行軌跡.</p>
<hr/>
<p style="padding-left: 30px;"><code>from robolink import *<br/> <br/> # make sure opencv for python is available<br/> import_install("cv2", "opencv-python")<br/> <br/> # Load OpenCV<br/> import cv2</code></p>
<hr/>
<h4>create part</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Type help("robolink") or help("robodk") for more information
# Press F5 to run the script
# Note: you do not need to keep a copy of this file, your python script is saved with the station
from robolink import *    # API to communicate with RoboDK
from robodk import *      # basic matrix operations
import random
RDK = Robolink()

PART_NAME = 'box100mm'
CONVEYOR_REF = 'MovingRef'

SIZE_BOX = RDK.getParam('SizeBox')

SIZE_BOX_XYZ = [float(x.replace(' ','')) for x in SIZE_BOX.split(',')]
[SIZE_BOX_X, SIZE_BOX_Y, SIZE_BOX_Z] = SIZE_BOX_XYZ

# Create a new part and place it on top of the conveyor, adjusting the height
part = RDK.Item(PART_NAME, ITEM_TYPE_OBJECT)
conveyor_ref = RDK.Item(CONVEYOR_REF, ITEM_TYPE_FRAME)
part_pos = part.PoseAbs()
part.Copy()
newpart = conveyor_ref.Paste()
newpart.setPoseAbs(part_pos*transl(0,0,SIZE_BOX_Z/2))
newpart.setName('Part')
newpart.Scale([SIZE_BOX_X/100, SIZE_BOX_Y/100, SIZE_BOX_Z/100]) #scale with respect to the reference object (100mm cube)
color = random.uniform(0.1 , 0.9)
newpart.Recolor([1-color, color, 0.2, 1]) #set RGBA color
newpart.setVisible(True, False) #make item visible but hide the reference frame



</pre>
<h4><a href="/downloads/robodk_ex1.7z">robodk_ex1.7z</a></h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *              # import the robolink library (bridge with RoboDK)
from robodk import *                # import the robodk library (robotics toolbox)

RDK = Robolink()                    # establish a link with the simulator
robot = RDK.Item('KUKA KR210')      # retrieve the robot by name
robot.setJoints([0,-90,90,0,0,0])   # set the robot to the home position

target = robot.Pose()               # retrieve the current target as a pose (position of the active tool with respect to the active reference frame)
xyzabc = Pose_2_KUKA(target)        # Convert the 4x4 pose matrix to XYZABC position and orientation angles (mm and deg)

x,y,z,a,b,c = xyzabc                # Calculate a new pose based on the previous pose
xyzabc2 = [x,y,z+50,a,b,c+45]
target2 = KUKA_2_Pose(xyzabc2)      # Convert the XYZABC array to a pose (4x4 matrix)

robot.MoveJ(target2)                # Make a linear move to the calculated position</pre>
<h4><a href="/downloads/robodk_ex2.7z">robodk_ex2.7z</a></h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *                  # import the robolink library
from robodk import *                    # import the robodk library

RDK = Robolink()                        # connect to the RoboDK API
robot  = RDK.Item('', ITEM_TYPE_ROBOT)  # Retrieve a robot available in RoboDK
#target  = RDK.Item('Target 1')         # Retrieve a target (example)


pose = robot.Pose()                     # retrieve the current robot position as a pose (position of the active tool with respect to the active reference frame)
# target = target.Pose()                # the same can be applied to targets (taught position)

# Read the 4x4 pose matrix as [X,Y,Z , A,B,C] Euler representation (mm and deg): same representation as KUKA robots
XYZABC = Pose_2_KUKA(pose)
print(XYZABC)

# Read the 4x4 pose matrix as [X,Y,Z, q1,q2,q3,q4] quaternion representation (position in mm and orientation in quaternion): same representation as ABB robots (RAPID programming)
xyzq1234 = Pose_2_ABB(pose)
print(xyzq1234)

# Read the 4x4 pose matrix as [X,Y,Z, u,v,w] representation (position in mm and orientation vector in radians): same representation as Universal Robots
xyzuvw = Pose_2_UR(pose)
print(xyzuvw)

x,y,z,a,b,c = XYZABC                    # Use the KUKA representation (for example) and calculate a new pose based on the previous pose
XYZABC2 = [x,y,z+50,a,b,c+45]
pose2 = KUKA_2_Pose(XYZABC2)            # Convert the XYZABC array to a pose (4x4 matrix)

robot.MoveJ(pose2)                      # Make a joint move to the new position
# target.setPose(pose2)                  # We can also update the pose to targets, tools, reference frames, objects, ...</pre>
<h4><a href="/downloads/robodk_ex3.7z">robodk_ex3.7z</a></h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *                  # import the robolink library
from robodk import *                    # import the robodk library

angle = int(mbox('Enter your angle (0-45)', entry=True))

RDK = Robolink()                        # connect to the RoboDK API
robot  = RDK.Item('', ITEM_TYPE_ROBOT)  # Retrieve a robot available in RoboDK
#target  = RDK.Item('Target 1')         # Retrieve a target (example)
 
 
pose = robot.Pose()                     # retrieve the current robot position as a pose (position of the active tool with respect to the active reference frame)
# target = target.Pose()                # the same can be applied to targets (taught position)
 
# Read the 4x4 pose matrix as [X,Y,Z , A,B,C] Euler representation (mm and deg): same representation as KUKA robots
XYZABC = Pose_2_KUKA(pose)
print(XYZABC)
 
# Read the 4x4 pose matrix as [X,Y,Z, q1,q2,q3,q4] quaternion representation (position in mm and orientation in quaternion): same representation as ABB robots (RAPID programming)
xyzq1234 = Pose_2_ABB(pose)
print(xyzq1234)
 
# Read the 4x4 pose matrix as [X,Y,Z, u,v,w] representation (position in mm and orientation vector in radians): same representation as Universal Robots
xyzuvw = Pose_2_UR(pose)
print(xyzuvw)
 
x,y,z,a,b,c = XYZABC                    # Use the KUKA representation (for example) and calculate a new pose based on the previous pose
XYZABC2 = [x,y,z+50,a,b,c+angle]
pose2 = KUKA_2_Pose(XYZABC2)            # Convert the XYZABC array to a pose (4x4 matrix)
 
robot.MoveJ(pose2)                      # Make a joint move to the new position
# target.setPose(pose2)                  # We can also update the pose to targets, tools, reference frames, objects, ...</pre>
<h4><a href="/downloads/robodk_ex4.7z">robodk_ex4.7z</a></h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *                  # import the robolink library
from robodk import *                    # import the robodk library

RDK = Robolink()                        # connect to the RoboDK API
robot  = RDK.Item('', ITEM_TYPE_ROBOT)  # Retrieve a robot available in RoboDK
# get the current position of the TCP with respect to the reference frame:
# (4x4 matrix representing position and orientation)
target_ref = robot.Pose()
pos_ref = target_ref.Pos()
print("Drawing a polygon around the target: ")
print(Pose_2_TxyzRxyz(target_ref))
 
 
# move the robot to the first point:
robot.MoveJ(target_ref)
 
# It is important to provide the reference frame and the tool frames when generating programs offline
robot.setPoseFrame(robot.PoseFrame())
robot.setPoseTool(robot.PoseTool())
robot.setZoneData(10) # Set the rounding parameter (Also known as: CNT, APO/C_DIS, ZoneData, Blending radius, cornering, ...)
robot.setSpeed(200) # Set linear speed in mm/s
 
# Set the number of sides of the polygon:
n_sides = 6
R = 400
 
# make a hexagon around reference target:
for i in range(n_sides+1):
    ang = i*2*pi/n_sides #angle: 0, 60, 120, ...
 
    #-----------------------------
    # Movement relative to the reference frame
    # Create a copy of the target
    target_i = Mat(target_ref)
    pos_i = target_i.Pos()
    pos_i[0] = pos_i[0] + R*cos(ang)
    pos_i[1] = pos_i[1] + R*sin(ang)
    target_i.setPos(pos_i)
    print("Moving to target %i: angle %.1f" % (i, ang*180/pi))
    print(str(Pose_2_TxyzRxyz(target_i)))
    robot.MoveL(target_i)
     
    #-----------------------------
    # Post multiply: relative to the tool
    #target_i = target_ref * rotz(ang) * transl(R,0,0) * rotz(-ang)
    #robot.MoveL(target_i)
 
# move back to the center, then home:
robot.MoveL(target_ref)
 
print('Done')</pre>
<h4>ex5:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Move a robot along a line given a start and end point by steps
# This macro shows different ways of programming a robot using a Python script and the RoboDK API

# Default parameters:
P_START = [1755, -500, 2155]    # Start point with respect to the robot base frame
P_END   = [1755,  600, 2155]    # End point with respect to the robot base frame
NUM_POINTS  = 10                # Number of points to interpolate

# Function definition to create a list of points (line)
def MakePoints(xStart, xEnd, numPoints):
    """Generates a list of points"""
    if len(xStart) != 3 or len(xEnd) != 3:
        raise Exception("Start and end point must be 3-dimensional vectors")
    if numPoints &lt; 2:
        raise Exception("At least two points are required")
    
    # Starting Points
    pt_list = []
    x = xStart[0]
    y = xStart[1]
    z = xStart[2]

    # How much we add/subtract between each interpolated point
    x_steps = (xEnd[0] - xStart[0])/(numPoints-1)
    y_steps = (xEnd[1] - xStart[1])/(numPoints-1)
    z_steps = (xEnd[2] - xStart[2])/(numPoints-1)

    # Incrementally add to each point until the end point is reached
    for i in range(numPoints):
        point_i = [x,y,z] # create a point
        #append the point to the list
        pt_list.append(point_i)
        x = x + x_steps
        y = y + y_steps
        z = z + z_steps
    return pt_list

#---------------------------------------------------
#--------------- PROGRAM START ---------------------
from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming
from robodk import *      # Robotics toolbox for industrial robots

# Generate the points curve path
POINTS = MakePoints(P_START, P_END, NUM_POINTS)

# Initialize the RoboDK API
RDK = Robolink()

# turn off auto rendering (faster)
RDK.Render(False) 

# Automatically delete previously generated items (Auto tag)
list_items = RDK.ItemList() # list all names
for item in list_items:
    if item.Name().startswith('Auto'):
        item.Delete()

# Promt the user to select a robot (if only one robot is available it will select that robot automatically)
robot = RDK.ItemUserPick('Select a robot', ITEM_TYPE_ROBOT)

# Turn rendering ON before starting the simulation
RDK.Render(True) 

# Abort if the user hits Cancel
if not robot.Valid():
    quit()

# Retrieve the robot reference frame
reference = robot.Parent()

# Use the robot base frame as the active reference
robot.setPoseFrame(reference)

# get the current orientation of the robot (with respect to the active reference frame and tool frame)
pose_ref = robot.Pose()
print(Pose_2_TxyzRxyz(pose_ref))
# a pose can also be defined as xyzwpr / xyzABC
#pose_ref = TxyzRxyz_2_Pose([100,200,300,0,0,pi])



#-------------------------------------------------------------
# Option 1: Move the robot using the Python script

# We can automatically force the "Create robot program" action using a RUNMODE state
# RDK.setRunMode(RUNMODE_MAKE_ROBOTPROG)

# Iterate through all the points
for i in range(NUM_POINTS):
    # update the reference target with the desired XYZ coordinates
    pose_i = pose_ref
    pose_i.setPos(POINTS[i])
    
    # Move the robot to that target:
    robot.MoveJ(pose_i)
    
# Done, stop program execution
quit()


#-------------------------------------------------------------
# Option 2: Create the program on the graphical user interface
# Turn off rendering
RDK.Render(False)
prog = RDK.AddProgram('AutoProgram')

# Iterate through all the points
for i in range(NUM_POINTS):
    # add a new target and keep the reference to it
    ti = RDK.AddTarget('Auto Target %i' % (i+1))
    # use the reference pose and update the XYZ position
    pose_i = pose_ref
    pose_i.setPos(POINTS[i])
    ti.setPose(pose_i)
    # force to use the target as a Cartesian target
    ti.setAsCartesianTarget()

    # Optionally, add the target as a Linear/Joint move in the new program
    prog.MoveL(ti)

# Turn rendering ON before starting the simulation
RDK.Render(True) 

# Run the program on the simulator (simulate the program):
prog.RunProgram()
# prog.WaitFinished() # wait for the program to finish

# We can create the program automatically
# prog.MakeProgram()

# Also, if we have the robot driver we could use the following call to provoke a "Run on robot" action (simulation and the robot move simultaneously)
# prog.setRunType(PROGRAM_RUN_ON_ROBOT)

# Done, stop program execution
quit()


#-------------------------------------------------------------
# Option 3: Move the robot using the Python script and detect if movements can be linear
# This is an improved version of option 1
#
# We can automatically force the "Create robot program" action using a RUNMODE state
# RDK.setRunMode(RUNMODE_MAKE_ROBOTPROG)

# Iterate through all the points
ROBOT_JOINTS = None
for i in range(NUM_POINTS):
    # update the reference target with the desired XYZ coordinates
    pose_i = pose_ref
    pose_i.setPos(POINTS[i])
    
    # Move the robot to that target:
    if i == 0:
        # important: make the first movement a joint move!
        robot.MoveJ(pose_i)
        ROBOT_JOINTS = robot.Joints()
    else:
        # test if we can do a linear movement from the current position to the next point
        if robot.MoveL_Test(ROBOT_JOINTS, pose_i) == 0:
            robot.MoveL(pose_i)
        else:
            robot.MoveJ(pose_i)
            
        ROBOT_JOINTS = robot.Joints()
    
# Done, stop program execution
quit()</pre>
<h4>ex6:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Move a robot along a line given a start and end point by steps
# This macro shows different ways of programming a robot using a Python script and the RoboDK API

# Default parameters:
P_START = [1755, -500, 2155]    # Start point with respect to the robot base frame
P_END   = [1755,  600, 2155]    # End point with respect to the robot base frame
NUM_POINTS  = 10                # Number of points to interpolate

# Function definition to create a list of points (line)
def MakePoints(xStart, xEnd, numPoints):
    """Generates a list of points"""
    if len(xStart) != 3 or len(xEnd) != 3:
        raise Exception("Start and end point must be 3-dimensional vectors")
    if numPoints &lt; 2:
        raise Exception("At least two points are required")
    
    # Starting Points
    pt_list = []
    x = xStart[0]
    y = xStart[1]
    z = xStart[2]

    # How much we add/subtract between each interpolated point
    x_steps = (xEnd[0] - xStart[0])/(numPoints-1)
    y_steps = (xEnd[1] - xStart[1])/(numPoints-1)
    z_steps = (xEnd[2] - xStart[2])/(numPoints-1)

    # Incrementally add to each point until the end point is reached
    for i in range(numPoints):
        point_i = [x,y,z] # create a point
        #append the point to the list
        pt_list.append(point_i)
        x = x + x_steps
        y = y + y_steps
        z = z + z_steps
    return pt_list

#---------------------------------------------------
#--------------- PROGRAM START ---------------------
from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming
from robodk import *      # Robotics toolbox for industrial robots

# Generate the points curve path
POINTS = MakePoints(P_START, P_END, NUM_POINTS)

# Initialize the RoboDK API
RDK = Robolink()

# turn off auto rendering (faster)
RDK.Render(False) 

# Automatically delete previously generated items (Auto tag)
list_items = RDK.ItemList() # list all names
for item in list_items:
    if item.Name().startswith('Auto'):
        item.Delete()

# Promt the user to select a robot (if only one robot is available it will select that robot automatically)
robot = RDK.ItemUserPick('Select a robot', ITEM_TYPE_ROBOT)

# Turn rendering ON before starting the simulation
RDK.Render(True) 

# Abort if the user hits Cancel
if not robot.Valid():
    quit()

# Retrieve the robot reference frame
reference = robot.Parent()

# Use the robot base frame as the active reference
robot.setPoseFrame(reference)

# get the current orientation of the robot (with respect to the active reference frame and tool frame)
pose_ref = robot.Pose()
print(Pose_2_TxyzRxyz(pose_ref))
# a pose can also be defined as xyzwpr / xyzABC
#pose_ref = TxyzRxyz_2_Pose([100,200,300,0,0,pi])


#-------------------------------------------------------------
# Option 1: Create a curve follow project

# First we need to create an object from the provided points or add the points to an existing object and optionally project them on the surface

# Create a new object given the list of points (the 3xN vector can be extended to 6xN to provide the normal)
object_points = RDK.AddPoints(POINTS)

# Alternatively, we can project the points on the object surface
# object = RDK.Item('Object', ITEM_TYPE_OBJECT)
# object_points = object.AddPoints(POINTS, PROJECTION_ALONG_NORMAL_RECALC)
# Place the points at the same location as the reference frame of the object
# object_points.setParent(object.Parent())

# Set the name of the object containing points
object_points.setName('AutoPoints n%i' % NUM_POINTS)

path_settings = RDK.AddMillingProject("AutoPointFollow settings")
prog, status = path_settings.setMillingParameters(part=object_points)
# At this point, we may have to manually adjust the tool object or the reference frame

# Run the create program if success
prog.RunProgram()

# Done
quit()



#-------------------------------------------------------------
# Option 2: Create a point follow project (similar to Option 4)

# First we need to create an object from the provided points or add the points to an existing object and optionally project them on the surface

# Create a new object given the list of points:
object_curve = RDK.AddCurve(POINTS)

# Alternatively, we can project the points on the object surface
# object = RDK.Item('Object', ITEM_TYPE_OBJECT)
# object_curve = object.AddCurve(POINTS, PROJECTION_ALONG_NORMAL_RECALC)
# Place the curve at the same location as the reference frame of the object
# object_curve.setParent(object.Parent())

# Set the name of the object containing points
object_curve.setName('AutoPoints n%i' % NUM_POINTS)

# Create a new "Curve follow project" to automatically follow the curve
path_settings = RDK.AddMillingProject("AutoCurveFollow settings")
prog, status = path_settings.setMillingParameters(part=object_curve)
# At this point, we may have to manually adjust the tool object or the reference frame

# Run the create program if success
prog.RunProgram()

# Done
quit()</pre>
<h4>ex7:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robodk import *
from robolink import *

# Set the name of the reference frame to place the targets:
REFERENCE_NAME = 'Reference CSV'

# Set the name of the reference target
# (orientation will be maintained constant with respect to this target)
TARGET_NAME = 'Home' 

#---------------------------
# Start the RoboDK API
RDK = Robolink()

# Ask the user to pick a file:
rdk_file_path = RDK.getParam("PATH_OPENSTATION")
path_file = getOpenFile(rdk_file_path + "/")
if not path_file:
    print("Nothing selected")
    quit()

# Get the program name from the file path
program_name = getFileName(path_file)

# Load the CSV file as a list of list [[x,y,z,speed],[x,y,z,speed],...]
data = LoadList(path_file)

# Delete previously generated programs that follow a specific naming
# Automatically delete previously generated items (Auto tag)
#list_items = RDK.ItemList() # list all names
#for item in list_items:
#    if item.Name().startswith('Frame'):
#        item.Delete()

# Select the robot (the popup is diplayed only if there are 2 or more robots)
robot = RDK.ItemUserPick('Select a robot',ITEM_TYPE_ROBOT)
if not robot.Valid():
    raise Exception("Robot not selected or not valid")
    quit()

# Get the reference frame to generate the path
frame = RDK.Item(REFERENCE_NAME,ITEM_TYPE_FRAME)
if not frame.Valid():
    raise Exception("Reference frame not found. Use name: %s" % REFERENCE_NAME)

# Use the home target as a reference
target = RDK.Item(TARGET_NAME, ITEM_TYPE_TARGET)
if not target.Valid():
    raise Exception("Home target is not valid. Set a home target named: %s" % TARGET_NAME)

# Set the robot to the home position
robot.setJoints(target.Joints())

# Get the pose reference from the home target
pose_ref = robot.Pose()

# Add a new program
program = RDK.AddProgram(program_name, robot)

# Turn off rendering (faster)
RDK.Render(False)

# Speed up by not showing the instruction:
program.ShowInstructions(False)

# Remember the speed so that we don't set it with every instruction
current_speed = None
target = None

# Very important: Make sure we set the reference frame and tool frame so that the robot is aware of it
program.setPoseFrame(frame)
program.setPoseTool(robot.PoseTool())

# Iterate through all the points
for i in range(len(data)):
    pi = pose_ref
    pi.setPos(data[i])

    # Update speed if there is a 4th column
    if len(data[i]) &gt;= 3:
        speed = data[i][3]
        # Update the program if the speed is different than the previously set speed
        if type(speed) != str and speed != current_speed:
            program.setSpeed(speed)
            current_speed = speed

    target = RDK.AddTarget('T%i'% i, frame)
    target.setPose(pi)
    pi = target

    # Add a linear movement (with the exception of the first point which will be a joint movement)
    if i == 0:
        program.MoveJ(pi)
    else:
        program.MoveL(pi)

    # Update from time to time to notify the user about progress
    if i % 100 == 0:
        program.ShowTargets(False)
        RDK.ShowMessage("Loading %s: %.1f %%" % (program_name, 100*i/len(data)),False)
        RDK.Render()
        
program.ShowTargets(False)

RDK.ShowMessage("Done",False)
print("Done")</pre>
<h4>ex8:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # API to communicate with RoboDK
from robodk import *      # basic matrix operations

# Start the with RoboDK
RDK = Robolink()

# Select the robot
ROBOT = RDK.ItemUserPick('Select a robot', ITEM_TYPE_ROBOT)

FRAME = RDK.Item('Path Reference', ITEM_TYPE_FRAME)
TOOL = RDK.Item('Tool Reference', ITEM_TYPE_TOOL)
if not FRAME.Valid() or not TOOL.Valid():
    raise Exception("Select appropriate FRAME and TOOL references")

# Check if the user selected a robot
if not ROBOT.Valid():
    quit()

# csv_file = 'C:/Users/Albert/Desktop/Var_P.csv'
csv_file = getOpenFile(RDK.getParam('PATH_OPENSTATION'))

# Load P_Var.CSV data as a list of poses, including links to reference and tool frames
def load_targets(strfile):
    csvdata = LoadList(strfile, ',', 'utf-8')
    poses = []
    idxs = []
    for i in range(0, len(csvdata)):
        x,y,z,rx,ry,rz = csvdata[i][0:6]
        poses.append(transl(x,y,z)*rotz(rz*pi/180)*roty(ry*pi/180)*rotx(rx*pi/180))
        idxs.append(csvdata[i][6])
    return poses, idxs

# Load and display Targets from the CSV file
def load_targets_GUI(strfile):
    poses, idxs = load_targets(strfile)
    program_name = getFileName(strfile)
    program_name = program_name.replace('-','_').replace(' ','_')
    program = RDK.Item(program_name, ITEM_TYPE_PROGRAM)
    if program.Valid():
        program.Delete()
        
    program = RDK.AddProgram(program_name, ROBOT)
    program.setFrame(FRAME)
    program.setTool(TOOL)
    ROBOT.MoveJ(ROBOT.JointsHome())
    
    for pose, idx in zip(poses, idxs):
        name = '%s-%i' % (program_name, idx)
        target = RDK.Item(name, ITEM_TYPE_TARGET)
        if target.Valid():
            target.Delete()
        target = RDK.AddTarget(name, FRAME, ROBOT)
        target.setPose(pose)
        
        try:
            program.MoveJ(target)
        except:
            print('Warning: %s can not be reached. It will not be added to the program' % name)


def load_targets_move(strfile):
    poses, idxs = load_targets(strfile)
    
    ROBOT.setFrame(FRAME)
    ROBOT.setTool(TOOL)

    ROBOT.MoveJ(ROBOT.JointsHome())
    
    for pose, idx in zip(poses, idxs):
        try:
            ROBOT.MoveJ(pose)
        except:
            RDK.ShowMessage('Target %i can not be reached' % idx, False)
        

# Force just moving the robot after double clicking
#load_targets_move(csv_file)
#quit()

# Recommended mode of operation:
# 1-Double click the python file creates a program in RoboDK station
# 2-Generate program generates the program directly

MAKE_GUI_PROGRAM = False

ROBOT.setFrame(FRAME)
ROBOT.setTool(TOOL)


if RDK.RunMode() == RUNMODE_SIMULATE:
    MAKE_GUI_PROGRAM = True
    # MAKE_GUI_PROGRAM = mbox('Do you want to create a new program? If not, the robot will just move along the tagets', 'Yes', 'No')
    
else:
    # if we run in program generation mode just move the robot
    MAKE_GUI_PROGRAM = False


if MAKE_GUI_PROGRAM:
    RDK.Render(False) # Faster if we turn render off
    load_targets_GUI(csv_file)
else:
    load_targets_move(csv_file)</pre>
<h4>ex9:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># This macro shows how to load a KUKA SRC file
# PTP movements with joint coordinates and LIN movements with Cartesian information (XYZABC) will be imported as a program.
# This macro also supports defining the tool and the base inline and changing the speed using the VEL.CP global variable

## Example program:
# DEF Milling ( )
# 
# $BASE = {FRAME: X 0.000,Y -1000.000,Z 0.000,A 0.000,B 0.000,C 0.000}
# $TOOL = {FRAME: X 466.604,Y -4.165,Z 109.636,A -0.000,B 90.000,C 0.000}
# 
# $VEL.CP = 1.00000
# 
# PTP {A1 107.78457,A2 -44.95260,A3 141.64681,A4 107.66839,A5 -87.93467,A6 6.37710}
# LIN {X -0.000,Y -0.000,Z 6.350,A -180.000,B 0.000,C -180.000}
# 
# $VEL.CP = 0.02117
# LIN {X 276.225,Y 0.000,Z 6.350,A 180.000,B 0.000,C -180.000}
# LIN {X 276.225,Y 323.850,Z 6.350,A -160.000,B 0.000,C 180.000}
# LIN {X -0.000,Y 323.850,Z 6.350,A -180.000,B -0.000,C -180.000}
# LIN {X -0.000,Y -0.000,Z 6.350,A -180.000,B 0.000,C -180.000}
# $VEL.CP = 1.00000
# LIN {X -0.000,Y -0.000,Z 106.350,A -180.000,B 0.000,C -180.000}
# 
# END


from robodk import *
from robolink import *

#---------------------------
# Start the RoboDK API
RDK = Robolink()

# Ask the user to pick an SRC file:
rdk_file_path = RDK.getParam("PATH_OPENSTATION")
src_file_path = getOpenFile(rdk_file_path + "/")
if not src_file_path:
    print("Nothing selected")
    quit()

# Get the program name from the file path
program_name = getFileName(src_file_path)
print("Loading program: " + program_name)

if not src_file_path.lower().endswith(".src"):
    raise Exception("Invalid file selected. Select an SRC file.")

def GetValues(line):
    """Get all the numeric values from a line"""
    # LIN {X 1671.189,Y -562.497,Z -243.070,A 173.363,B -8.525,C -113.306} C_DIS    
    line = line.replace(",", " ")
    line = line.replace("}", " ")
    values = line.split(" ")

    list_values = []
    for value in values:
        try:
            value = float(value)
        except:
            continue

        list_values.append(value)
    
    return list_values

# Ask the user to select a robot (if more than a robot is available)    
robot = RDK.ItemUserPick('Select a robot',ITEM_TYPE_ROBOT)
if not robot.Valid():
    raise Exception("Robot not selected or not valid")

# Get the active reference frame
frame = robot.getLink(ITEM_TYPE_FRAME)
if not frame.Valid():
    # If there is no active reference frame, use the robot base
    frame = robot.Parent()

# Get the active tool frame
tool = robot.getLink(ITEM_TYPE_TOOL)

# Add a new program
program = RDK.AddProgram(program_name, robot)

# Turn off rendering (faster)
RDK.Render(False)

# Speed up by not showing the instruction:
program.ShowInstructions(False)

# Open the file and iterate through each line
f = open(src_file_path)
count = 0
for line in f:
    # Remove empty characters:
    line = line.strip()
    print("Loading line: " + line)

    # Get all the numeric values in order
    values = GetValues(line)

    # Increase the counter
    count = count + 1

    # Update TCP speed (KUKA works in m/s, RoboDK works in mm/s)
    if line.startswith("$VEL.CP"):
        program.setSpeed(values[0]*1000)
        continue
        
    # Check operations that involve a pose
    if len(values) &lt; 6:
        print("Warning! Invalid line: " + line)
        continue

    # Check what instruction we need to add:
    if line.startswith("LIN"):
        target = RDK.AddTarget('T%i'% count, frame)
        target.setPose(KUKA_2_Pose(values))
        program.MoveL(target)

    # Check PTP move
    elif line.startswith("PTP"):
        target = RDK.AddTarget('T%i'% count, frame)
        target.setAsJointTarget()
        target.setJoints(values)
        program.MoveJ(target)

    # Set the tool
    elif line.startswith("$TOOL"):
        pose = KUKA_2_Pose(values)
        tool = robot.AddTool(pose, "SRC TOOL")
        program.setTool(tool)

    # Set the reference frame
    elif line.startswith("$BASE"):
        frame = RDK.AddFrame("SRC BASE", robot.Parent())
        frame.setPose(KUKA_2_Pose(values))
        program.setFrame(frame)

# Hide the targets
program.ShowTargets(False)

# Show the instructions
program.ShowInstructions(True)

RDK.ShowMessage("Done",False)
print("Done")</pre>
<h4>ex10:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># This macro shows how you can create a program that moves the robot through a set of points
# The points are automatically created as a cube grid around a reference target
# If a linear movement can't be done from one point to the next one the robot will follow a joint movement
from robolink import *    # API to communicate with RoboDK
from robodk import *      # basic matrix operations
from random import uniform # to randomly calculate rz (rotation around the Z axis)

# Name of the reference target
REFERENCE_TARGET = 'RefTarget'

# Check for collisions
CHECK_COLLISIONS = False

#Start the RoboDK API
RDK = Robolink()

# Set collision checking ON or OFF
RDK.setCollisionActive(COLLISION_ON if CHECK_COLLISIONS else COLLISION_OFF)

# Run on robot: Force the program to run on the connected robot (same behavior as right clicking the program, then, selecting "Run on Robot")
# RDK.setRunMode(RUNMODE_RUN_ROBOT)

# Get the main/only robot in the station
robot = RDK.Item('', ITEM_TYPE_ROBOT)
if not robot.Valid():
    raise Exception("Robot not valid or not available")

# Get the active reference frame
frame = robot.getLink(ITEM_TYPE_FRAME)
if not frame.Valid():
    frame = robot.Parent()
    robot.setPoseFrame(frame)

# Get the reference pose with respect to the robot
frame_pose = robot.PoseFrame()

# Get the active tool
tool = robot.getLink(ITEM_TYPE_TOOL)
if not tool.Valid():
    tool = robot.AddTool(transl(0,0,75), "Tool Grid")
    robot.setPoseTool(tool)

# Get the target reference RefTarget
target_ref = RDK.Item(REFERENCE_TARGET, ITEM_TYPE_TARGET)
if not target_ref.Valid():
    target_ref = RDK.AddTarget(REFERENCE_TARGET, frame, robot)

# Get the reference position (pose=4x4 matrix of the target with respect to the reference frame)
pose_ref = target_ref.Pose()
startpoint = target_ref.Joints()
config_ref = robot.JointsConfig(startpoint)

# Retrieve the tool pose
tool_pose = tool.PoseTool()

# Retrieve the degrees of freedom or axes (num_dofs = 6 for a 6 axis robot)
num_dofs = len(robot.JointsHome().list())

# Get the reference frame of the target reference
ref_frame = target_ref.Parent()

# Function definition to check if 2 robot configurations are the same
# Configurations are set as [Rear/Front,LowerArm/UpperArm,Flip/NonFlip] bits (int values)
def config_equal(config1, config2):
    if config1[0] != config2[0] or config1[1] != config2[1] or config1[2] != config2[2]:
        return False
    return True


# Create a new program
prog = RDK.AddProgram('AutoCreated')

# This should make program generation slightly faster
#prog.ShowInstructions(False)

# Start creating the program or moving the robot:
program_or_robot = prog
program_or_robot.setPoseTool(tool_pose)

program_or_robot.MoveJ(target_ref)
lastjoints = startpoint
rz = 0
ntargets = 0
for tz in range(-100, 101, 100):
    for ty in range(0, 401, 200):
        for tx in range(100, -5001, -250):
            ntargets = ntargets + 1
            # calculate a random rotation around the Z axis of the tool
            #rz = uniform(-20*pi/180, 20*pi/180)
                        
            # Calculate the position of the new target: translate with respect to the robot base and rotate around the tool
            newtarget_pose = transl(tx,ty,tz)*pose_ref*rotz(rz)
            
            # First, make sure the target is reachable:
            newtarget_joints = robot.SolveIK(newtarget_pose, lastjoints, tool_pose, frame_pose)
            if len(newtarget_joints.list()) &lt; num_dofs:
                print('...target not reachable!! Skipping target')
                continue

            # Create a new target:
            newtarget_name = 'Auto T%.0f,%.0f,%.0f Rz=%.1f' % (tx,ty,tz,rz)
            print('Creating target %i: %s' % (ntargets, newtarget_name))
            newtarget = RDK.AddTarget(newtarget_name, ref_frame, robot)

            # At this point, the target is reachable.
            # We have to check if we can do a linear move or not. We have 2 methods:
            can_move_linear = True
            
            # ------------------------------
            # Validation method 1: check the joints at the destination target
            # and make sure we have the same configuration
            # A quick way to validate (it may not be perfect if robot joints can move more than 1 turn)
            # To improve this method we would have to check configurations on all possible solutions
            # from the inverse kinematics, using SolveIK_All()
            if False:
                target_joints_config = robot.JointsConfig(newtarget_joints)
                if not config_equal(config_ref, target_joints_config):
                    # We can't do a linear movement
                    can_move_linear = False
                    print("Warning! configuration is not the same as the reference target! Linear move will not be possible")
                    
                    # update the reference configuration to the new one
                    config_ref = target_joints_config
            # -------------------------------



            # -------------------------------
            # Validation method 2: use the robot.MoveL_Test option to check if the robot can make a linear movement
            # This method is more robust and should provide a 100% accurate result but it may take more time
            # robot.MoveL_Test can also take collisions into account if collision checking is activated
            issues = robot.MoveL_Test(lastjoints, newtarget_pose)
            can_move_linear = (issues == 0)
            # We can retrieve the final joint position by retrieving the robot joints
            if can_move_linear:
                newtarget_joints = robot.Joints()
            
            # ---------------------------------

            if can_move_linear:
                # All good, we don't need to modify the target.
                # However, we could set the joints in the target as this may allow us to retrieve the robot configuration if we ever need it
                newtarget.setAsCartesianTarget() # default behavior
                newtarget.setJoints(newtarget_joints)
                # It is important to have setPose after setJoints as it may recalculate the joints to match the target
                newtarget.setPose(newtarget_pose) 

                # Add the linear movement
                program_or_robot.MoveL(newtarget)
                
            else:
                #print(newtarget_joints)
                # Check if we can do a joint movement (check for collisions)
                issues = robot.MoveJ_Test(lastjoints, newtarget_joints)
                can_move_joints = (issues == 0)
                if not can_move_joints:
                    # Skip this point
                    print("Skipping movement to: " + str(newtarget_joints))
                    continue

                # Make sure we have a joint target and a joint movement
                newtarget.setAsJointTarget() # default behavior
                
                # Setting the pose for a joint target is not important unless we want to retrieve the pose later
                # or we want to use the Cartesian coordinates for post processing
                newtarget.setPose(newtarget_pose)

                # Make sure we set the joints after the pose for a joint taget as it may recalculate the pose
                newtarget.setJoints(newtarget_joints)

                # Add the joint movement
                program_or_robot.MoveJ(newtarget)


            # Remember the joint poisition of the last movement
            lastjoints = newtarget_joints

# Showing the instructions at the end is faster:
prog.ShowInstructions(True)

# Hiding the targets is cleaner and more difficult to accidentaly move a target
#prog.ShowTargets(False)

print('Program done with %i targets' % ntargets)</pre>
<h4>ex11:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from tkinter import *
from robolink import *
import threading    

# Create a new window
window = tkinter.Tk()

# Close the window
def onClose():
    window.destroy()
    quit(0)

# Trigger Select button
# IMPORTANT: We need to run the action on a separate thread because
# (otherwise, if we want to interact with RoboDK window it will freeze)
def on_btnSelect():
    def thread_btnSelect():
        # Run button action (example to select an item and display its name)
        RDK = Robolink()
        item = RDK.ItemUserPick('Select an item')
        if item.Valid():
            RDK.ShowMessage("You selected the item: " + item.Name())
        
    threading.Thread(target=thread_btnSelect).start()

# Set the window title (must be unique for the docking to work, try to be creative)
window_title = 'RoboDK API Docked Window'
window.title(window_title)

# Delete the window when we close it
window.protocol("WM_DELETE_WINDOW", onClose)

# Add a button (Select action)
btnSelect = Button(window, text='Trigger on_btnSelect', height=5, width=60, command=on_btnSelect)
btnSelect.pack(fill=X)

# Embed the window
EmbedWindow(window_title)

# Run the window event loop. This is like an app and will block until we close the window
window.mainloop()</pre>
<h4>ex12:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Start the RoboDK API
from robolink import *    # RoboDK API
RDK = Robolink()

# Ask the user to select a program
program = RDK.ItemUserPick('Select a program (make sure the program does not change the robot speed)', ITEM_TYPE_PROGRAM)

# Retrieve the robot linked to the selected program
robot = program.getLink(ITEM_TYPE_ROBOT)

# Output the linear speed, joint speed and time (separated by tabs)
writeline = "Linear Speed (mm/s)\tJoint Speed (deg/s)\tCycle Time(s)"
print(writeline)
# Prepare an HTML message we can show to the user through the RoboDK API:
msg_html = "&lt;table border=1&gt;&lt;tr&gt;&lt;td&gt;"+writeline.replace('\t','&lt;/td&gt;&lt;td&gt;')+"&lt;/td&gt;&lt;/tr&gt;"

for speed_lin in [1, 5, 10, 20, 50, 100, 200, 500]:
    for speed_joints in [1, 5, 10, 20, 50, 100, 200, 500]:
        # Set the robot speed
        robot.setSpeed(speed_lin, speed_joints)

        # Update the program and retrieve updated information:
        # https://robodk.com/doc/en/PythonAPI/robolink.html#robolink.Item.Update
        result = program.Update()
        instructions, time, travel, ok, error = result

        # Print the information
        newline = "%.1f\t%.1f\t%.1f" % (speed_lin, speed_joints, time)
        print(newline)
        msg_html = msg_html + '&lt;tr&gt;&lt;td&gt;' + newline.replace('\t','&lt;/td&gt;&lt;td&gt;') + '&lt;/td&gt;&lt;/tr&gt;'

msg_html = msg_html + '&lt;/table&gt;'

RDK.ShowMessage(msg_html)</pre>
<h4>ex13:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sys # allows getting the passed argument parameters
from robodk import *
from robolink import *

RDK = Robolink()

TOOL_ID = 0
if len(sys.argv) &gt;= 2:
    TOOL_ID = int(sys.argv[1])
else:
    tool_str = mbox("Enter the tool number:\n(for example, for Tool 1 set 1)", entry='1')
    if not tool_str:
        # No input
        quit()
    TOOL_ID = int(tool_str)

# Select a robot
robot = RDK.Item('', ITEM_TYPE_ROBOT)
if not robot.Valid():
    raise Exception("Robot not available")

# Create the tool name
tool_name = 'Tool ' + str(TOOL_ID)
print("Using robot: " + robot.Name())
print("Setting tool: " + tool_name)

# Select the tool
tool = RDK.Item(tool_name, ITEM_TYPE_TOOL)
if not tool.Valid():
    raise Exception("Tool %s does not exist!" % tool_name)

# Update the robot to use the tool
robot.setTool(tool)

print("Done!")</pre>
<h4>ex14:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # RoboDK API
from robodk import *      # Robot toolbox
RDK = Robolink()

# Set to True to invert the normals (flip the normals)
FlipNormals = False

# Set the type of projection
ProjectionType = PROJECTION_ALONG_NORMAL_RECALC
# Available values include:
#PROJECTION_NONE                = 0 # No curve projection
#PROJECTION_CLOSEST             = 1 # The projection will be the closest point on the surface
#PROJECTION_ALONG_NORMAL        = 2 # The projection will be done along the normal.
#PROJECTION_ALONG_NORMAL_RECALC = 3 # The projection will be done along the normal. Furthermore, the normal will be recalculated according to the surface normal.
#PROJECTION_CLOSEST_RECALC      = 4 # The projection will be the closest point on the surface and the normals will be recalculated
#PROJECTION_RECALC              = 5 # The normals are recalculated according to the surface normal of the closest projection

#-------------------------------------------------------------
# Ask the user to provide the object with the features
object_features = RDK.ItemUserPick("Select object with the features to project (curves and/or points)", ITEM_TYPE_OBJECT)
if not object_features.Valid():
    quit()

# Ask the user to provide the object with the surface used as a reference
object_surface = RDK.ItemUserPick("Select Surface Object to project features", ITEM_TYPE_OBJECT)
if not object_surface.Valid():
    quit()

# Create a duplicate copy of the surface object
object_surface.Copy()
new_object = RDK.Paste(object_surface.Parent())
new_object.setName("Recalculated Normals")
new_object.setVisible(True)

# Hide the objects used to build the new object with the desired curves
object_features.setVisible(False)
object_surface.setVisible(False)

# Turn Off rendering (faster)
RDK.Render(False)

# Add all curves, projected as desired (iterate through all curves until no more curves are found)
curve_id = 0
while True:
    # Retrieve the curve points
    curve_points, name_feature = object_features.GetPoints(FEATURE_CURVE, curve_id)
    print(name_feature)
    curve_id = curve_id + 1
    npoints = len(curve_points)
    if npoints == 0:
        break

    print("Adding curve %s with %i points" % (name_feature, npoints))
    curve_points_proj = RDK.ProjectPoints(curve_points, object_surface, ProjectionType)

    # Optionally flip the normals (ijk vector)
    if FlipNormals:
        for ci in range(len(curve_points_proj)):
            x,y,z,i,j,k = curve_points_proj[ci]
            curve_points_proj[ci] = [x,y,z,-i,-j,-k]

    RDK.AddCurve(curve_points_proj, new_object, True, PROJECTION_NONE)

# Add all points projected
point_list, name_feature = object_features.GetPoints(FEATURE_POINT)
npoints = len(point_list)
print("Adding %i points" % npoints)
if npoints &gt; 0:    
    #RDK.AddPoints(point_list, new_object, True, PROJECTION_ALONG_NORMAL_RECALC)
    point_list_proj = RDK.ProjectPoints(point_list, object_surface, ProjectionType)
    RDK.AddPoints(point_list_proj, new_object, True, PROJECTION_NONE)
    #RDK.AddCurve(curve_points, new_object, True, PROJECTION_NONE)

# Set the curve width
new_object.setValue('DISPLAY','LINEW=2')
# Set the curve color
new_object.setColorCurve([0.0,0.5,0.5])

# Turn On rendering (Optional)
RDK.Render(True)
print("Done")</pre>
<h4>ex14:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Enter the size of the average filter, in number of samples.
# If this value is set to -1 it will popup a message asking the user to enter a value
FilterNormalSamples = -1 # in samples

# Enter the distance, in mm, to filter close points.
# For example, if we want one point each 2 mm at most, we should enter 2.
# Set to -1 to not filter the number of points.
FilterPointDistance = -1 # in mm

# ------------------------------------------------------
# Start the RoboDK API
from robolink import *    # RoboDK API
from robodk import *      # Robot toolbox
RDK = Robolink()

# Ask the user to select the object
obj = RDK.ItemUserPick("Select the object or the tool to filter curves") # we can optionally filter by ITEM_TYPE_OBJECT or ITEM_TYPE_TOOL (not both)
# Exit if the user selects cancel
if not obj.Valid():
    quit()

# Ask the user to enter the filter size
if FilterNormalSamples &lt;= 0:
    str_avg_filter = mbox("Enter the filter size (the number of points/normals used for the average filter).\nFor example, if the filter size is 10 units, the 10 closest normals are used to average each individual normal.", entry="10")
    if not str_avg_filter:
        # The user selected cancel
        quit()
    # Convert the user input to an integer
    FilterNormalSamples = int(str_avg_filter)
    if FilterNormalSamples &lt;=0:
        RDK.ShowMessage("Invalid Filter value. Enter a value &gt;= 1", False)
        raise Exception(msg)

# Iterate through all object curves, extract the curve points and average the normals
curve_id = 0
obj_filtered = None
while True:
    points, name_feature = obj.GetPoints(FEATURE_CURVE, curve_id)
    # points is a double array of float with np points and xyzijk data for each point
    # point[np] = [x,y,z,i,j,k] # where xyz is the position and ijk is the tool orientation (Z axis, usually the normal to the surface)
    np = len(points)
    # when curve_id is out of bounds, an empty double array is returned
    if np == 0 or len(points[0]) &lt; 6:
        break
        
    msg = "Filtering: " + name_feature
    print(msg)
    RDK.ShowMessage(msg, False)
    curve_id = curve_id + 1
    
    # For each point, average the normals in the range of points [-FilterNormalSamples/2 ; +FilterNormalSamples/2] 
    new_normals = []
    for i in range(np):
        id_avg_from = round(max(0, i - 0.5*FilterNormalSamples))
        id_avg_to = round(min(np-1, i + 0.5*FilterNormalSamples))

        # Make sure we account for the start and end sections (navg is usually FilterNormalSamples, except near the borders)
        n_avg = id_avg_to - id_avg_from
        normal_i = [0,0,0]
        for j in range(id_avg_from, id_avg_to):
            ni = points[j][3:6]
            normal_i = add3(normal_i, ni)

        # Divide the object
        normal_i = mult3(normal_i, 1.0/n_avg)
        
        # Add the new normal to the list
        new_normals.append(normal_i)

    # Combine the normals with the list of points
    for i in range(np):
        points[i][3:6] = new_normals[i][0:3]

    # Filter points, if desired
    if FilterPointDistance &gt; 0:
        lastp = None
        points_filtered = []
        points_filtered.append(points[0])
        lastp = points[0]

        for i in range(1,np):
            if distance(lastp, points[i]) &gt; FilterPointDistance:
                points_filtered.append(points[i])
                lastp = points[i]
                
        points = points_filtered

    # For the first curve: create a new object, rename it and place it in the same location of the original object
    if obj_filtered is None:
        obj_filtered = RDK.AddCurve(points, 0, False, PROJECTION_NONE)
        obj_filtered.setName(obj.Name() + " Filtered")
        obj_filtered.setParent(obj.Parent())
        obj_filtered.setGeometryPose(obj_filtered.GeometryPose())

    else:
        # After the first curve has been added, add following curves to the same object
        RDK.AddCurve(points, obj_filtered, True, PROJECTION_NONE)

# Set the curve display width
obj_filtered.setValue('DISPLAY','LINEW=2')
# Set the curve color as RGBA values [0-1.0]
obj_filtered.setColorCurve([0.0,0.5,1.0, 0.8])</pre>
<h4>ex15:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># This macro allows moving a robot using the keyboard
# Note: This works on console mode only, you must run the PY file separately
#
# More information about the RoboDK API here:
# https://robodk.com/doc/en/RoboDK-API.html
# Type help("robolink") or help("robodk") for more information

from robolink import *    # API to communicate with RoboDK
from robodk import *      # basic matrix operations
RDK = Robolink()

# Arrow keys program example

# get a robot
robot = RDK.Item('', ITEM_TYPE_ROBOT)
if not robot.Valid():
    print("No robot in the station. Load a robot first, then run this program.")
    pause(5)
    raise Exception("No robot in the station!")

print('Using robot: %s' % robot.Name())
print('Use the arrows (left, right, up, down), Q and A keys to move the robot')
print('Note: This works on console mode only, you must run the PY file separately')

# define the move increment
move_speed = 10

from msvcrt import getch
while True:
    key = (ord(getch()))
    move_direction = [0,0,0]
    # print(key)
    if key == 75:
        print('arrow left (Y-)')
        move_direction = [0,-1,0]
    elif key == 77:
        print('arrow right (Y+)')
        move_direction = [0,1,0]
    elif key == 72:
        print('arrow up (X-)')
        move_direction = [-1,0,0]
    elif key == 80:
        print('arrow down (X+)')
        move_direction = [1,0,0]
    elif key == 113:
        print('Q (Z+)')
        move_direction = [0,0,1]
    elif key == 97:
        print('A (Z-)')
        move_direction = [0,0,-1]

    # make sure that a movement direction is specified
    if norm(move_direction) &lt;= 0:
        continue

    # calculate the movement in mm according to the movement speed
    xyz_move = mult3(move_direction, move_speed)

    # get the robot joints
    robot_joints = robot.Joints()

    # get the robot position from the joints (calculate forward kinematics)
    robot_position = robot.SolveFK(robot_joints)

    # get the robot configuration (robot joint state)
    robot_config = robot.JointsConfig(robot_joints)

    # calculate the new robot position
    new_robot_position = transl(xyz_move)*robot_position

    # calculate the new robot joints
    new_robot_joints = robot.SolveIK(new_robot_position)
    if len(new_robot_joints.tolist()) &lt; 6:
        print("No robot solution!! The new position is too far, out of reach or close to a singularity")
        continue

    # calculate the robot configuration for the new joints
    new_robot_config = robot.JointsConfig(new_robot_joints)

    if robot_config[0] != new_robot_config[0] or robot_config[1] != new_robot_config[1] or robot_config[2] != new_robot_config[2]:
        print("Warning!! Robot configuration changed!! This will lead to unextected movements!")
        print(robot_config)
        print(new_robot_config)

    # move the robot joints to the new position
    robot.MoveJ(new_robot_joints)
    #robot.MoveL(new_robot_joints)</pre>
<h4>ex15:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming
from robodk import *      # Robotics toolbox for industrial robots

# Start RoboDK API
RDK = Robolink()

# gather all robots as item objects
robots = RDK.ItemList(ITEM_TYPE_ROBOT, False)

# loop through all the robots and connect to the robot
errors = ''
count = 0
for robot in robots:
    count = count + 1
    
    # force disconnect from all robots by simulating a double click
    #if count == 0:
    #    robot.Disconnect()
    #    robot.Disconnect()
    #    pause(1)
    
    # Important, each robot needs a new API connection to allow moving them separately in different threads (if required)
    rdk = Robolink()
    robot.link = rdk
    
    # Force simulation mode in case we are already connected to the robot. 
    # Then, gather the joint position of the robots.
    # This will gather the position of the simulated robot instead of the real robot.
    rdk.setRunMode(RUNMODE_SIMULATE)
    jnts = robot.Joints()
        
    # connect to the robot:
    # rdk.setRunMode(RUNMODE_RUN_ROBOT) # not needed because connect will automatically do it
    # state = robot.ConnectSafe()
    state = robot.Connect()
    print(state)   
    
    # Check the connection status and message
    state, msg = robot.ConnectedState()
    print(state)
    print(msg)
    if state != ROBOTCOM_READY:
        errors = errors + 'Problems connecting: ' + robot.Name() + ': ' + msg + '\n'
    else:
        # move to the joint position in the simulator:
        robot.MoveJ(jnts, False)

# Display connection errors, if any
if len(errors) &gt; 0:
    print(errors)
    raise Exception(errors)
else:
    quit(0)</pre>
<h4>ex16:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># This macro will save a time stamp and robot joints each 50 ms
from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming
from robodk import *      # Robotics toolbox for industrial robots
RDK = Robolink()

robot = RDK.Item('',ITEM_TYPE_ROBOT)

if not robot.Valid():
    raise Exception("Robot is not available")

file_path = RDK.getParam('PATH_OPENSTATION') + '/joints.txt'

fid = open(file_path,'w')
tic()
while True:
    time = toc()
    print('Current time (s):' + str(time))
    joints = str(robot.Joints().tolist())
    fid.write(str(time) + ', ' + joints[1:-1] + '\n')
    pause(0.05)

fid.close()</pre>
<h4>ex17:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # API to communicate with RoboDK for offline/online programming
from robodk import *      # Robotics toolbox for industrial robots

import threading
import queue

#----------------------------------------------
# Function definitions and global variable declarations

# Global variables used to synchronize the robot movements
# These variables are managed by SyncSet() and SynchWait()

SYNC_COUNT = 0
SYNC_TOTAL = 0
SYNC_ID = 0
lock = threading.Lock()

def SyncSet(total_sync):
    """SyncSet will set the number of total robot programs (threads) that must be synchronized togeter.
    Every time SyncSet is called SYNC_ID is increased by one."""
    global SYNC_COUNT
    global SYNC_TOTAL
    global SYNC_ID    
    with lock:
        SYNC_COUNT = 0
        SYNC_TOTAL = total_sync
        SYNC_ID = SYNC_ID + 1
        #print('SyncSet')

def SyncWait():
    """SyncWait will block the robot movements for a robot when necessary, synchronizing the movements sequentially.
    Use SyncSet(nrobots) to define how many robots must be synchronized together."""
    global SYNC_COUNT
    # Save a local variable with the sync event id
    sync_id = SYNC_ID
    with lock:
        # Increase the number of threads that are synchronized
        SYNC_COUNT += 1

    # Move to the next sync event if all threads reached the SyncWait (SYNC_COUNT = SYNC_TOTAL)
    if SYNC_COUNT &gt;= SYNC_TOTAL:
        SyncSet(SYNC_TOTAL)
        return

    # Wait for a SynchSet to move forward
    while sync_id &gt;= SYNC_ID:
        time.sleep(0.0001)


# Main procedure to move each robot   
def DoWeld(q, robotname):
    # Any interaction with RoboDK must be done through Robolink()
    # Each robot movement requires a new Robolink() object (new link of communication).
    # Two robots can't be moved by the same communication link.
    
    rdk = Robolink()

    # get the robot item:
    robot = rdk.Item(robotname)

    # get the home joints target
    home = robot.JointsHome()

    # get the reference welding target:
    target = rdk.Item('Target')

    # get the reference frame and set it to the robot
    reference = target.Parent()
    robot.setPoseFrame(reference)

    # get the pose of the target (4x4 matrix):
    poseref = target.Pose()
    pose_approach = poseref*transl(0,0,-100)

    # move the robot to home, then to the center:
    robot.MoveJ(home)
    robot.MoveJ(pose_approach)
    SyncWait()
    robot.MoveL(target)

    # make an hexagon around the center:
    for i in range(7):
        ang = i*2*pi/6 #angle: 0, 60, 120, ...
        posei = poseref*rotz(ang)*transl(200,0,0)*rotz(-ang)
        SyncWait()
        robot.MoveL(posei)

    # move back to the center, then home:
    SyncWait()
    robot.MoveL(target)
    robot.MoveL(pose_approach)
    robot.MoveJ(home)
    q.put('Robot %s finished' % robotname)

#----------------------------------------
# Python program start 
    
# retrieve all available robots in the RoboDK station (as a list of names)
RDK = Robolink()
robots = RDK.ItemList(ITEM_TYPE_ROBOT)
print(robots)

# retrieve the number of robots to synchronize together
nrobots = len(robots)
SyncSet(nrobots)

# the queue allows sharing messages between threads
q = queue.Queue()

# Start the DoWeld program for all robots. Each robot will run on a separate thread.
threads = []
for i in range(nrobots):
    robotname = robots[i]
    t = threading.Thread(target=DoWeld, args = (q, robotname))
    t.daemon = True
    t.start()
    threads.append(t)

# wait for every thead to finish
for x in threads:
    x.join()
    print(q.get())

print('Main program finished')</pre>
<h4>ex18:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming
from robodk import *      # Robotics toolbox for industrial robots

#----------------------------------------------
# Function definitions

def FK_Robot(dh_table, joints):
    """Computes the forward kinematics of the robot.
    dh_table must be in mm and radians, the joints array must be given in degrees."""
    Habs = []
    Hrel = []    
    nlinks = len(dh_table)
    HiAbs = eye(4)
    for i in range(nlinks):
        [rz,tx,tz,rx] = dh_table[i]
        rz = rz + joints[i]*pi/180
        Hi = dh(rz,tx,tz,rx)
        HiAbs = HiAbs*Hi
        Hrel.append(Hi)
        Habs.append(HiAbs)

    return [HiAbs, Habs, Hrel]

def Frames_setup_absolute(frameparent, nframes):
    """Adds nframes reference frames to frameparent"""
    frames = []
    for i in range(nframes):
        newframe = frameparent.RDK().AddFrame('frame %i' % (i+1), frameparent)
        newframe.setPose(transl(0,0,100*i))
        frames.append(newframe)

    return frames

def Frames_setup_relative(frameparent, nframes):
    """Adds nframes reference frames cascaded to frameparent"""
    frames = []
    parent = frameparent
    for i in range(nframes):
        newframe = frameparent.RDK().AddFrame('frame %i' % (i+1), parent)
        parent = newframe
        newframe.setPose(transl(0,0,100))
        frames.append(newframe)

    return frames

def Set_Items_Pose(itemlist, poselist):
    """Sets the pose (3D position) of each item in itemlist"""
    for item, pose in zip(itemlist,poselist):
        item.setPose(pose)

def are_equal(j1, j2):
    """Returns True if j1 and j2 are equal, False otherwise"""
    if j1 is None or j2 is None:
        return False
    sum_diffs_abs = sum(abs(a - b) for a, b in zip(j1, j2))
    if sum_diffs_abs &gt; 1e-3:
        return False
    return True
        
#----------------------------------------------------------
# The program starts here:
RDK = Robolink()        
        
#-----------------------------------------------------
# DH table of the robot: ABB IRB 120-3/0.6
DH_Table = []
#                 rZ (theta),   tX,   tZ,   rX (alpha)
DH_Table.append([          0,    0,  290,  -90*pi/180])
DH_Table.append([ -90*pi/180,  270,    0,           0])
DH_Table.append([          0,   70,    0,  -90*pi/180])
DH_Table.append([          0,    0,  302,   90*pi/180])
DH_Table.append([          0,    0,    0,  -90*pi/180])
DH_Table.append([ 180*pi/180,    0,   72,           0])

# degrees of freedom: (6 for ABB IRB 120-3/0.6)
DOFs = len(DH_Table)

# get the robot:
robot = RDK.Item('ABB IRB 120-3/0.6')

# cleanup of all items containing "Mirror tests" from previous tests
while True:
    todelete = RDK.Item('Robot base')
    # make sure an item was found
    if not todelete.Valid():
        break
    # delete only frames
    if todelete.Type() == ITEM_TYPE_FRAME:
        print('Deleting: ' + todelete.Name())
        todelete.Delete()

# setup the parent frames for the test:
parent_frameabs = RDK.AddFrame('Robot base (absolute frames)')
parent_framerel = RDK.AddFrame('Robot base (relative frames)')

# setup the child frames for the test:
frames_abs = Frames_setup_absolute(parent_frameabs, DOFs)
frames_rel = Frames_setup_relative(parent_framerel, DOFs)

# remember the last robot joints to update when necessary
last_joints = None

# infinite loop
while True:
    # get the current robot joints as a float array (list)
    joints = robot.Joints().tolist()

    # do not update if joints are the same as before
    if are_equal(joints, last_joints):
        continue

    # if joints changed, compute the forward kinematics for this position
    [Hrobot, HabsList, HrelList] = FK_Robot(DH_Table, joints)

    # turn off rendering while we update all frames:
    RDK.Render(False)
    # update all frames
    Set_Items_Pose(frames_abs, HabsList)
    Set_Items_Pose(frames_rel, HrelList)
    
    # render and turn on rendering
    RDK.Render(True)

    # remember the last robot joints
    last_joints = joints

    print('Current robot joints:')    
    print(joints)
    print('Pose of the robot (forward kinematics):')
    print(Hrobot)
    print('\n\n')</pre>
<h4>camera example:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/local/bin/python3
'''
https://robodk.com/forum/Thread-Camera-Recorder-Script-APP
Its simple to use, just paste the .py file in the Robodk´s script folder or in the new Robodk´s Apps folder --&gt;C:\RoboDK\Apps\Camera_Recorder

Execute the program and it will be prompt you for a reference for the camera, in the next step the seconds you want to record... hit OK.

The output file will be saved in the desktop folder.

'''

import cv2 #if is not installed in your system run in terminal " pip install opencv-python "
import os
import datetime
import tempfile
import shutil
import robodk   # import the robodk library (robotics toolbox)
from robolink import *    # API to communicate with RoboDK

RDK = Robolink()

RDK.Cam2D_Close() #close any Camera on Robodk
tempfile.TemporaryDirectory()
simulation_speed = RDK.SimulationSpeed()

#Video Configuration (Slow(480p)=640x480@30FPS - Medium(720p)=1280x720@60FPS - High(1080p)=1920x1080@60FPS )  
width = 1920
height = 1080
frames_per_second = 60 #in frames per second FPS

# Retrieve the camera reference frame
RDK.setSelection([])
camref = RDK.ItemUserPick('Select a reference frame for the Camera Record', ITEM_TYPE_FRAME)
if not camref.Valid():
    RDK.ShowMessage('No valid Reference frame')
    quit(0)    

#Time to Record Question

def time_question(title_msg, show_value, expected_values):
    if type(show_value) == Mat:
        show_value = show_value.tolist()
    answer = mbox(title_msg, entry=str(show_value))
    if answer is False:
        print('Operation cancelled by user')
        RDK.Cam2D_Close()
        quit(0)
    try:
        answer = int(answer) 
    except:
        print('Bad time number')
        RDK.Cam2D_Close()
        RDK.ShowMessage("Not a valid time number")
        quit(0)
    else:        
        time = answer
        return time
    
time_record = time_question("Enter the time to record in seconds", 10 , 20)
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=5 FOV=30 FAR_LENGHT=10000 SIZE=' + str(width) + "x" + str(height))
pause(1)
# Auxiliary items &amp; operations
date_str = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
dir_path = tempfile.gettempdir() + '\Record_' + date_str 
out_path = RDK.getParam('PATH_DESKTOP')
frame_rate = 1 / int(frames_per_second)
n_photos = frames_per_second * int(time_record) 
counter = 0
images = []

# Creating the working folder
if not os.path.exists(dir_path):
    os.makedirs(dir_path)
           
# Image Capture Loop
while counter &lt; n_photos:
    counter = counter +1
    RDK.setSimulationSpeed(0.001)
    file_name = dir_path + "/Image_" + str(counter) + ".png"
    images.append(file_name)
    RDK.Cam2D_Snapshot(file_name)
    print("Saving camera snapshot to the file:" + file_name) 
    RDK.setSimulationSpeed(1)
    pause(frame_rate)

# Define the codec and create VideoWriter object 
fourcc = cv2.VideoWriter_fourcc(*'XVID') # Choose the codec (mp4v, XVID or DIVX)
output = out_path + "/" + date_str + ".avi" # ".mp4" for mp4v.... ".avi" for XVID and DIVX
out = cv2.VideoWriter(output, fourcc, frames_per_second, (width, height))

# Compose the video with the images and the parameters 
for image in images:
    image_path = os.path.join(dir_path, image)
    frame = cv2.imread(image_path)
    out.write(frame) # Write out frame to video
    cv2.imshow('video',frame)

# Release everything if job is finished
out.release()
cv2.destroyAllWindows()

msg_str = "The output video is in " + out_path + format(output)
print(msg_str)
RDK.Cam2D_Close()
RDK.ShowMessage(msg_str)

#Delete de trash (folder&amp;files)
shutil.rmtree(dir_path, ignore_errors=True)
</pre>
<h4>camex:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # API to communicate with RoboDK
from robodk import *      # library for basic matrix operations
RDK = Robolink()

# Close any open 2D camera views
RDK.Cam2D_Close()

camref = RDK.ItemUserPick('Select the Camera location (reference, tool or object)')
#camref = RDK.Item('Frame 7',ITEM_TYPE_FRAME)

# Set parameters in mm and degrees:
#  FOV: Field of view in degrees (atan(0.5*height/distance) of the sensor
#  FOCAL_LENGHT: focal lenght in mm
#  FAR_LENGHT: maximum working distance (in mm)
#  SIZE: size of the window in pixels (fixed) (width x height)
#  SNAPSHOT: size of the snapshot image in pixels (width x height)
#  BG_COLOR: background color (rgb color or named color: AARRGGBB)
#  LIGHT_AMBIENT: ambient color (rgb color or named color: AARRGGBB)
#  LIGHT_SPECULAR: specular color (rgb color or named color: AARRGGBB)
#  LIGHT_DIFFUSE: diffuse color (rgb color or named color: AARRGGBB)
#  DEPTH: Add this flag to create a 32 bit depth map (white=close, black=far)
#  NO_TASKBAR: Don't add the window to the task bar
#  MINIMIZED: Show the window minimized
#  ALWAYS_VISIBLE: Keep the window on top of all other windows
#  SHADER_VERTEX: File to a vertex shader (GLSL file)
#  SHADER_FRAGMENT: File to a fragment shader (GLSL file)

# Examples to call Camd2D_Add:

# Camera without a fixed window size and 1000 mm length
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000')

# Camera with a fixed window size and 1000 mm length
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480')

# Camera with a black background
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 BG_COLOR=black')

# Camera without a fixed window size and high resolution snapshot
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480')

# Depth view: 32 bit depth map (white=close, black=far)
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 DEPTH')

# Minimized camera
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 MINIMIZED')

# Do not show the camera window in the taskbar
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 NO_TASKBAR')

# Customize the light
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 BG_COLOR=black LIGHT_AMBIENT=red LIGHT_DIFFUSE=#FF00FF00 LIGHT_SPECULAR=black')
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=600 SIZE=640x480 BG_COLOR=black LIGHT_AMBIENT=red LIGHT_DIFFUSE=black LIGHT_SPECULAR=white')
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 LIGHT_AMBIENT=red')

# Provoke a popup and allow the user to enter some parameters
cam_id = RDK.Cam2D_Add(camref, 'POPUP')

# Example to take a snapshot from the camera
RDK.Cam2D_Snapshot(RDK.getParam('PATH_OPENSTATION') + "/sample_image.png", cam_id)

# Special command to retrieve the window ID:
win_id = RDK.Command("CamWinID", str(cam_id))
# print(str(win_id))

#-----------------------------------------------------------------------------------
# Example to use a customized shader to customize the effect of light
# Tip: Use the example: C:/RoboDK/Library/Example-Shader-Customized-Light.rdk
# Tip: If you need a fixed light source update the variable light_Position in the shader_fragment.glsl file

# Get the path to the RoboDK library (usually in C:/RoboDK/Library/)
path_library = RDK.getParam("PATH_LIBRARY")
file_shader_fragment = path_library + '/Macros/Camera-Shaders/shader_fragment.glsl'
file_shader_vertex = path_library + '/Macros/Camera-Shaders/shader_vertex.glsl'
cam_id = RDK.Cam2D_Add(camref, 'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=2500 SHADER_FRAGMENT=' + file_shader_fragment + ' SHADER_VERTEX=' + file_shader_vertex)</pre><h3>Robotics</h3>
<h4>基礎知識:</h4>
<p style="padding-left: 30px;"><a href="/downloads/Algorithms.pdf">Algorithms.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Calculus_for_Robotics.pdf">Calculus_for_Robotics.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Understanding_ICT_Standardization.pdf">Understanding_ICT_Standardization.pdf</a></p>
<h4>Trends:</h4>
<p style="padding-left: 30px;"><a href="/downloads/2015_A Literature Review on New Robotics Automation from Loveto War.pdf">2015_A Literature Review on New Robotics Automation from Loveto War.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2016_Teaching Robotics in Primary School.pdf">2016_Teaching Robotics in Primary School.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2020_Trends_and_Developments_in_Artificial_Intelligence.pdf">2020_Trends_and_Developments_in_Artificial_Intelligence.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Automating-Society-Report-2020.pdf">Automating-Society-Report-2020.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2020_The Penetration of Internet of Things in Robotics Towards a Web ofRobotic Things.pdf">2020_The Penetration of Internet of Things in Robotics Towards a Web ofRobotic Things.pdf</a></p>
<h4>其他參考資料:</h4>
<p style="padding-left: 30px;"><a href="/downloads/marty_robot_build_guide.pdf">marty_robot_build_guide.pdf</a> (v1.0)</p>
<p style="padding-left: 30px;"><a href="/downloads/Designing a robotic platform.pdf">Designing a robotic platform.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Robot_dynamics_Textbook.pdf">Robot Dynamics and Control textbook.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Denavit and Hartenberg (DH) Parameters.pdf">Denavit and Hartenberg (DH) Parameters.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/FORWARD_KINEMATICS_THE_DENAVIT-HARTENBERG_CONVENTION.pdf">FORWARD_KINEMATICS_THE_DENAVIT-HARTENBERG_CONVENTION.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Identification of Denavit-Hartenberg Parameters of an Industrial Robot.pdf">Identification of Denavit-Hartenberg Parameters of an Industrial Robot.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/robotics05dh.pdf">robotics05dh.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Automatic-Denavit-Hartenberg-Parameter-Identification-for-Serial-Manipulators-1.pdf">Automatic-Denavit-Hartenberg-Parameter-Identification-for-Serial-Manipulators-1.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/user/asodemann3/videos">https://www.youtube.com/user/asodemann3/videos</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Denavit%E2%80%93Hartenberg_parameters">https://en.wikipedia.org/wiki/Denavit%E2%80%93Hartenberg_parameters</a></p>
<p style="padding-left: 30px;"><a href="https://pypi.org/project/visual-kinematics/">https://pypi.org/project/visual-kinematics/</a></p>
<p style="padding-left: 30px;"><a href="https://sajidnisar.github.io/posts/python_kinematics_dh">https://sajidnisar.github.io/posts/python_kinematics_dh</a></p>
<p style="padding-left: 30px;"><a href="https://blog.robotiq.com/how-to-calculate-a-robots-forward-kinematics-in-5-easy-steps">https://blog.robotiq.com/how-to-calculate-a-robots-forward-kinematics-in-5-easy-steps</a></p>
<p style="padding-left: 30px;"><a href="https://www.programmersought.com/article/37296265100/">https://www.programmersought.com/article/37296265100/</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/S1JZfWhZFsI" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/V6TKocmc9k8" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/qZB3_gKBwf8" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/DPO9Se6ZqN0" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/D3w3ZANOy3s" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/N7IsiSujJa8" title="YouTube video player" width="560"></iframe></p>
<h4>Reference:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/user/asodemann3/videos">https://www.youtube.com/user/asodemann3/videos</a></p><h2>W9</h2>
<h4>期中考週流程:</h4>
<ol>
<li>利用 ::17 開啟 Ethercalc 表單, 收集各班學員課程期望分數, 將期中期望成績送至教務主機.</li>
<li>此一 W1-W9 各學員的期望成績, 將與學員的個人與分組倉儲內容進行比較後, 會反應至學員的期末學期成績中, 若實際評量結果與學員期望成績產生一定差距, 將酌予加減各學員應得之課程學期成績.</li>
<li>各分組進行 6-12 分鐘 (每一組員簡報時間至多 2 分鐘) 的期中網際簡報, 主要說明各組員 W1-W8 所完成的網站內容, 並透過 ShareX 錄製簡報影片 (簡報前後按下 Shift + PrintScreen, 並採全畫面錄影), 之後會將各組簡報影片送到 GDrive 以供參考.</li>
</ol><h2>W10</h2>
<p>網際內容管理系統下半學期將有以下幾個主要教學目標:</p>
<ol>
<li>對 <span style="background-color: #ffff99;">Python Flask 網際程式</span>的架構能夠更加深入了解, 各學員不僅會利用 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautifulsoup</a> 從學校教務主機擷取資料, 建立 <a href="https://www.heroku.com/">Heroku</a> 雲端應用程式, 列出各實驗室的排課資訊外, 能計算各實驗室的排課總時數, 同時也能將查得的資料分別存入 SQLite 與 PostgreSQL 資料庫 (flaskg 範例<a href="https://github.com/mdecourse/flaskg">倉儲</a>與<a href="https://flaskg.herokuapp.com/">網站</a>).</li>
<li>要求學員有能力<span style="background-color: #ffff99;">自行編寫</span>如<a href="https://github.com/mdecourse/scissor-rock-paper2">網際猜拳</a>, <a href="https://github.com/mdecourse/lookupdict">網際英英字典</a> (<a href="http://lookupdict.herokuapp.com/">http://lookupdict.herokuapp.com</a>, 採 scrum1 At mde 部署), 以及其他與<a href="https://github.com/mdecourse/wcms-scrum1">機械設計較相關的網際程式</a> (包括<a href="https://wcms-scrum1.herokuapp.com/drawflag">猜數字遊戲</a>, <a href="https://wcms-scrum1.herokuapp.com/gear_index">正齒輪齒面寬設計</a>, <a href="https://wcms-scrum1.herokuapp.com/drawflag">2D 繪圖</a>等).</li>
<li>利用 <a href="https://robodk.com/">RoboDK</a> 作為整合英文, 數學與網際內容管理相關技術的測試工具, 希望能夠透過網際程式控制特定的六軸機械手臂 (<a href="https://robodk.com/blog/online-programming/">參考</a>, <a href="https://robodk.com/doc/en/Basic-Guide.html">Guide</a>).</li>
<li>編寫能夠協助 CMSiMDE <span style="background-color: #ffff99;">分頁</span>錯誤時進行 debug 的<span style="background-color: #ffff99;">輔助程式</span> (擬採用 <a href="https://github.com/PySimpleGUI/PySimpleGUI">https://github.com/PySimpleGUI/PySimpleGUI</a> or <a href="https://github.com/dddomodossola/remi">https://github.com/dddomodossola/remi</a> 進行測試), 假如要讓 CMSiMDE 能夠透過中文斷字 (<a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a>), 試著解讀網際內容管理的關鍵字, 進而了解網站的內容屬性.</li>
</ol>
<p>根據下圖所示, 四年前所部署的 <a href="https://wcms-scrum1.herokuapp.com/">https://wcms-scrum1.herokuapp.com/</a> 所使用的 The Heroku-16 stack is deprecated, 意即 <a href="https://help.heroku.com/0S5P41DC/heroku-16-end-of-life-faq">Heroku-16 stack</a> 將要在 2021.06.01 終止 build 功能, 因此部署在此雲端硬體平台的應用程式, 若要持續改版, 必須要在生命週期結束之前搬遷到其他硬體平台上:</p>
<p><img alt="" height="304" src="/images/heroku-16_deprecated.png" width="600"/></p>
<p><a href="https://mde.tw/wcm2021/content/SQLite.html">SQLite 練習</a></p>
<p>目的希望能將之前所寫的各實驗室排課表網際程式, 能將所查詢的資料存入 SQLite, 並且部署到 Heroku.</p>
<p>之後再將資料庫應用至 PostgreSQL, 最後再將網際資料庫程式部署到 Heroku.</p>
<p>若該網際程式配置 Oauth2 的登入套件, 即可延伸應用至各實驗室上課時段外的實驗室借用管理系統. 若再利用雲端點名系統 RFID 掃描的感應開門, 將可擴大此系統的應用範圍.</p><h3>Proxy Server</h3>
<p><a href="http://www.squid-cache.org/">http://www.squid-cache.org/</a> 是一套 Proxy Server, 目前最新版為 4.14 版, 其設定檔案位於 /etc/squid 目錄, 設定檔案為 squid.conf:</p>
<p>啟動 squid 指令為 sudo /etc/init.d/squid start</p>
<p>關閉 squid 指令為 sudo /etc/init.d/squid stop</p>
<p>重新啟動 squid 指令為 sudo /etc/init.d/squid restart</p>
<h4>Proxy 連線要求輸入帳號密碼:</h4>
<p>需要安裝建立帳號與密碼的工具: sudo apt install apache2-utils</p>
<p>之後就可以利用 sudo htpasswd -c /etc/squid/password your_proxy_user_name</p>
<p>對應 your_proxy_user_name 帳號輸入兩次選擇的密碼後, /etc/squid/password 即建立完成.</p>
<p>接著必須要將所設定的 password 帳號與密碼檔案, 交由 squid 的 basic_ncsa_auth 進行驗證, 假如要將 Proxy Server 設定為所有連線都必須輸入帳號密碼, 則定義 squid_user 屬於必須要輸入帳號與密碼才能連線的設定, 必須設在其他 IP 範圍限制之前. 表示所以的連線都必須輸入帳號與密碼.</p>
<p># 以下三行執行設定, 表示要使用 basic_ncsa_auth 進行連線管控, 依照 /etc/squid/password 中所設定的帳號與密碼進行比對, 且需要帳號與密碼的連線群組命名為 squid_user</p>
<p>auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/password</p>
<p>auth_param basic realm proxy_authentication_required</p>
<p>acl squid_user proxy_auth REQUIRED</p>
<p># 接下來兩行則只允許已經通過帳號與密碼比對成功者進行連線, 其餘連線則一律禁止.</p>
<p>http_access allow squid_user</p>
<p>http_access deny all</p>
<p></p>
<p></p>
<p></p><h3>網際資料庫程式</h3>
<h4>下半學期的教學目標之一:</h4>
<p>對 <span style="background-color: #ffff99;">Python Flask 網際程式</span>的架構能夠更加深入了解, 各學員不僅會利用 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautifulsoup</a> 從學校教務主機擷取資料, 建立 <a href="https://www.heroku.com/">Heroku</a> 雲端應用程式, 列出各實驗室的排課資訊外, 能計算各實驗室的排課總時數, 同時也能將查得的資料分別存入 SQLite 與 PostgreSQL 資料庫 (flaskg 範例<a href="https://github.com/mdecourse/flaskg">倉儲</a>與<a href="https://flaskg.herokuapp.com/">網站</a>).</p>
<p>請各組練習 <a href="/downloads/flask-peewee-blogger-example.7z">flask-peewee-blogger-example.7z</a> 中, 將資料存入 SQLite 資料庫中, 並在自行配置的 Virtualbox Windows 10 與 Ubuntu 20.04 中執行. 若要讓 Flask 能更有效率地執行, 在 Ubuntu 中必須設法以 <a href="https://uwsgi-docs.readthedocs.io/en/latest/">uwsgi</a> 方式執行</p>
<p>ORM 使用: <a href="https://github.com/coleifer/peewee">https://github.com/coleifer/peewee</a></p>
<p>資料庫使用: <a href="https://www.sqlite.org">https://www.sqlite.org</a></p>
<p>一旦了解如何將網際資料存入 SQLite 資料庫, 請各組改寫 <a href="https://github.com/mdecourse/nfumde">https://github.com/mdecourse/nfumde</a> 網際程式, 令其能在自架 Virtualbox Ubuntu 20.04 伺服器中執行. 得到與 <a href="http://nfumde.herokuapp.com/tabl">http://nfumde.herokuapp.com/tabl</a>e 相同的結果.</p>
<h4>以下為希望將電腦輔助設計室排課時段資料存入資料庫的 local 程式版本:</h4>
<p><a href="/downloads/w1_classroom_local_db_ready.py">w1_classroom_local_db_ready.py</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
import re

# 為了讓程式能夠同時在 Leo Editor 與 SciTE 中執行列印
# 特別建立 leoprint 函式
# *args 表示 leoprint 可以接受任意數量的輸入變數
def leoprint(*args):
    try:
        g.es(*args)
    except:
        print(*args)

# for pythn 3.9
proxy = 'http://[2001:288:6004:17::53]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0810'
column = True

if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0810'
    
headers = {'X-Requested-With': 'XMLHttpRequest'}

url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}

result = requests.post(url, data = post_var, headers = headers)

soup = bs4.BeautifulSoup(result.content, 'lxml')

# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()

# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})

# 以下要準備能夠輸入資料庫的排課時段資料 #########################
tds = [row.findAll('td') for row in table.findAll('tr')]
#leoprint(tds)
count = 0
row = 0
results = {}
for td in tds:
    row = row + 1
    for i in range(len(td)):
        if i != 0 and td[i].text != "\xa0":
            leoprint("星期"+str(i), "第"+str(row-2) + "節-", re.sub('&lt;[^&lt;]+?&gt;', '', td[i].text))
            count = count + 1
    #leoprint("***************")
leoprint("total:" + str(count))
# 以上已經取得能夠輸入資料庫的排課時段資料 ######################

# ########## 以下程式碼用來計算排課節數 ###########################
# 以下取出 td 標註資料
table_data = [i.text for i in table.find_all('td')]
#leoprint(table_data)
timeTable = []
# 去除非排課欄位資料內容
for i in table_data:
    if not "虎尾科技" in i and not "節" in i and not "\xa0" in i:
        timeTable.append(i)
#leoprint(len(timeTable))
totalNum = len(timeTable)
# ########## 以上程式碼用來計算排課節數 ##########################

# 重建 table, 設定邊線為 1 pixel
output = "總排課節數: " + str(totalNum) + "&lt;br /&gt;&lt;br /&gt;&lt;table border='1'&gt;"

for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;nbsp", " ")
output += "&lt;/table&gt;"

#leoprint(output)

'''
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)
'''</pre>
<h4>執行後的輸出結果為:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">星期1 第1節- 四設計一甲工廠實習(二)CNC及CAM實習蕭俊卿
星期3 第1節- 四設計三乙工程設計周榮源
星期1 第2節- 四設計一甲工廠實習(二)CNC及CAM實習蕭俊卿
星期2 第2節- 四設計二攜電腦輔助設計實習蕭俊卿
星期3 第2節- 四設計三乙工程設計周榮源
星期4 第2節- 四設計一甲網際內容管理嚴家銘
星期5 第2節- 五精一甲網際內容管理嚴家銘
星期1 第3節- 四設計一甲工廠實習(二)CNC及CAM實習蕭俊卿
星期2 第3節- 四設計二攜電腦輔助設計實習蕭俊卿
星期3 第3節- 四設計三乙工程設計周榮源
星期4 第3節- 四設計一甲網際內容管理嚴家銘
星期5 第3節- 五精一甲網際內容管理嚴家銘
星期2 第4節- 四設計二攜電腦輔助設計實習蕭俊卿
星期3 第4節- 四設計三乙工程設計周榮源
星期4 第4節- 四設計一甲網際內容管理嚴家銘
星期5 第4節- 五精一甲網際內容管理嚴家銘
星期1 第5節- 五精三甲數控加工實習(二)林啓仁
星期2 第5節- 四設計三甲工程設計周榮源
星期3 第5節- 四設計二攜機器動力學黃運琳
星期4 第5節- 四設計二甲協同產品設計實習嚴家銘
星期5 第5節- 四設計二乙協同產品設計實習嚴家銘
星期1 第6節- 五精三甲數控加工實習(二)林啓仁
星期2 第6節- 四設計三甲工程設計周榮源
星期3 第6節- 四設計二攜機器動力學黃運琳
星期4 第6節- 四設計二甲協同產品設計實習嚴家銘
星期5 第6節- 四設計二乙協同產品設計實習嚴家銘
星期1 第7節- 五精三甲數控加工實習(二)林啓仁
星期2 第7節- 四設計三甲工程設計周榮源
星期3 第7節- 四設計二攜機器動力學黃運琳
星期4 第7節- 四設計二甲協同產品設計實習嚴家銘
星期5 第7節- 四設計二乙協同產品設計實習嚴家銘
星期2 第8節- 四設計三甲工程設計周榮源
星期4 第8節- 四設計二甲協同產品設計實習嚴家銘
星期5 第8節- 四設計二乙協同產品設計實習嚴家銘
total:34</pre>
<h4>練習題目:</h4>
<p style="padding-left: 30px;">請各組員嘗試將上述實驗室排課表程式的排課時段查詢結果, 分別存入 SQLite 與 PostgreSQL 資料庫.</p>
<p style="padding-left: 30px;">資料表 (table) 設計:</p>
<p style="padding-left: 30px;">table 名稱: course</p>
<p style="padding-left: 30px;">id - 序號</p>
<p style="padding-left: 30px;">semester - 排課學期</p>
<p style="padding-left: 30px;">classroomno - 實驗室代號</p>
<p style="padding-left: 30px;">week - 排課星期</p>
<p style="padding-left: 30px;">session - 排課節次</p>
<p style="padding-left: 30px;">content - 排課內容 (包含班級, 教師與課程名稱)</p>
<p style="padding-left: 30px;">memo - 備註</p><h3>網際機械設計程式</h3>
<h4>下半學期的教學目標之二:</h4>
<h4>基本網際程式:</h4>
<p style="padding-left: 30px;">要求學員有能力<span style="background-color: #ffff99;">自行編寫</span>如<a href="https://github.com/mdecourse/scissor-rock-paper2">網際猜拳</a>, <a href="https://github.com/mdecourse/lookupdict">網際英英字典</a> (<a href="http://lookupdict.herokuapp.com/">http://lookupdict.herokuapp.com</a>, 採 scrum1 At mde 部署), 以及其他與<a href="https://github.com/mdecourse/wcms-scrum1">機械設計較相關的網際程式</a> (包括<a href="https://wcms-scrum1.herokuapp.com/drawflag">猜數字遊戲</a>, <a href="https://wcms-scrum1.herokuapp.com/gear_index">正齒輪齒面寬設計</a>, <a href="https://wcms-scrum1.herokuapp.com/drawflag">2D 繪圖</a>等).</p>
<h4>參數式機械電腦輔助繪圖程式:</h4>
<p style="padding-left: 30px;">從 <a href="http://mde.tw/cad2020/content/HW1_SW.html">http://mde.tw/cad2020/content/HW1_SW.html</a> 已知可以利用 Python 與 Solidworks API 操控零件尺寸, 因此可以設法在一台已經安裝 Solidworks 的 Windows 10 電腦上部署 Flask 網際程式, 提供網際零件檔案上傳功能 (可取自 CMSiMDE), 並提供零件尺寸變更表單, 讓使用者透過網際介面操控已經上傳零件的參數尺寸.</p>
<p style="padding-left: 30px;">相同的網際程式架構, 也可以套用至 AutoDesk Inventor: <a href="http://mde.tw/cad2020/content/HW1_INV.html">http://mde.tw/cad2020/content/HW1_INV.html</a></p>
<p style="padding-left: 30px;">相同的網際程式架構, 也可以套用至 NX12: <a href="http://mde.tw/cad2020/content/HW1_NX.html">http://mde.tw/cad2020/content/HW1_NX.html</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cad2019/downloads/NX%20Installation%20Guide%20for%20Linux%20and%20Mac%20OS%20X.pdf">http://mde.tw/cad2019/downloads/NX Installation Guide for Linux and Mac OS X.pdf</a></p><h3>網際 RoboDK 程式</h3>
<h4>下半學期的教學目標之三:</h4>
<p>利用 <a href="https://robodk.com/">RoboDK</a> 作為整合英文, 數學與網際內容管理相關技術的測試工具, 希望能夠透過網際程式控制特定的六軸機械手臂 (<a href="https://robodk.com/blog/online-programming/">參考</a>, <a href="https://robodk.com/doc/en/Basic-Guide.html">Guide</a>).</p>
<p>RoboDK Forum: <a href="https://robodk.com/forum">https://robodk.com/forum</a></p>
<p><a href="/downloads/RoboDK-Doc-EN-Getting-Started.pdf">RoboDK-Doc-EN-Getting-Started.pdf</a></p>
<p><a href="https://en.wikipedia.org/wiki/Robotics_simulator">https://en.wikipedia.org/wiki/Robotics_simulator</a></p>
<p><a href="https://github.com/RoboDK?tab=repositories">https://github.com/RoboDK?tab=repositories</a></p>
<p><a href="https://robodk.com/doc/en/PythonAPI/">https://robodk.com/doc/en/PythonAPI/</a></p>
<p><a href="https://robodk.com/offline-programming">https://robodk.com/offline-programming</a></p>
<p><a href="https://robodk.com/doc/en/PythonAPI/robolink.html">https://robodk.com/doc/en/PythonAPI/robolink.html</a></p>
<p><a href="https://www.automate.org/news/9-powerful-robodk-features-you-might-not-know-about">https://www.automate.org/news/9-powerful-robodk-features-you-might-not-know-about</a></p>
<p><a href="/downloads/2018_Implementation of a Simulation System for Additive Task Experiments.pdf">2018_Implementation of a Simulation System for Additive Task Experiments.pdf</a></p>
<p><a href="/downloads/2019_Multi-Robot Collaboration.pdf">2019_Multi-Robot Collaboration.pdf</a></p>
<p><a href="/downloads/2019_3D Printing using an Industrial Robotic Arm and a Cellulose based filament.pdf">2019_3D Printing using an Industrial Robotic Arm and a Cellulose based filament.pdf</a></p>
<p><a href="/downloads/2019_Towards the Development of Safe, Collaborative RoboticFreehand Ultrasound.pdf">2019_Towards the Development of Safe, Collaborative RoboticFreehand Ultrasound.pdf</a></p>
<p><a href="/downloads/2020_Simulator for Articulate Robots.pdf">2020_Simulator for Articulate Robots.pdf</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-38897-3">2020 Robot Adventures in Python and C.pdf</a></p>
<p><a href="https://vmayoral.github.io/robots,/ai,/deep/learning,/rl,/reinforcement/learning/2016/07/06/rl-intro/">https://vmayoral.github.io/robots,/ai,/deep/learning,/rl,/reinforcement/learning/2016/07/06/rl-intro/</a></p>
<p><a href="/downloads/Industrial_robots1.pdf">Industrial_robots1.pdf</a></p>
<p><a href="/downloads/IntroRobotKinematics5.pdf">IntroRobotKinematics5.pdf</a></p>
<h4>RoboDK 版本: <a href="https://robodk.com/whatsnew">https://robodk.com/whatsnew</a></h4>
<h4>RoboDK 5.2.2 安裝</h4>
<p>內定安裝於 c:\robodk</p>
<p>可附帶安裝 Python 3.7.3, 並安裝 robodk 模組</p>
<p>會先安裝 vcredist_x64_2017</p>
<p>安裝版 30 天內可存檔, 必須 IPv4 上網才能取得 free trial 30 天權限.</p>
<p>RoboDK 的 remote API 必須先 IPv4 上網後, 經官方網站確認 License 後, 才可啟動 API server, 否則只能在 localhost 上執行 API 操控.</p>
<h4>電腦輔助設計室網路連線順序:</h4>
<ol>
<li>以 IPv4 NAT 連線, 啟動可攜 RoboDK 取得 limited 連線授權.</li>
<li>改以純 IPv6 網路連線, 內部建立 192.168.192.1XX 網路群, 按照組序與學員序取得 IPv4 固定網址.</li>
<li>各學員可以透過 Proxy 取得 Robot library 中的資料, 並且透過 remote API 進行網際協同操控.</li>
</ol>
<p><a href="/downloads/Setup and Interfacing of a KUKA RoboticsLab.pdf">Setup and Interfacing of a KUKA RoboticsLab.pdf</a></p>
<p>RoboDK API for Python:</p>
<p><a href="https://raw.githubusercontent.com/RoboDK/RoboDK-API/master/Python/robodk.py">https://raw.githubusercontent.com/RoboDK/RoboDK-API/master/Python/robodk.py</a></p>
<p><a href="https://raw.githubusercontent.com/RoboDK/RoboDK-API/master/Python/robolink.py">https://raw.githubusercontent.com/RoboDK/RoboDK-API/master/Python/robolink.py</a></p>
<p>The robolink module is the bridge between RoboDK and Python. Every object in the RoboDK item tree can be retrieved and it is represented by the object Item. An item can be a robot, a reference frame, a tool, an object or any other item visible in the station tree.</p>
<p>The following example uses the robodk and robolink libraries to move a robot.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *              # import the robolink library (bridge with RoboDK)
# 假如跨網路執行 Python remote API, 則提供位於遠端的 RoboDK server ip
RDK = Robolink('server_ipv4_ip_address')                    # establish a link with the simulator
robot = RDK.Item('ABB IRB 120-3/0.6')      # retrieve the robot by name
robot.setJoints([0,0,0,0,0,0])      # set all robot axes to zero

target = RDK.Item('Target')         # retrieve the Target item
robot.MoveJ(target)                 # move the robot to the target
'''
# calculate a new approach position 100 mm along the Z axis of the tool with respect to the target
from robodk import *                # import the robodk library (robotics toolbox)
approach = target.Pose()*transl(0,0,-100)
robot.MoveL(approach)               # linear move to the approach position
'''</pre>
<p>有關 Python struct: <a href="https://docs.python.org/3/library/struct.html">https://docs.python.org/3/library/struct.html</a></p>
<p>command line option: <a href="https://robodk.com/doc/en/RoboDK-API-Command-Line-Options.html">https://robodk.com/doc/en/RoboDK-API-Command-Line-Options.html</a></p>
<p>RDK = Robolink(args='-ADDFRAME "-RENAME=Main Ref " load_object.stl')</p>
<p>robolink modula: <a href="https://robodk.com/doc/en/PythonAPI/robolink.html#robolink.Robolink.ShowRoboDK">https://robodk.com/doc/en/PythonAPI/robolink.html#robolink.Robolink.ShowRoboDK</a></p>
<p>RoboDK Mac 最新版安裝檔: <a href="https://robodk.com/downloads/Install-RoboDK.dmg">https://robodk.com/downloads/Install-RoboDK.dmg</a></p>
<p>RoboDK Linux 最新安裝檔: <a href="https://robodk.com/downloads/install-robodk-64.tar.gz">https://robodk.com/downloads/install-robodk-64.tar.gz</a></p>
<h4>RoboDK 透過遠端桌面執行:</h4>
<p>由於顯示卡硬體功能受到限制, 因此透過 remote desktop 執行 RoboDK 時, 必須使用 C:/RoboDK/RoboDK-Safe-Start-VM.bat 啟動 RoboDK, 批次檔案內容如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">cd bin
set QT_OPENGL=software
start "" RoboDK-GL2.exe -DEBUG -SKIPINI</pre>
<h4>RoboDK allow external API (<a href="https://robodk.com/doc/en/PythonAPI/robolink.html#robolink.Robolink">reference</a>):</h4>
<p>目前 RoboDK 的 <a href="https://raw.githubusercontent.com/RoboDK/RoboDK-API/master/Python/robolink.py">https://raw.githubusercontent.com/RoboDK/RoboDK-API/master/Python/robolink.py</a> 僅支援 IPv4, 必須將 socket 傳送改為 IPv6, 可參考: <a href="https://hub.packtpub.com/ipv6-unix-domain-sockets-and-network-interfaces/">https://hub.packtpub.com/ipv6-unix-domain-sockets-and-network-interfaces/</a></p>
<p>假如要在電腦輔助設計室中跨網路執行 RoboDK remote API, 可以在 IPv6 環境下創建一個內部 IPv4 群網路進行測試.</p>
<p>設定 RoboDK remote API 位於 Tools - Options - Other - RoboDK API, 啟動 RoboDK remote API server 後, 必須讓 RoboDK 通過操作系統的防火牆.</p>
<h4>RoboDK on Virtualbox (<a href="https://robodk.com/forum/Thread-Running-RoboDK-on-an-oracle-Virtual-machine">reference</a>):</h4>
<p>I recommend you to start RoboDK by selecting:<br/>C:/RoboDK/RoboDK-Safe-Start-VM.bat<br/><br/>Make sure to install graphic card drivers and allocate hardware accelerated GPU with support for OpenGL, if possible.<br/><br/>If it fails, we can better debug this issue by following these steps.<br/><br/>    Start RoboDK by double clicking the file:<br/>    C:/RoboDK/RoboDK-Debug.bat<br/>    Try to reproduce the problem in RoboDK until it crashes.<br/>    Right after the crash, provide the following file:<br/>    C:/RoboDK/bin/RoboDK.debug.txt</p>
<p>參考:</p>
<p style="padding-left: 30px;">提供原始碼的 <a href="http://animatlab.com/">http://animatlab.com/</a></p><h3>CMSiMDE Debug 程式</h3>
<h4>下半學期的教學目標之四:</h4>
<p>編寫能夠協助 CMSiMDE <span style="background-color: #ffff99;">分頁</span>錯誤時進行 debug 的<span style="background-color: #ffff99;">輔助程式</span> (擬採用 <a href="https://github.com/PySimpleGUI/PySimpleGUI">https://github.com/PySimpleGUI/PySimpleGUI</a> or <a href="https://github.com/dddomodossola/remi">https://github.com/dddomodossola/remi</a> 進行測試), 假如要讓 CMSiMDE 能夠透過中文斷字 (<a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a>), 試著解讀網際內容管理的關鍵字, 進而了解網站的內容屬性.</p><h2>W11</h2>
<p>為何只有在<a href="http://evds.ucalgary.ca/evds_info/files/evds_info/unitis/courses/EVDS683.81/F2019/EVDS683.81-F2019-syllabus.pdf">建築相關科系</a>, 才許融入哲學思維?</p>
<p><a href="/downloads/1935_The Work of Art in the Age of Mechanical Reproduction.pdf">1935_The Work of Art in the Age of Mechanical Reproduction.pdf</a> (機械複製時代的藝術作品)</p>
<p style="padding-left: 30px;">導讀: <a href="https://www.thenewslens.com/article/60943">https://www.thenewslens.com/article/60943</a></p>
<p style="padding-left: 30px;">其他閱讀: <a href="https://www.thenewslens.com/author/soriano">https://www.thenewslens.com/author/soriano</a></p>
<p>看懂 <a href="https://en.wikipedia.org/wiki/Non-fungible_token">https://en.wikipedia.org/wiki/Non-fungible_token</a> (無可替代證記)</p>
<p style="padding-left: 30px;"><a href="https://www.forbes.com/sites/forbesbusinesscouncil/2021/04/28/a-guide-to-non-fungible-tokens-the-future-of-art/">https://www.forbes.com/sites/forbesbusinesscouncil/2021/04/28/a-guide-to-non-fungible-tokens-the-future-of-art/</a></p>
<p style="padding-left: 30px;"><a href="https://www.entrepreneur.com/article/368124">https://www.entrepreneur.com/article/368124</a></p>
<p style="padding-left: 30px;"><a href="https://www.natlawreview.com/article/taxing-non-fungible-tokens-nfts">https://www.natlawreview.com/article/taxing-non-fungible-tokens-nfts</a></p>
<h4>1. OBS + Youtube 分組直播錄影測試:</h4>
<p style="padding-left: 30px;">在 IPv6 環境下進行各分組桌面操作直播錄影</p>
<p style="padding-left: 60px;">登入 @gm 帳號後連結至 Youtube 選擇 Live stream, 取得直播金鑰</p>
<p style="padding-left: 60px;">將直播金鑰輸入 OBS, 啟動顯示器擷取, 透過串流訊號將桌面操作影像傳至 Youtube 進行直播錄影.</p>
<p style="padding-left: 60px;">根據 <a href="http://mde.tw/cd2021/content/task2.html">http://mde.tw/cd2021/content/task2.html</a> 進行 IPv6 + 區域網路操控進行測試.</p>
<p style="padding-left: 60px;">參考 <a href="http://mde.tw/cd2021/content/task3.html">http://mde.tw/cd2021/content/task3.html</a> 使用各組網際簡報內容引導直撥錄影.</p>
<h4>2. 各分組從 <a href="http://mde.tw/wcm2021/content/W10.html">http://mde.tw/wcm2021/content/W10.html</a> 網際程式中選擇一項, 負責從近端執行部署至 Heroku.</h4>
<h4>3. 針對</h4>
<p style="padding-left: 30px;"><a href="https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py">https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/RoboDK/RoboDK-API/blob/master/Python/robodk.py">https://github.com/RoboDK/RoboDK-API/blob/master/Python/robodk.py</a></p>
<p style="padding-left: 30px;">探討能否透過網際模式監控 RoboDK 機械手臂模擬.</p><h2>分組專題</h2>
<p><a href="https://drive.google.com/drive/folders/1OyEy67kGXiNjQSccad3Fd0H_59paqOiU?usp=sharing">分組報告影片</a></p>
<h4>Solvespace 3D 參數設計繪圖建立零組件 (<a href="https://solvespace.com">Solvespace</a> 編譯與<a href="http://www.farwire.net/SolveSpace-LearningGuide.htm">應用</a>):</h4>
<ol>
<li>轉入 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 組合為機電系統 (<a href="/downloads/stl_format.pdf">STL 零件格式</a>, <a href="https://en.wikipedia.org/wiki/STL_(file_format)">STL file format</a>, <a href="/downloads/stl-viewer_python_tkinter_pygame.7z">STL viewer in Tkinter and Pygame.7z</a>, <a href="/downloads/STL-3D-Rasterer_pygame_opengl.7z">STL-3D-Rasterer_pygame_opengl.7z</a>, <a href="https://github.com/admesh/python-admesh">ADMesh</a>)</li>
<li>利用 Lua script 進行 Kinematic and Dynamic 控制 (<a href="https://www.coppeliarobotics.com/">CoppeliaSim</a>, <a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">XML 格式</a>)</li>
<li>利用 Python remote API 進行 Kinematic and Dynamic 控制 (<a href="/downloads/UR5_ik_coppeliaSim.7z">UR5_ik_coppeliaSim.7z</a>)</li>
<li>利用 <a href="https://ubuntu.com/">Ubuntu</a> 建立 Web based server 進行機電資系統控制 (<a href="https://uwsgi-docs.readthedocs.io/en/latest/">uwsgi,</a> <a href="https://nginx.org/">nginx</a>, <a href="https://www.stunnel.org/">stunnel</a>)</li>
<li>利用 <a href="https://ubuntu.com/">Ubuntu</a> 建立 Fossil SCM 分散式版次控制系統 (<a href="https://git-scm.com/book/en/v2">Git</a>, <a href="https://fossil-scm.org">Fossil SCM</a>, <a href="https://www.heroku.com/">Heroku</a> and <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a>)</li>
</ol>
<h4>Solvespace 編譯:</h4>
<p style="padding-left: 30px;">利用 MSYS2 編譯 Solvespace, 需要 install cmake<br/><br/>pacman -S mingw-w64-x86_64-cmake<br/><br/>而且必須 rename Y:\msys64\usr\bin\sh.exe 換成其他名稱.<br/><br/>cd solvespace<br/>mkdir build<br/>cd build<br/>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>make<br/><br/>need libwinpthread-1.dll to execute solvespace.exe<br/>上述<a href="https://www.youtube.com/watch?v=OHyeZz6XE8A">流程影片</a>編譯時間約需 19 分鐘, 完成的 <a href="https://drive.google.com/file/d/1tMy9ir-gIuXSYbUKTFQ0W5hd00pRozEM/view?usp=sharing">solvespace 可執行檔案下載</a></p>
<p>以 Msys2 編譯 Solvespace:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/OHyeZz6XE8A" title="YouTube video player" width="560"></iframe></p>
<p>根據 svg 檔案資料, 以 Python 驅動機械手臂繪圖. <a href="/downloads/ABB-IRB-4600-20-2.50_draw.7z">ABB-IRB-4600-20-2.50_draw.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dkRaf5n3OKs" title="YouTube video player" width="560"></iframe></p>
<p>利用 Python 程式控制 robot 執行 Pick and Place. <a href="/downloads/pick_and_place.7z">pick_and_place.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/45J9Rr1VOt0" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/gybeOY6PiFs" title="YouTube video player" width="560"></iframe></p>
<p>以網際內容管理系統整理自動控制系統設計流程:</p>
<p style="padding-left: 30px;"><a href="/downloads/control/controller design for magnetic levitation system.pdf">Controller design for magnetic levitation system.pdf</a> (以 <a href="https://www.coppeliarobotics.com/">Coppeliasim</a> 或 <a href="https://cyberbotics.com/">Webots</a> 實現)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/vrep_inverted_pendulum">https://github.com/mdecourse/vrep_inverted_pendulum</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/RobotSimulator">https://github.com/mdecourse/RobotSimulator</a></p>
<p style="padding-left: 30px;"><a href="https://ctmakro.github.io/site/on_learning/rl/vrep.html">https://ctmakro.github.io/site/on_learning/rl/vrep.html</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/pytorch/robotic-assembly-using-deep-reinforcement-learning-dfd9916c5ad7">https://medium.com/pytorch/robotic-assembly-using-deep-reinforcement-learning-dfd9916c5ad7</a></p>
<p style="padding-left: 30px;"><a href="https://www.toptal.com/deep-learning/pytorch-reinforcement-learning-tutorial">https://www.toptal.com/deep-learning/pytorch-reinforcement-learning-tutorial</a></p>
<p></p><h2>Topic 0</h2>
<h4>網際內容管理程式練習題目:</h4>
<ol>
<li>學習如何解讀帶有 <a href="https://en.wikipedia.org/wiki/Ajax_(programming)">AJAX</a> 程式架構的網際伺服器內容</li>
<li>學習如何利用 Python <a href="https://requests.readthedocs.io/en/master/">requests</a> 中的 post 方法, 向伺服器送出表單資料</li>
<li>學習如何利用 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">bs4</a> 解讀 <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics">HTML</a> 檔案</li>
<li>學習如何利用 Python 程式執行操作系統指令 (<a href="https://docs.python.org/3/library/os.html">os Module</a>)</li>
<li>學習如何將網際程式伺服至 <a href="https://www.heroku.com/">Heroku</a> 雲端主機</li>
</ol>
<p>2021 Spring 的網際內容管理課程將從學校的課程主機中擷取資料開始:</p>
<p>學校的課程相關主機為: <a href="https://qry.nfu.edu.tw/">https://qry.nfu.edu.tw/</a></p>
<p>其中包括</p>
<p style="padding-left: 30px;">查詢各班課表用: <a href="https://qry.nfu.edu.tw/class.php">https://qry.nfu.edu.tw/class.php</a></p>
<p style="padding-left: 30px;">查詢教師課表: <a href="https://qry.nfu.edu.tw/teacher.php">https://qry.nfu.edu.tw/teacher.php</a></p>
<p style="padding-left: 30px;">查詢教室課表: <a href="https://qry.nfu.edu.tw/classroom.php">https://qry.nfu.edu.tw/classroom.php</a></p>
<p style="padding-left: 30px;">查詢課程: <a href="https://qry.nfu.edu.tw/classname.php">https://qry.nfu.edu.tw/classname.php</a></p>
<p style="padding-left: 30px;">查詢班級名條: <a href="https://qry.nfu.edu.tw/classlist.php">https://qry.nfu.edu.tw/classlist.php</a></p>
<p>而與學校排課相關的專案.</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/GeneticAlgorithmUniversityClassScheduler">https://github.com/mdecourse/GeneticAlgorithmUniversityClassScheduler</a></p>
<p style="padding-left: 60px;"><a href="/downloads/2018_UNIVERSITY TIMETABLE SCHEDULING USING METAHEURISTIC ADAPTIVE-ELITIST GENETIC ALGORITHM.pdf">2018_UNIVERSITY TIMETABLE SCHEDULING USING METAHEURISTIC ADAPTIVE-ELITIST GENETIC ALGORITHM.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5857-6">Beginning PyQt - 2020 ebook.pdf</a></p>
<p>以下則為可用來擷取課程主機的參考程式碼:</p>
<p><a href="https://qry.nfu.edu.tw/class.php">class.php</a> 網頁原始碼中 AJAX 程式段:</p>
<p><img alt="" class="add_border" height="604" src="/images/class.php_ajax_script.png" width="600"/></p>
<p>在 class.php 頁面以表單選擇四技設一甲後進行查詢, 所得超文件中, 以<span style="background-color: #ccffcc;">網頁開發者</span>中的<span style="background-color: #ccffcc;">檢測器</span>可以查得所傳回的 table class 名稱為 tbcls:</p>
<p><img alt="" class="add_border" height="404" src="/images/class.php_return_table_class_name_tbcls.png" width="600"/></p>
<p>取得四技設一甲 2021 Spring 班級課表, 存為 html 後以內定瀏覽器開啟:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system()
import os
# for geting html file path
import pathlib

# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

'''
url:  'class_ajax.php',
data: { pselyr: pselyr, pselclss: pselclss
'''
semester = '1092'
classno = '42311'
column = True

if semester == None:
    semester = '1091'
if classno == None:
    # 42311 is 設一甲
    classno = '42311'
    
headers = {'X-Requested-With': 'XMLHttpRequest'}

url = 'https://qry.nfu.edu.tw/class_ajax.php'
post_var = {'pselyr': semester, 'pselclss': classno}

result = requests.post(url, data = post_var, headers = headers)

soup = bs4.BeautifulSoup(result.content, 'lxml')

# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()

# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})

# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"

for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;amp;nbsp", " ")
output += "&lt;/table&gt;"
# print(output)
# 將 output 寫入 w1_class_local.html
with open("w1_class_local.html", "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\w1_class_local.html")
</pre>
<p><a href="https://drive.google.com/drive/folders/1aIPm_u2RNKk-xVRdhHDqHokjLWHFLAsk">2021 Spring GDrive 下載區</a> (for @gm users only)</p>
<p><a href="https://drive.google.com/file/d/1oJPgppmLSQtx0SDrs4QKOs_YgWDDv2fj/view?usp=sharing">kmol2021_spring_v1</a> 只安裝 Python 3.9, Git, Putty, ShareX 與 processexplorer</p>
<p><a href="https://drive.google.com/file/d/1R6vAAWdNDigmyvFFQTKyM-XNKOWeCFJU/view?usp=sharing">kmol2021_spring_v2</a> 則安裝 Python 3.9, Git, Putty, ShareX 與 processexplorer 外, Python 又加裝 flask, flask_cors, bs4, lxml, pelican, markdown, leo</p>
<p>升級可攜隨身程式系統與其他工具的主要目的, 在確保先前的使用模式與所開發的程式碼, 可以在最新的環境中執行.</p>
<p>但是目前 Python 3.9 仍<a href="https://github.com/tensorflow/tensorflow/issues/44485">無法</a>執行 Tensorflow 2.0, 因此若需使用 Tensorflow 2.0 必須退回 Python 3.8.5 環境.</p>
<h4>主題:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/nfulist/discussions/2">https://github.com/mdecourse/nfulist/discussions/2</a></p>
<p>根據 <a href="https://qry.nfu.edu.tw/class.php">https://qry.nfu.edu.tw/class.php</a></p>
<p>班級課表查詢程式:</p>
<p><a href="https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py">w1_class_local.py</a></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;script type="text/javascript"&gt;
$(function(){
	$("#bt_qry").click(function(){
	pselyr=$("#selyr").val();
	pselclss=$('#selclss').val();
		if(pselyr.length!=1 &amp;&amp; pselclss.length!=1)
		{
			$.blockUI({
				message: $('&lt;div id="loading" style="display: none;"&gt;處理中...&lt;/div&gt;'),
				css: {
						border: 'none',
						padding: '10px',
						'font-size': '16px'
				}
			});
			$.ajax({
				type: "POST", //post,get
				dataType: "html",
				cache: false, //關閉ajax緩衝區
				url:  'class_ajax.php',
				data: { pselyr: pselyr, pselclss: pselclss },
				success: function(response){
					$("#div_output").html(response);
					//alert(response);
					//$("#myParentSelect").trigger('change');
				$.unblockUI();
				}
			})
		}else{
			alert("請選擇學年/學期或班級代號！");
		}
	});
});
&lt;/script&gt;</pre>
<p>選單參數與對應值</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">selyr

&lt;option value="1092" selected&gt;109學年度第2學期&lt;/option&gt;
&lt;option value="1091" &gt;109學年度第1學期&lt;/option&gt;
&lt;option value="1083" &gt;108學年度第3學期&lt;/option&gt;
&lt;option value="1082" &gt;108學年度第2學期&lt;/option&gt;

selclss

&lt;option value="42310" &gt;42310四設計一訓&lt;/option&gt;
&lt;option value="42311" &gt;42311四設計一甲&lt;/option&gt;
&lt;option value="42312" &gt;42312四設計一乙&lt;/option&gt;
&lt;option value="42319" &gt;42319四設計一攜&lt;/option&gt;
&lt;option value="42320" &gt;42320四設計二訓&lt;/option&gt;
&lt;option value="42321" &gt;42321四設計二甲&lt;/option&gt;
&lt;option value="42322" &gt;42322四設計二乙&lt;/option&gt;
&lt;option value="42329" &gt;42329四設計二攜&lt;/option&gt;
&lt;option value="42330" &gt;42330四設計三訓&lt;/option&gt;
&lt;option value="42331" &gt;42331四設計三甲&lt;/option&gt;
&lt;option value="42332" &gt;42332四設計三乙&lt;/option&gt;
&lt;option value="42339" &gt;42339四設計三攜&lt;/option&gt;
&lt;option value="42340" &gt;42340四設計四訓&lt;/option&gt;
&lt;option value="42341" &gt;42341四設計四甲&lt;/option&gt;
&lt;option value="42342" &gt;42342四設計四乙&lt;/option&gt;
&lt;option value="42349" &gt;42349四設計四攜&lt;/option&gt;</pre>
<p>ajax 透過 post 送出對應變數值</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">url:  'class_ajax.php',
data: { pselyr: pselyr, pselclss: pselclss },</pre>
<p>利用 Python requests 以 post 送出查詢變數後取回查詢結果:</p>
<p>以下為綜一館八樓電腦輔助設計室 2021 Spring 排課表, 程式取回資料後存為 html 後以內定的瀏覽器開啟:</p>
<p><a href="https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_classroom_local.py">w1_classroom_local.py</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib

# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0810'
column = True

if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0810'
    
headers = {'X-Requested-With': 'XMLHttpRequest'}

url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}

result = requests.post(url, data = post_var, headers = headers)

soup = bs4.BeautifulSoup(result.content, 'lxml')

# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()

# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})

# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"

for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;amp;nbsp", " ")
output += "&lt;/table&gt;"
#print(output)

# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)

</pre>
<p>若根據 <a href="https://qry.nfu.edu.tw/jclassroom.php">https://qry.nfu.edu.tw/jclassroom.php</a></p>
<p>與</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;option value="BGA0611" &gt;BGA0611 (研討室(三)_綜合工程一館 6F)&lt;/option&gt;
&lt;option value="BGA0620" &gt;BGA0620 (動態系統實驗室_綜合工程一館 6F)&lt;/option&gt;
&lt;option value="BGA0640" &gt;BGA0640 (創意設計室_綜合工程一館 6F)&lt;/option&gt;
&lt;option value="BGA0710" &gt;BGA0710 (研討室(二)_綜合工程一館 7F)&lt;/option&gt;
&lt;option value="BGA0730" &gt;BGA0730 (研討室(一)_綜合工程一館 7F)&lt;/option&gt;
&lt;option value="BGA0760" &gt;BGA0760 (逆向快速成型實驗室_綜合工程一館 7F)&lt;/option&gt;
&lt;option value="BGA0810" &gt;BGA0810 (電腦輔助設計室_綜合工程一館 8F)&lt;/option&gt;
&lt;option value="BGA0820" &gt;BGA0820 (智慧感測與致動實驗室_綜合工程一館 8F)&lt;/option&gt;
&lt;option value="BGA0823" &gt;BGA0823 (新產品創意設計中心_綜合工程一館 8F)&lt;/option&gt;
&lt;option value="BGA0830" &gt;BGA0830 (電腦輔助繪圖室_綜合工程一館 8F)&lt;/option&gt;
&lt;option value="BGA0842" &gt;BGA0842 (機械元件設計實驗室_綜合工程一館 8F)&lt;/option&gt;
&lt;option value="BGA0901" &gt;BGA0901 (國際會議廳_綜合工程一館 9F)&lt;/option&gt;
&lt;option value="BGA0911" &gt;BGA0911 (機電實驗室_綜合工程一館 9F)&lt;/option&gt;</pre>
<p>則可以查詢各教室排課結果:</p>
<p>w1_classroom_local.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
'''
# 假如使用 Python 3.9 執行則必須自行在程式碼中設定代理主機
import os
 
proxy = 'http://[2001:288:6004:17::69]:3128'
 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''

'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0810'
column = True

if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0810'
    
headers = {'X-Requested-With': 'XMLHttpRequest'}

url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}

result = requests.post(url, data = post_var, headers = headers)

soup = bs4.BeautifulSoup(result.content, 'lxml')

# 先除掉所有 anchor
for a in soup.findAll('a'):
    a.replaceWithChildren()

# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})

# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"

for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;amp;nbsp", " ")
output += "&lt;/table&gt;"
print(output)
</pre>
<h4>有關專題分組:</h4>
<p style="padding-left: 30px;"><span style="background-color: #ffff99;">請問我們打算如何解決 <a href="http://mde.tw/cd2021/content/Stage1.html" style="background-color: #ffff99;">http://mde.tw/cd2021/content/Stage1.html</a> 分組定組序與建立分組專題連結 html 的問題?</span></p>
<h4>延伸練習:</h4>
<ol>
<li><span style="background-color: #ffff99;">請各組修改上述程式碼, 直接將查詢結果存為 html, 並且直接呼叫 firefox 瀏覽器開啟所建立的超文件檔案.</span></li>
<li><span style="background-color: #ffff99;">請各組將上述兩則程式套入 Flask, 改寫成網際程式, 並分別在 Windows 10 與 Ubuntu 20.04 中執行.</span></li>
<li><span style="background-color: #ffff99;">請各組設法為程將上述程式改為 Flask based 後, 將程式部署在 Heroku 中執行.</span></li>
<li><span style="background-color: #ffff99;">請問上述的近端或網際程式架構, 是否可以應用在機械設計的某一個過程? (網際, AJAX, Heroku 部署).</span></li>
</ol>
<h4>額外處理:</h4>
<p style="padding-left: 30px;"><a href="https://forum.eng.nfu.edu.tw/t/topic/105/2">https://forum.eng.nfu.edu.tw/t/topic/105/2</a></p>
<p style="padding-left: 30px;">針對 CMSiMDE 無法正確對 config/content.htm 分頁時能夠列出建議事項, 協助用戶解決問題.</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;">CMSiMDE 動態網站如何進行分頁?</p>
<p style="padding-left: 60px;">CMSiMDE 的靜態網頁如何產生?</p>
<p style="padding-left: 60px;">為何網際內容管理系統要分動態與靜態網頁?</p>
<p style="padding-left: 60px;">CMSiMDE 的網站分頁架構源自 <a href="https://www.cmsimple.org/en/,">https://www.cmsimple.org/en/,</a> 其中一度使用 <a href="https://cherrypy.org/">https://cherrypy.org/</a>, 最後才改為現在的 <a href="https://github.com/pallets/flask">https://github.com/pallets/flask</a>.</p>
<p style="padding-left: 60px;">CMSiMDE 自 2013 年底開發至今, 可能需要重新改寫了:-) anybody??</p>
<p style="padding-left: 30px;">延伸練習:</p>
<p style="padding-left: 60px;"><span style="background-color: #ffff99;">請各組研究一下 <a href="https://github.com/mdecourse/cmsimde" style="background-color: #ffff99;">https://github.com/mdecourse/cmsimde</a> 中的分頁程式, 並嘗試編寫一個能夠協助使用者在無法正確編輯動態網頁時進行 Debug 用.</span></p>
<p>在處理特定目錄中檔案內容字串置換時, 可以利用下列程式碼:</p>
<p>walk_in_dir_and_replace_string.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
findText = """content to remove"""
for dname, dirs, files in os.walk("path_name"):
    for fname in files:
        if fname[-5:] == ".html":
            print(fname)
            fpath = os.path.join(dname, fname)
            with open(fpath, encoding="utf-8") as f:
                s = f.read()
            s = s.replace(findText, "")
            with open(fpath, "w", encoding="utf-8") as f:
                f.write(s)</pre>
<p></p><h2>Topic 1</h2>
<ol>
<li>學會利用 Leo Editor 編輯 Blog 與簡報內容</li>
<li>學會將 Pelican Blog 資料同步至 Blogger</li>
<li>學會將 Github 倉儲資料與 Pages 同步至 Fossil SCM 倉儲</li>
</ol>
<h4>Blogger, Pelican Blog 與 Reveal 簡報</h4>
<p style="padding-left: 30px;">將 <a href="http://mde.tw/cp2020/">http://mde.tw/cp2020/</a> 內容整理至個人 <a href="https://www.blogger.com">https://www.blogger.com,</a></p>
<p style="padding-left: 30px;"> 並設法將所有學員的個人 <a href="https://www.blogger.com">Blogger</a> 網誌連結放入本頁面中.</p>
<p style="padding-left: 30px;">如何使用 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 的 <a href="https://blog.getpelican.com/">Pelican Blog</a> 與 <a href="https://revealjs.com/">Reveal</a> 網際簡報?</p>
<h4>Leo Editor</h4>
<p style="padding-left: 30px;">介紹如何利用 Leo Editor 建立 <a href="https://blog.getpelican.com/">Pelican Blog</a> 與 <a href="https://revealjs.com/">Reveal</a> 網際簡報?</p>
<p style="padding-left: 30px;">介紹如何利用 Leo Editor 讓 <a href="https://blog.getpelican.com/">Pelican Blog</a> 與 <a href="https://www.blogger.com">Blogger</a> 網誌內容保持同步?</p>
<p style="padding-left: 60px;">相較於 <a href="https://www.blogger.com">Blogger</a> 網誌, 利用 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 所建立的 <a href="https://blog.getpelican.com/">Pelican Blog</a> 有那些優點? (分散式版本?)</p>
<p style="padding-left: 30px;"><a href="https://leoeditor.com/">https://leoeditor.com/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/leo-editor">https://github.com/leo-editor</a></p>
<p style="padding-left: 30px;"><a href="https://groups.google.com/g/leo-editor">https://groups.google.com/g/leo-editor</a></p>
<h4>Fossil SCM</h4>
<p style="padding-left: 30px;"><a href="https://fossil-scm.org">https://fossil-scm.org</a></p>
<p style="padding-left: 30px;">已經有了 Github 與 Gitlab, 為何還需要學習 <a href="https://fossil-scm.org">Fossil SCM</a>?</p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/cd2021">https://fossil.kmol.info/cd2021</a></p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/lab/">https://fossil.kmol.info/lab/</a></p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/lab/doc/trunk/index.html">https://fossil.kmol.info/lab/doc/trunk/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/lab/doc/trunk/blog/index.html">https://fossil.kmol.info/lab/doc/trunk/blog/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/lab/doc/49a2fc64d0/index.html">https://fossil.kmol.info/lab/doc/49a2fc64d0/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/lab/doc/49a2fc64d0/blog/index.html">https://fossil.kmol.info/lab/doc/49a2fc64d0/blog/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://fossil.kmol.info/fosgit/doc/trunk/index.html">https://fossil.kmol.info/fosgit/doc/trunk/index.html</a></p>
<p></p>
<p></p>
<p></p><h2>輔助工具</h2>
<p>Editor:</p>
<p style="padding-left: 30px;">SciTE:</p>
<p style="padding-left: 60px;"><a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a></p>
<p>Interpreter:</p>
<p style="padding-left: 30px;">Python:</p>
<p style="padding-left: 60px;"><a href="https://www.python.org/">https://www.python.org/</a></p>
<p style="padding-left: 30px;">Javascript:</p>
<p style="padding-left: 60px;"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript</a></p>
<p style="padding-left: 30px;">Lua:</p>
<p style="padding-left: 60px;"><a href="http://www.lua.org/">http://www.lua.org/</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/vecp2018/lua/SchoolProject/">http://mde.tw/vecp2018/lua/SchoolProject/</a></p>
<p style="padding-left: 30px;">Dart:</p>
<p style="padding-left: 60px;"><a href="https://dart.dev/">https://dart.dev/</a></p>
<p style="padding-left: 60px;"><a href="https://dartpad.github.io/">https://dartpad.github.io/</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cp2019ag1/content/W10%20%E5%88%86%E7%B5%84%E4%BB%BB%E5%8B%99.html">Dart Examples </a></p>
<p>Compiler:</p>
<p style="padding-left: 30px;">Tiny C Compiler:</p>
<p style="padding-left: 60px;"><a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a></p>
<p style="padding-left: 30px;">Msys2:</p>
<p style="padding-left: 60px;"><a href="https://www.msys2.org/">https://www.msys2.org/</a></p>
<p>CAD tools:</p>
<p style="padding-left: 30px;">Solvespace</p>
<p style="padding-left: 60px;"><a href="https://solvespace.com/index.pl">https://solvespace.com/index.pl</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a></p>
<p style="padding-left: 60px;"><a href="https://solvespace.com/tutorial.pl">https://solvespace.com/tutorial.pl</a></p>
<p style="padding-left: 60px;"><a href="http://www.farwire.net/SolveSpace-LearningGuide.htm">http://www.farwire.net/SolveSpace-LearningGuide.htm</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cad2020/content/Project%20Plan.html">http://mde.tw/cad2020/content/Project%20Plan.html</a></p>
<p style="padding-left: 60px;"><a href="https://thenewstack.io/how-solvespace-is-retooling-its-3d-cad-open-source-community/">https://thenewstack.io/how-solvespace-is-retooling-its-3d-cad-open-source-community/</a></p>
<p style="padding-left: 30px;">NX12</p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cad2020/content/NX.html">http://mde.tw/cad2020/content/NX.html</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cad2020/content/HW1_NX.html">http://mde.tw/cad2020/content/HW1_NX.html</a></p>
<p style="padding-left: 30px;">Onshape</p>
<p style="padding-left: 60px;"><a href="https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-ling-jian.html">https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-ling-jian.html</a></p>
<p style="padding-left: 60px;"><a href="https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-lun-kuo-hui-tu.html">https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-lun-kuo-hui-tu.html</a></p>
<p style="padding-left: 60px;"><a href="https://www.onshape.com/en/">https://www.onshape.com/en/</a></p>
<p style="padding-left: 60px;"><a href="https://cad.onshape.com/help/Content/introduction.htm">https://cad.onshape.com/help/Content/introduction.htm</a></p>
<p style="padding-left: 60px;"><a href="https://cad.onshape.com/FsDoc/">https://cad.onshape.com/FsDoc/</a></p>
<p style="padding-left: 60px;"><a href="https://forum.onshape.com/">https://forum.onshape.com/</a></p>
<p style="padding-left: 30px;">Autodesk:</p>
<p style="padding-left: 60px;"><a href="http://help.autodesk.com/view/fusion360/ENU/?guid=GUID-1C665B4D-7BF7-4FDF-98B0-AA7EE12B5AC2">Fusion 360</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/AutodeskFusion360">https://github.com/AutodeskFusion360</a> </p>
<p style="padding-left: 90px;"><a href="https://rawgit.com/AutodeskFusion360/AutodeskFusion360.github.io/master/Installation.html">Add-ins and scripts</a></p>
<p>CAE tools:</p>
<p style="padding-left: 30px;">Coppeliasim:</p>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/helpFiles/index.html">https://www.coppeliarobotics.com/helpFiles/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://forum.coppeliarobotics.com/">https://forum.coppeliarobotics.com/</a></p>
<p style="padding-left: 30px;">Webots:</p>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/doc/guide/index">https://cyberbotics.com/doc/guide/index</a></p>
<p style="padding-left: 60px;"><a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a></p>
<p style="padding-left: 30px;">Pyslvs-UI</p>
<p style="padding-left: 60px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p>
<p style="padding-left: 60px;">ps2020</p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/ps2020">https://github.com/mdecourse/ps2020</a></p>
<p style="padding-left: 30px;">NGSolve</p>
<p style="padding-left: 60px;"><a href="https://ngsolve.org/">https://ngsolve.org/</a></p><h1>Database</h1>
<p>資料庫 (Database) 是電腦程式有系統將資料內容存入特定格式的檔案資料後, 能夠透過 SQL (Structure Query Language) 對其存取的資料架構. Microsoft Office 套件中的 <a href="https://zh.wikipedia.org/wiki/Microsoft_Access">MS Access</a> 與 <a href="https://www.sqlite.org">SQLite</a> 都是採用近端檔案格式儲存的較小型資料庫, 而 <a href="https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads">MS SQL</a>, <a href="https://www.mysql.com/">MySQL</a>, <a href="https://www.postgresql.org/">PostgreSQL</a>, <a href="https://www.oracle.com/tw/database/technologies/">Oracle</a> 則是可以跨伺服器存取資料內容的較常見中大型型資料庫.</p>
<p>A database is nothing but a collection of organized data. It doesn’t have to be in a digital format to be called a database. A telephone directory is a good example, which stores data about people and organizations with a contact number. A to-do list is also a rudimentary form of a database. With ever-larger amounts of data being collected about even the most mundane of processes, digital databases have become increasingly important since their inception in the 1960s (from <a href="https://link.springer.com/book/10.1007/978-1-4842-3576-8">SQL Primer</a>, page 14).</p>
<p>Software that is used to manage a digital database is called a Database Management System (DBMS). When you hear someone talking about PostgreSQL or MySQL, they are referring to a DBMS. A database is what is created when you use the DBMS software to store data about topics that make sense to you or your organization. For example, your company may use PostgreSQL to store inventory information about cellular phones – the product that you sell. In this case, you have created an inventory databaseusing PostgreSQL as your DBMS (from <a href="https://link.springer.com/book/10.1007/978-1-4842-3576-8">SQL Primer</a>, page 14).</p>
<p>Advantages of Using SQL (from <a href="https://link.springer.com/book/10.1007/978-1-4842-3576-8">SQL Primer</a>, page 17):</p>
<ol>
<li>It is standardized – no matter which relational database you choose, it will have an SQL query interpreter built in. The sheer popularity of SQL makes it worth everyone’s time who interacts with a data system.</li>
<li>It has a reasonable English-like syntax. None of the painstaking detail of programming languages like C or Java have to be specified when using SQL. It is concise, easy to understand, and easy to write database queries with. It is declarative in nature, meaning you only have to declare what you want to achieve rather than going over the steps to achieve the results.</li>
<li>It allows a uniform way to query and administer a relational database. Many of the database administration commands are standard SQL commands making the transfer of skills much easier.</li>
<li>It is mature – SQL has been around for over 35 years. While many new features have been added to it, the core of SQL has largely been unchanged. You can derive a lot of utility knowing a few basic SQL concepts and commands, and they will serve you well into the future.</li>
</ol>
<p>當 Cloud Server 數量逐年增多後, 除了上述 SQL based 資料庫系統外, 也出現所謂的 NoSQL 資料庫, 例如: <a href="https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads">mongoDB</a>, NoSQL 資料庫的主要特徵是 the database that has no concept of tables, schemas, SQL, or rows. It doesn’t have transactions, ACID compliance, joins, foreign keys. In short, MongoDB is a very different database than you’re probably used to, especially if you’ve used a relational database management system (RDBMS) in the past (from <a href="https://link.springer.com/book/10.1007/978-1-4842-1182-3">The Definitive Guide to mongoDB</a>).</p>
<p>在網際內容管理課程中將以 <a href="https://www.sqlite.org">SQLite</a>, <a href="https://www.mysql.com/">MySQL</a> 與 <a href="https://www.postgresql.org/">PostgreSQL</a> 在 Flask 網際程式的應用為主, 並介紹如何將網際 SQL based 程式部署到 <a href="https://www.heroku.com/">Heroku</a>.</p>
<h4>MySQL and PostgreSQL on Heroku:</h4>
<p>在 Heroku 上部署的網際程式並不帶有 Persistent data 使用功能, 意即透過 CMSiMDE 靜態網站部署至 Heroku 雲端主機的內容, 可以利用改版 push 變更內容, 但是若將 CMSiMDE 動態網站部署至 Heroku 後, 透過網際介面修改的內容將在每日重新開機啟動時被刪除 (請參見<a href="https://help.heroku.com/K1PPS2WM/why-are-my-file-uploads-missing-deleted">說明</a>).</p>
<p>因此, 在 Heroku 部署網際 Flask 程式必須將資料存在另外一台伺服器上, 而通常跨伺服器存取資料所採用的資料庫為 SQL based 或 NoSQL based 資料庫伺服器, 在此我們希望利用 MySQL 與 PostgreSQL 資料庫來存放 Flask 網際程式上的資料內容.</p>
<p>以下則是 Heroku 雲端主機上所提供的免費資料庫系統:</p>
<h4 style="padding-left: 30px;">Heroku PostgreSQL:</h4>
<p style="padding-left: 60px;"><a href="https://elements.heroku.com/addons/heroku-postgresql">https://elements.heroku.com/addons/heroku-postgresql</a> (Free: 1GB/10000 rows limit per export)</p>
<h4 style="padding-left: 30px;">ClearDB MySQL:</h4>
<p style="padding-left: 60px;"><a href="https://elements.heroku.com/addons/cleardb">https://elements.heroku.com/addons/cleardb</a> (Free: 5MB/10 connections)</p>
<h4 style="padding-left: 30px;">Draxlr PostSQL and MySQL:</h4>
<p style="padding-left: 60px;"><a href="https://elements.heroku.com/addons/draxlr">https://elements.heroku.com/addons/draxlr</a> (Free: 1 database/5 tables)</p>
<h4 style="padding-left: 30px;">Jawsdb MySQL:</h4>
<p style="padding-left: 60px;"><a href="https://elements.heroku.com/addons/jawsdb">https://elements.heroku.com/addons/jawsdb</a> (Free: 5MB/10 connections)</p>
<h4 style="padding-left: 30px;">Trevor PostgreSQL and MySQL:</h4>
<p style="padding-left: 60px;"><a href="https://elements.heroku.com/addons/trevor">https://elements.heroku.com/addons/trevor</a> (Free: 1 database/50000 rows limit per export)</p>
<h4>Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/set-up-heroku-postgresql-for-your-app-in-python-7dad9ceb0f92">https://towardsdatascience.com/set-up-heroku-postgresql-for-your-app-in-python-7dad9ceb0f92</a></p>
<p style="padding-left: 30px;"><a href="https://devcenter.heroku.com/articles/heroku-postgresql">https://devcenter.heroku.com/articles/heroku-postgresql</a></p>
<p style="padding-left: 30px;"><a href="https://devcenter.heroku.com/articles/getting-started-with-python">https://devcenter.heroku.com/articles/getting-started-with-python</a> </p>
<p style="padding-left: 30px;"><a href="https://rnnnnn.medium.com/%E5%9C%A8-heroku-%E4%BD%88%E7%BD%B2-postgres-%E8%B3%87%E6%96%99%E5%BA%AB-c473bff69d1c">Heroku 部署 PostgreSQL</a></p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/bradtraversy/0029d655269c8a972df726ed0ac56b88">Python Heroku deployment </a></p>
<h4>Flask peewee:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/coleifer/flask-peewee">https://github.com/coleifer/flask-peewee</a></p>
<p style="padding-left: 30px;"><a href="http://docs.peewee-orm.com/en/latest/peewee/example.html">http://docs.peewee-orm.com/en/latest/peewee/example.html</a></p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://fossil-scm.org/home/doc/tip/www/tech_overview.wiki">https://fossil-scm.org/home/doc/tip/www/tech_overview.wiki</a> (Fossil SCM 使用 SQLite 格式儲存資料)</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Fossil_(software)">Fossil SCM 採用 C 與 SQL 語言建立</a></p>
<p style="padding-left: 30px;"><a href="https://fossil-scm.org/home/doc/trunk/www/theory1.wiki">有關 Fossil SCM 設計的一些想法</a></p>
<p style="padding-left: 30px;"><a href="https://nedbatchelder.com/blog/201001/d_richard_hipps_software_universe.html">Richard Hipp's Software Universe</a> (<a href="http://www.hwaci.com/sw/lemon/">LEMON</a>, <a href="https://sqlite.org">SQLite</a> and <a href="https://fossil-scm.org">Fossil SCM</a>)</p>
<p style="padding-left: 30px;"><a href="https://wiki.tcl-lang.org/page/Fossil">Fossil SCM 與 TCL</a></p><h2>peewee</h2>
<p>peewee 簡介:</p>
<p style="padding-left: 30px;"><a href="http://jonathansoma.com/tutorials/webapps/intro-to-peewee/">http://jonathansoma.com/tutorials/webapps/intro-to-peewee/</a></p>
<p style="padding-left: 30px;"><a href="https://www.blog.pythonlibrary.org/2014/07/17/an-intro-to-peewee-another-python-orm/">https://www.blog.pythonlibrary.org/2014/07/17/an-intro-to-peewee-another-python-orm/</a> </p>
<p><a href="/downloads/docs-peewee-orm-com-en-latest.pdf">docs-peewee-orm-com-en-latest.pdf</a></p>
<p><a href="http://docs.peewee-orm.com/en/latest/peewee/quickstart.html#quickstart">http://docs.peewee-orm.com/en/latest/peewee/quickstart.html#quickstart</a></p>
<p><a href="http://docs.peewee-orm.com/en/latest/peewee/models.html#table-names">http://docs.peewee-orm.com/en/latest/peewee/models.html#table-names</a></p>
<p>By default Peewee will automatically generate a table name based on the name of your model class. The way the table-name is generated depends on the value of Meta.legacy_table_names. By default, legacy_table_names=True so as to avoid breaking backwards-compatibility. However, if you wish to use the new and improved table-name generation, you can specify legacy_table_names=False.</p><h2>SQLite</h2>
<p>SQLite GUI 工具:</p>
<p style="padding-left: 30px;"><a href="https://sqlitebrowser.org/dl/">https://sqlitebrowser.org/dl/</a> (download)<br/><br/><a href="https://github.com/sqlitebrowser/sqlitebrowser">https://github.com/sqlitebrowser/sqlitebrowser </a>(source code)</p>
<h4>利用 <a href="https://www.sqlite.org">SQLite</a> 儲存 Flask 網際程式的檔案:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/nfumde">https://github.com/mdecourse/nfumde</a> (將各實驗室排課時間表存入資料庫)</p>
<p style="padding-left: 30px;"><a href="http://nfumde.herokuapp.com/table">http://nfumde.herokuapp.com/table</a> (heroku5 AT mde)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a> (將查詢過的修課成員名單存入資料庫)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/scissor-rock-paper2">https://github.com/mdecourse/scissor-rock-paper2</a> (將每一場猜拳結果存入資料庫)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/lookupdict">https://github.com/mdecourse/lookupdict</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a></p>
<h4 style="padding-left: 30px;">Google Oauth2 登入 in Python Flask:</h4>
<p style="padding-left: 60px;"><a href="https://myapollo.com.tw/zh-tw/integrating-google-sign-in-into-flask-app/">https://myapollo.com.tw/zh-tw/integrating-google-sign-in-into-flask-app/</a></p>
<p style="padding-left: 60px;"><a href="https://www.maxlist.xyz/2019/06/29/flask-google-login/">https://www.maxlist.xyz/2019/06/29/flask-google-login/</a></p>
<p>以 <a href="https://www.msys2.org/">Msys2</a> 自行編譯 <a href="https://sqlite.org/src/doc/trunk/README.md">SQLite 原始碼</a>.</p>
<p>利用 Python 批次建立 Fossil SCM 使用者帳號：</p>
<p style="padding-left: 30px;"><a href="http://lab.kmol.info/blog/Year-2017-Conclusion.html">http://lab.kmol.info/blog/Year-2017-Conclusion.html</a> (寄信程式必須改為 Gmail API)</p>
<h4>實習目的:</h4>
<p style="padding-left: 30px;">利用較簡單的 SQLite 練習 SQL 語法</p>
<p style="padding-left: 30px;">Python 透過 <a href="https://github.com/coleifer/peewee">peewee</a> <a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">ORM</a> 連接資料庫</p>
<h4>建立資料庫:</h4>
<p><a href="/downloads/w1_create_db.py">w1_create_db.py</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
# sqlite3 模組為 Python3 內建
import sqlite3
 

# 為了讓程式能夠同時在 Leo Editor 與 SciTE 中執行列印
# 特別建立 leoprint 函式
# *args 表示 leoprint 可以接受任意數量的輸入變數
def leoprint(*args):
    try:
        g.es(*args)
    except:
        print(*args)
 
# 資料庫檔案將與程式放在同一目錄
data_dir = "./"
 
class Init(object):
    def __init__(self):
        # 資料庫選用
        # 內建使用 sqlite3                
        ormdb = "sqlite"
        #ormdb = "mysql"
        #ormdb = "postgresql"
     
        if ormdb == "sqlite":
            # 資料庫使用 SQLite
            # ORM 只能建立資料表, 無法直接建立資料庫
            # 因此 MySQL 資料庫採 pymysql 建立
            # SQLite 資料庫採 sqlite3 建立
            # PostgreSQL 資料庫採 psycopg2 建立
            # 也可以使用 peewee 建立資料表格
            try:
                conn = sqlite3.connect(data_dir+"course.db")
                cur = conn.cursor()
                # 建立資料表
                cur.execute("CREATE TABLE IF NOT EXISTS course( \
                        id INTEGER PRIMARY KEY AUTOINCREMENT, \
                        semester TEXT, \
                        classroomno TEXT, \
                        week TEXT, \
                        session TEXT, \
                        content TEXT, \
                        memo TEXT);")
                cur.close()
                conn.close()
            except:
                leoprint("can not create db and table")
     
# 建立案例
init = Init()
leoprint("done")
</pre>
<h4>將從教務主機取回的電腦輔助設計室排課資料寫入上述所建立的 SQLite 資料庫中:</h4>
<p><a href="/downloads/w1_classroom_local_db.py">w1_classroom_local_db.py</a></p>
<p>假如 Proxy 設定需要帳號與密碼, 則必須透過外部讀取的方式取得設定, 儘量不要直接將帳號密碼放在倉儲或網站中.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("./../proxy_setup.txt") as fh:
    data = fh.readline()
#print(data)
proxy = data</pre>
<p>proxy_setup.txt 的內容則為: http://代理主機帳號:代理主機密碼@[2001:代理主機 IP 位址]:3128</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用 peewee ORM
from peewee import SqliteDatabase, Model, CharField, TextField, IntegerField, MySQLDatabase
import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
import re

# 為了讓程式能夠同時在 Leo Editor 與 SciTE 中執行列印
# 特別建立 leoprint 函式
# *args 表示 leoprint 可以接受任意數量的輸入變數
def leoprint(*args):
    try:
        g.es(*args)
    except:
        print(*args)
        
ormdb = "sqlite"

if ormdb == "sqlite":
    # 針對 sqlite3 指定資料庫檔案, , check_same_thread 設為 False, 表示資料庫可以跨執行緒
    db = SqliteDatabase("./course.db", check_same_thread=False)
    db.connection()

# 在此建立資料表欄位
# 因為 peewee class Meta 的 legacy_table_names=True, 因此當 class 名稱為 Course
# peewee 會自動假設資料表的名稱為 course.db
class Course(Model):
    # peewee 內定 id 為 PrimaryKey
    #id = PrimaryKey()
    semester = CharField()
    classroomno = CharField()
    week = CharField()
    session = CharField()
    content = CharField()
    memo = TextField()

    class Meta:
        database = db # This model uses the ./+"course.db" database.   

'''
# 在 Mac 執行不需要設定  proxy
# for pythn 3.9
proxy = 'http://[2001:288:6004:17::53]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0810'
column = True

if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0810'
    
headers = {'X-Requested-With': 'XMLHttpRequest'}

url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}

result = requests.post(url, data = post_var, headers = headers)

soup = bs4.BeautifulSoup(result.content, 'lxml')

# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()

# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})

# 以下要準備能夠輸入資料庫的排課時段資料 #########################
tds = [row.findAll('td') for row in table.findAll('tr')]
#leoprint(tds)
count = 0
row = 0
results = {}
for td in tds:
    row = row + 1
    for i in range(len(td)):
        if i != 0 and td[i].text != "\xa0":
            leoprint("星期"+str(i), "第"+str(row-2) + "節-", re.sub('&lt;[^&lt;]+?&gt;', '', td[i].text))
            count = count + 1
            #######
            #semester
            #classroomno
            week = str(i)
            session = str(row-2)
            content = re.sub('&lt;[^&lt;]+?&gt;', '', td[i].text)
            memo = ""
            data = Course.create(semester=semester, classroomno=classroomno, week=week, session=session, content=content, memo=memo)
            data.save()
    #leoprint("***************")
leoprint("total:" + str(count))
# 以上已經取得能夠輸入資料庫的排課時段資料 ######################

# ########## 以下程式碼用來計算排課節數 ###########################
# 以下取出 td 標註資料
table_data = [i.text for i in table.find_all('td')]
#leoprint(table_data)
timeTable = []
# 去除非排課欄位資料內容
for i in table_data:
    if not "虎尾科技" in i and not "節" in i and not "\xa0" in i:
        timeTable.append(i)
#leoprint(len(timeTable))
totalNum = len(timeTable)
# ########## 以上程式碼用來計算排課節數 ##########################

# 重建 table, 設定邊線為 1 pixel
output = "總排課節數: " + str(totalNum) + "&lt;br /&gt;&lt;br /&gt;&lt;table border='1'&gt;"

for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;nbsp", " ")
output += "&lt;/table&gt;"

#leoprint(output)
db.close()
leoprint("done")</pre>
<h4>對上述已經輸入排課資料的電腦輔助設計室資料庫進行查詢:</h4>
<p><a href="/downloads/w1_classroom_local_select.py">w1_classroom_local_select.py</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用 peewee ORM
from peewee import SqliteDatabase, Model, CharField, TextField, IntegerField, MySQLDatabase
# for os.environ and os.system
import os

# 為了讓程式能夠同時在 Leo Editor 與 SciTE 中執行列印
# 特別建立 leoprint 函式
# *args 表示 leoprint 可以接受任意數量的輸入變數
def leoprint(*args):
    try:
        g.es(*args)
    except:
        print(*args)
        
ormdb = "sqlite"

if ormdb == "sqlite":
    # 針對 sqlite3 指定資料庫檔案
    db = SqliteDatabase("./course.db", check_same_thread=False)
    db.connection()

# 在此建立資料表欄位
class Course(Model):
    # peewee 內定 id 為 PrimaryKey
    #id = PrimaryKey()
    semester = CharField()
    classroomno = CharField()
    week = CharField()
    session = CharField()
    content = CharField()
    memo = TextField()

    class Meta:
        database = db # This model uses the ./+"course.db" database.   

# 對資料庫進行 select 查詢, 星期四電腦輔助設計室的排課內容, 依照排課節次由小到大排序
data = Course.select().where(Course.week=="4").order_by(Course.session)
# 關閉資料庫連線
db.close()
# 計算查詢結果總數
total_rows = data.count()
# 逐一列出各筆資料的排課內容
for i in range(total_rows):
    c = data[i]
    leoprint("第"+str(c.session)+"節:", c.content)</pre>
<p></p><h2>PostgreSQL</h2>
<h4>SQL:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3576-8">SQL Primer 電子書</a> (在校內網路下載)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-1955-3">Beginning SQL Queries</a> (在校內網路下載)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-0800-6">The Programmer's Guide to SQL</a> (在校內網路下載)</p>
<h4>PostgreSQL:</h4>
<p style="padding-left: 30px;">下載由 <a href="https://mde.tw">KMOLab</a> 所製作的 <a href="https://drive.google.com/file/d/1gtrN9TqWDX0OIGyaHhdZyum6zZg832jY/view?usp=sharing">postgresql13_portable.7z</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-0018-5">Beginning Database with PostgreSQL</a> (在校內網路下載)</p>
<h4>MongoDB:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/content/pdf/10.1007%2F978-3-658-24549-8.pdf">SQL and NoSQL Databases</a> (在校內網路下載)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-1182-3">The Definitive Guide to MongoDB</a> (在校內網路下載)</p>
<h4>Flask PostgreSQL 實作:</h4>
<p>在 Windows 10 操作系統中使用 PostgreSQL 的第一步就是<a href="/get_page/PostgreSQL/postgresql13_portable.7z">取得 PostgreSQL 的可攜套件</a>, 然後將 postgresql13\bin 納入命令執行搜尋路徑, 並且設定 PostgreSQL 的環境變數:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM 加入 postgresql13 command path
set path_postgresql=%Disk%:\postgresql13\bin;

REM 將 %path_postgresql% 加入 path 變數中

path=%Disk%:;%path_python%;%path_git%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_heroku%;%path_postgresql%;%path%;

REM 加入 PostgreSQL 所需的環境變數設定

@SET PGDATA=%Disk%:\postgresql13\data
@SET PGDATABASE=postgres
@SET PGUSER=postgres
@SET PGPORT=5432
@SET PGLOCALEDIR=%Disk%:\postgresql13\share\locale                   </pre>
<p>設定後重新啟動隨身系統, 在命令列中執行 postgres 指令時, 表示要啟動 PostgreSQL 伺服器, 若跳出防火牆視窗, 詢問是否允許 postgres 通過防火牆擷取資料, 即表示上述設定已經生效.</p>
<p>一旦 PostgreSQL 啟動, 就可以在另一個命令列視窗中輸入 psql -U postgres, 表示要從 client 端連線到 postgres 伺服器, 由於上述 <a href="https://drive.google.com/file/d/1gtrN9TqWDX0OIGyaHhdZyum6zZg832jY/view?usp=sharing">postgresql13_portable.7z</a> 可攜系統將 postgres 伺服器的管理密碼設為 postgres, 因此輸入密碼後即登入 postgres 伺服器, 若要登出則輸入 exit, 命令列執行畫面如下:</p>
<p><img alt="" height="228" src="/images/postgresql_psql_connect.png" width="600"/></p>
<p>接下來就可以根據 <a href="https://github.com/mdecourse/CRUD_Flask_PostgreSQL">https://github.com/mdecourse/CRUD_Flask_PostgreSQL</a> 中的說明, 在 PostgreSQL 中建立所需的資料庫與資料表. 經過修改後部署至 Heroku: <a href="https://flaskg.herokuapp.com">https://flaskg.herokuapp.com</a> (採 heroku5 AT mde 部署)</p>
<h4>參考範例:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/Azure-Samples/flask-postgresql-app">https://github.com/Azure-Samples/flask-postgresql-app</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/czmpacheco/python-flask-postgresql">https://github.com/czmpacheco/python-flask-postgresql</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/LintangWisesa/CRUD_Flask_PostgreSQL">https://github.com/LintangWisesa/CRUD_Flask_PostgreSQL</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/twtrubiks/Deploying-Flask-To-Heroku">https://github.com/twtrubiks/Deploying-Flask-To-Heroku</a></p>
<p style="padding-left: 30px;"><a href="https://rg2021.medium.com/flask-with-sqlalchemy-database-39fc0959609c">https://rg2021.medium.com/flask-with-sqlalchemy-database-39fc0959609c</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/analytics-vidhya/heroku-deploy-your-flask-app-with-a-database-online-d19274a7a749">https://medium.com/analytics-vidhya/heroku-deploy-your-flask-app-with-a-database-online-d19274a7a749</a></p>
<p></p>
<p></p>
<p></p><h2>MySQL</h2>
<h2>Pygrouf</h2>
<p>修改 <a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a> 並部署到 Heroku: <a href="http://pygrouf.herokuapp.com/">http://pygrouf.herokuapp.com/</a> (under heroku5 At mde)</p>
<p style="padding-left: 30px;"></p><h1>WSL</h1>
<p><a href="https://docs.microsoft.com/zh-tw/windows/wsl/">https://docs.microsoft.com/zh-tw/windows/wsl/</a></p>
<p><a href="https://docs.microsoft.com/en-us/windows/wsl/">https://docs.microsoft.com/en-us/windows/wsl/</a></p>
<p><a href="https://docs.microsoft.com/zh-tw/windows/wsl/compare-versions">https://docs.microsoft.com/zh-tw/windows/wsl/compare-versions</a></p>
<p></p>
<h4>IPv6</h4>
<p style="padding-left: 30px;"><a href="https://github.com/microsoft/WSL/issues/4518">https://github.com/microsoft/WSL/issues/4518</a></p><h1>Projects</h1><h2>Delta Printer</h2>
<p>利用 <a href="https://www.onshape.com/en/">Onshape</a> 繪製所需零組件後, 轉入 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 進行模擬與控制後, 利用網際環境展示虛擬列印流程.</p>
<p>可以將 Onshape 換為 Solidworks - 請討論有何差別?</p>
<p>可以將 CoppeliaSim 換為 <a href="https://cyberbotics.com/">Webots</a> - 請討論有何差別?</p>
<p style="padding-left: 30px;"><a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a></p>
<p>可以將網際環境展示改為近端套件 GUI 展示 - 請討論有何差別?</p>
<p>3D Printer design and simulation</p>
<p><a href="https://github.com/mdecourse/virtualkossel">https://github.com/mdecourse/virtualkossel</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/virtualkossel/">http://mde.tw/virtualkossel/</a></p><h2>CMSiMDE</h2>
<p>利用 Flask, flask_cors, lxml, bs4, markdown, reveal.js 與 Pelican 開發網際內容管理系統.</p>
<p>利用 <a href="https://github.com/mdecourse/cmsimde">CMSiMDE</a> 基本架構, 寫一個 CMSi21: <a href="https://github.com/mdecourse/cmsi21">https://github.com/mdecourse/cmsi21</a></p>
<p style="padding-left: 30px;">使用 <a href="https://flask.palletsprojects.com">Flask</a> 網際框架編寫</p>
<p style="padding-left: 60px;"><a href="https://flask.palletsprojects.com/en/1.1.x/blueprints/">https://flask.palletsprojects.com/en/1.1.x/blueprints/</a></p>
<p style="padding-left: 60px;"><a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/templates/">https://flask.palletsprojects.com/en/1.1.x/tutorial/templates/</a></p>
<p style="padding-left: 90px;"><a href="https://www.makotemplates.org/">https://www.makotemplates.org/</a></p>
<p style="padding-left: 30px;">利用 <a href="https://leoeditor.com/">Leo Editor</a> 編寫</p>
<p style="padding-left: 60px;"><a href="https://groups.google.com/g/leo-editor">https://groups.google.com/g/leo-editor</a></p>
<p style="padding-left: 30px;">利用 HTML 中的 H1, H2 與 H3 標題進行分頁</p>
<p style="padding-left: 60px;"><a href="https://www.cmsimple.org">https://www.cmsimple.org</a></p>
<p style="padding-left: 30px;">可以將動態系統頁面轉為靜態頁面</p>
<p style="padding-left: 30px;">設法置入機械設計與精密機械領域有關的網際協同功能</p><h2>Fossil scm</h2>
<p>熟悉 Fossil SCM 在 Windows 與 Ubuntu 上的操作</p>
<p><a href="https://fossil-scm.org">https://fossil-scm.org</a></p>
<p></p><h2>CDiMDE</h2>
<p>延伸 cdproject1 功能, 設法與 Discourse 整合, 應用於機械設計教學與研究.</p>
<p>整合 CDiMDE 與 Discourse</p>
<p style="padding-left: 30px;"><a href="https://meta.discourse.org/t/login-flow-flask-discourse-flask-with-oauth/162153">https://meta.discourse.org/t/login-flow-flask-discourse-flask-with-oauth/162153</a></p>
<p>Flask and ember.js:</p>
<p style="padding-left: 30px;"><a href="https://flask.palletsprojects.com">https://flask.palletsprojects.com</a></p>
<p style="padding-left: 30px;"><a href="https://emberjs.com/">https://emberjs.com/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/gaganpreet/todo-flask-ember">https://github.com/gaganpreet/todo-flask-ember</a></p>
<p>Discourse:</p>
<p style="padding-left: 30px;"><a href="https://github.com/samamorgan/discourse">https://github.com/samamorgan/discourse</a></p>
<p>PostgreSQL:</p>
<p style="padding-left: 30px;"><a href="https://www.postgresql.org/">https://www.postgresql.org/</a></p>
<p style="padding-left: 30px;">Beginning Databases with PostgreSQL:</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-0018-5">https://link.springer.com/book/10.1007/978-1-4302-0018-5</a></p>
<p style="padding-left: 30px;">PostgreSQL configuration:</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5663-3">https://link.springer.com/book/10.1007/978-1-4842-5663-3</a></p><h2>Discourse</h2>
<p>研究如何安裝配置 Discourse, 並設法透過 API 延伸其應用.</p>
<p><a href="https://github.com/discourse/discourse">https://github.com/discourse/discourse</a></p>
<p><a href="https://blog.codinghorror.com/">https://blog.codinghorror.com/</a></p>
<p>Forum for Discourse:</p>
<p style="padding-left: 30px;"><a href="https://meta.discourse.org/">https://meta.discourse.org/</a></p>
<p>Demo of Discourse:</p>
<p style="padding-left: 30px;"><a href="https://try.discourse.org/">https://try.discourse.org/</a></p>
<p>MDE Discourse:</p>
<p style="padding-left: 30px;"><a href="https://forum.eng.nfu.edu.tw">https://forum.eng.nfu.edu.tw</a></p>
<p style="padding-left: 30px;"><a href="https://jpme.eng.nfu.edu.tw">https://jpme.eng.nfu.edu.tw</a></p>
<p>Beginning Ruby 3:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6324-2">https://link.springer.com/book/10.1007/978-1-4842-6324-2</a></p>
<p>Learn Rails 6:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6026-5">https://link.springer.com/book/10.1007/978-1-4842-6026-5</a></p>
<p>Clean Ruby:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5546-9">https://link.springer.com/book/10.1007/978-1-4842-5546-9</a></p>
<p>Ember.js:</p>
<p style="padding-left: 30px;"><a href="https://emberjs.com/">https://emberjs.com/</a></p>
<p>PostgreSQL:</p>
<p style="padding-left: 30px;"><a href="https://www.postgresql.org/">https://www.postgresql.org/</a></p>
<h2>PPL</h2>
<h4>Probabilistic Programming Language (PPL) 概率程式語言</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9SEIYh5BCjc" title="YouTube video player" width="560"></iframe></p>
<p><a href="http://webppl.org/">http://webppl.org/</a> (網際概率程式語言）</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/webppl">https://github.com/mdecourse/webppl</a></p>
<p>The basic unit of probabilistic programs (概率程式) is the stochastic function (隨機函式). This is an arbitrary Python callable that combines two ingredients:</p>
<ol>
<li>deterministic (確定性) Python code; and</li>
<li>primitive stochastic functions (原始隨機函式) that call a random number generator</li>
</ol>
<p><a href="/downloads/2018_An Introduction to ProbabilisticProgramming.pdf">2018_An Introduction to ProbabilisticProgramming.pdf</a></p>
<p><a href="/downloads/2015_Applications ofProbabilistic Programming.pdf">2015_Applications ofProbabilistic Programming.pdf</a></p>
<p><a href="https://www.cs.cornell.edu/courses/cs4110/2016fa/lectures/lecture33.html">https://www.cs.cornell.edu/courses/cs4110/2016fa/lectures/lecture33.html</a></p>
<p><a href="https://methods.co.uk/blog/the-future-of-artificial-intelligence-part-1-probabilistic-programming-languages/">https://methods.co.uk/blog/the-future-of-artificial-intelligence-part-1-probabilistic-programming-languages/</a></p>
<p><a href="https://www.cs.ubc.ca/~fwood/CS532W-539W/">https://www.cs.ubc.ca/~fwood/CS532W-539W/</a></p>
<h4>Pyro</h4>
<p><a href="http://pyro.ai/">http://pyro.ai/</a></p>
<h4>Scenic</h4>
<p><a href="/downloads/2019_Scenic A Language for Scenario Specification andScene Generation.pdf">2019_Scenic A Language for Scenario Specification andScene Generation.pdf</a></p>
<p><a href="https://medium.com/swlh/a-gentle-introduction-to-probabilistic-programming-languages-bf1e19042ab6">https://medium.com/swlh/a-gentle-introduction-to-probabilistic-programming-languages-bf1e19042ab6</a></p>
<p><a href="https://github.com/mdecourse/Scenic">https://github.com/mdecourse/Scenic</a></p>
<p><a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<p><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<h4>Algorithmic Improvisation:</h4>
<p><a href="https://people.ucsc.edu/~dfremont/impro.html">https://people.ucsc.edu/~dfremont/impro.html</a></p>
<p><a href="/downloads/2013_AI Methods in Algorithmic Composition A Comprehensive Survey.pdf">2013_AI Methods in Algorithmic Composition A Comprehensive Survey.pdf</a></p>
<p><a href="/downloads/2019_Algorithmic Improvisation.pd.pdf">/downloads/2019_Algorithmic Improvisation.pd.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ZdTjo0_q2-k" title="YouTube video player" width="560"></iframe></p><h3>Machine Learning</h3>
<p><a href="/downloads/Reinforcement_Learning_intro.pdf">Reinforcement_Learning_intro.pdf</a></p>
<p><a href="/downloads/1996_experiments_with_reinforcement_learning_in_problems_with_continuous_state_and_action_spaces.pdf">1996_experiments_with_reinforcement_learning_in_problems_with_continuous_state_and_action_spaces.pdf</a></p>
<p><a href="/downloads/1998_Learning to Drive a Bicycle using Reinforcement Learning and Shaping.pdf">1998_Learning to Drive a Bicycle using Reinforcement Learning and Shaping.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/State%E2%80%93action%E2%80%93reward%E2%80%93state%E2%80%93action">sarsa-algorithm</a></p>
<p><a href="/downloads/2013_Reinforcement learning for bicycle control.pdf">2013_Reinforcement learning for bicycle control.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/agent-bicycle">https://github.com/mdecourse/agent-bicycle</a></p>
<p><a href="/downloads/2019_Toward Self-Driving Bicycles Using State-of-the-ArtDeep Reinforcement Learning Algorithms.pdf">2019_Toward Self-Driving Bicycles Using State-of-the-ArtDeep Reinforcement Learning Algorithms.pdf</a></p>
<p><a href="/downloads/A Distributed Reinforcement Learning Solution With Knowledge Transfer Capability forA Bike Rebalancing Problem.pdf">A Distributed Reinforcement Learning Solution With Knowledge Transfer Capability forA Bike Rebalancing Problem.pdf</a></p>
<p><a href="https://opendatascience.com/explore-fundamental-concepts-of-reinforcement-learning/">https://opendatascience.com/explore-fundamental-concepts-of-reinforcement-learning/</a></p>
<p><a href="https://github.com/mdecourse/LearningToRideABike">https://github.com/mdecourse/LearningToRideABike</a></p>
<p><a href="https://github.com/mdecourse/python-rl">https://github.com/mdecourse/python-rl</a></p>