var tipuesearch = {"pages": [{'title': 'About', 'text': '網際內容管理 (Web-based Content Management) \n 為什麼會在機械設計工程系開設網際內容管理課程? \n 利用瀏覽器作為前端, 並將數位內容有系統地送到雲端伺服器中進行管理與運用的架構即稱為網際內容管理. \n 從機械設計專業的角度看待網際內容管理. \n 機械設計工程師應該從 CAD 出發透過零組件系統建立, 模擬與控制, 並在流程中利用 CAE 進行設計功能確認後, 將所有持續改進的內容透過分散式版次與網際管理系統進行保存與數位資料再利用. \n 修課學員名單  ( nfulist 程式碼 ) \n 機械系的巔峰  (其他專業科系是否也適用?) \n 評分: \n 出席 10% \n 個人倉儲與網頁 30% \n 每週網際簡報與 Pdf 報告 60% (含 Youtube 操作影片) \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n', 'tags': '', 'url': 'About.html'}, {'title': '三道牆理論', 'text': 'KMOLab 所開設課程目的是將擋在機械工程師面前的三道牆, 直接利用課程講授的過程, 一一呈現, 讓大家有及時找出突破這三道障礙的機會, 不僅讓各自的潛能有所發揮, 同時也希望大家能更自在地面對未來的更多挑戰. 這三道牆分別是: \n 理論基礎障礙 實務練習障礙 確立目標障礙 \n 理論基礎障礙 \n 所謂的理論基礎障礙就是技職體系學生在高中階段經常疏忽的英文, 數學與邏輯思考與獲取學問的基本能力. 也就是英文聽說讀寫的基本能力, 數學基本能力與了解如何透過邏輯思考解題, 並且學習如何發問, 如何與人協同合作解決問題的能力. \n http://mde.tw/cad2020/content/W10-W14.html \n 實務練習障礙 \n 第二道牆則是實務練習障礙, 許多人不願意花時間在突破上述第一道障礙的原因, 通常是因為不知道學習這些相對抽象的知識有甚麼用處? 因此, 為了凸顯突破第一道牆的重要性, 就必須要透過實際的課程案例, 讓大家了解一旦能突破第一道牆的障礙後, 養成持續學習這些理論基礎內容之後, 就可以相對用比較有效率的方式解決各種問題. \n 但是這需要學習者付出時間與耐性, 當面對完全陌生議題時, 就必須檢討是否第一道牆仍然卡在自己與解決方案中間. 然後用心不斷思考, 探索與練習之後, 若還是無法解決問題. 就必須要先試著描述問題後再尋求他人的協助. \n 假如能有以上的正確學習態度, 就有機會在面對各種問題時, 持續突破前面的兩道牆, 然後看到自己所追求的第三道牆, 並且此後能夠竭盡全力, 翻閱第三道牆的障礙, 積極達成預定目標. \n http://mde.tw/cad2020/content/HW1.html \n http://mde.tw/cad2020/content/HW2.html \n http://mde.tw/cad2020/content/HW1_SW.html \n https://github.com/KmolYuan/Pyslvs-UI \n 確立目標障礙 \n 你的人生目標是甚麼? \n https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html', 'tags': '', 'url': '三道牆理論.html'}, {'title': '機械工程師', 'text': '參考:  機械系的巔峰 \n cse (customer support engineer) \n 半導體機台 (>300萬美元) 設計牽涉: \n \n 力學 (Mechanics) \n 熱傳學 (heat tranfer)－晶圓表面與游離氣體反應所產生的高熱, 需要藉由底部的吸盤降溫, 或是晶圓本身的熱膨脹, etc. \n 電磁學 (Electromagnetics)－靜電吸盤中的電極吸附以及靜電所產生的延遲時間, 或是  CD-SEM  (Critical Dimension Scanning Electron Microscope)量測機台的原理, etc. \n 光學 (Optics)－Optical CD ( Metrology )的量測或是用光學顯微鏡在晶圓上 Alignment mark 作位置校正, 座標建立, etc. \n 材料力學 (Mechanics of Materials)－真空腔體的壁厚及材料選用, 金屬的表面處理及反應後 particle issue 的關係, etc. \n 控制 (Automatic Control)－機械手臂的控制理論(很多廠商都外包了), stage, sensor, Encoder, 手臂或真空如何作動能降低 Overhead, etc. \n 其它還有游離電漿的化學反應及反應中/氣體的流體力學對晶圓邊緣膜厚或蝕刻均勻度的影響等. \n \n pse (process support engineer) \n 其他內容重點請各分組負責整理. \n 參考資料: \n 外商與你想的不一樣 \n', 'tags': '', 'url': '機械工程師.html'}, {'title': 'Programming', 'text': '利用 MSYS2 與 Tiny C 編譯 ANSI C \n programming_in_c.pdf \n cprogramming_tutorial.pdf \n ctext.pdf \n c-primer.pdf \n c-refcard.pdf \n 應用練習: \n 編譯修改  https://fossil-scm.org  增加新功能, 或令其可以透過 Oauth2 登入. \n https://fossil-scm.org/home/doc/trunk/www/theory1.wiki \n About Fossil SCM: \n The underlying database is very simple: it is an unordered collection of "artifacts". An artifact is a list of bytes - a "file" in the usual manner of thinking. Many artifacts are simply the content of source files that have been checked into the Fossil repository. Call these "content artifacts". Other artifacts, known as "control artifacts", contain ASCII text in a particular format that defines relationships between other artifacts, such as which content artifacts that go together to form a particular version of the project. Each artifact is named by its SHA1 or SHA3-256 hash and is thus immutable. Artifacts can be added to the database but not removed (if we ignore the exceptional case of shunning.) Repositories synchronize by computing the union of their artifact sets. SQL and relation theory play no role in any of this.', 'tags': '', 'url': 'Programming.html'}, {'title': 'Heroku', 'text': '在 Heroku 部署 Python Flask 網際程式, 令其從  https://qry.nfu.edu.tw/ \xa0 取出所需資料. \n 範例: \n http://mde.tw/cp2020/content/亂數分組.html \n https://nfulist.herokuapp.com/?semester=1091&courseno=0776&column=True \n https://github.com/mdecourse/nfulist \n 練習: \n 如何從  https://qry.nfu.edu.tw/classroom.php  取出機械設計工程系各實驗室的使用時間表, 並利用  https://developers.google.com/calendar  將資料存入 mde.nfu.edu.tw G Suite 所屬的 Calendar 中? \n 該如何利用  https://developers.google.com/calendar  建立一個機械設計工程系各實驗室的網際借用管理系統? \n 有沒有機會在 Heroku 部署服務程式, 透過\xa0 https://pypi.org/project/pydiscourse/  從  https://forum.eng.nfu.edu.tw  中撈出所需的資料並轉存入 Blogger 或 Pelican blog 系統? \n 有沒有機會利用 基因演算法 建立一個網際排課系統? \n https://github.com/AkaZuko/timetable_scheduler \n https://github.com/edceliz/GeneticAlgorithmUniversityClassScheduler \n https://github.com/Baksonator/evolutionary-timetable-scheduling \n https://github.com/hayrapetyan-armine/Timetable \n', 'tags': '', 'url': 'Heroku.html'}, {'title': 'Topics', 'text': '修課學員名單  ( nfulist 程式碼 ) \n 上列連結可以透過瀏覽器, 從學校教務主機中根據學期與課號取出最新的修課學員名單, 這就是典型的網際內容管理應用. \n 當機械設計工程師在進行產品開發過程, 除了  KPI  之外, 更應該從網際內容管理的角度, 思考是否已經替產品開發過程中的每一個步驟或工具提供靈活的開放  API . Why? \n 2021 Spring 的課程將從  https://github.com/mdecourse/nfulist/discussions/2  開始. 然後進行  http://mde.tw/wcm2021/content/Topic%201.html  以及 分組專題 , 其餘網站各頁面則提供參考, 其中的重點包括 \n \n http://mde.tw/wcm2021/content/WSL.html \n Flask CRUD 範例  \n CMU Web \n Ubuntu  實體與  Virtualbox  虛擬主機的安裝與應用. \n', 'tags': '', 'url': 'Topics.html'}, {'title': 'W1-W2', 'text': '網際內容管理課程簡介 \n \n 網際內容管理將從學校教務主機, 以 Flask 與 bs4 擷取出各種相關資料作為開端, 以下為初步流程介紹: \n \n 為了讓各學員可以從  http://a.kmol.info:88  取下 Python 3.9.1 版的可攜程式系統, 特別將需要 @gm 權限的兩階段程式系統, 從 @gm 移動到  http://a.kmol.info:88 , 其中使用 sftp 與 ssh 對 a.kmol.info 進行連線: \n \n 因為電腦輔助設計室第三磁區上課時使用純 IPv6 網路協定上線, 在 Python 3.8.5 可直接執行連結到 IPv4 網站的程式 (因為 Python 會自動使用 Windows 系統中所設定的 Proxy), 但在 Python 3.9.1 環境則必須明確宣告所使用的 IPv6 代理主機 (見以下註解說明, 因為至今 Python 3.9 仍無法如 3.8 自動透過 Windows 系統代理主機執行程式). \n 註解: 根據  https://github.com/psf/requests/issues/5740  的說明, 之所以 Python 3.8 與 3.9 在 requests 呼叫之所以產生差異的原因: Python 3.9 中目前仍存在\xa0 urllib.request.getproxies() misparses Windows registry proxy settings  bug. 無法在 Windows 環境中執行時自動使用系統所設定的 Proxy Server. 但此問題可以自行在 Python 3.9 執行時的程式碼中設定代理主機而避開. \n \n W2 說明 KMOLab 基本概念就是希望機械設計工程師能夠善用計算機程式與網路, 讓產品開發流程更有效率. \n \n 說明如何建立 kmol_hybrid 隨身程式系統 \n \n 說明如何利用\xa0 https://github.com/mdecourse/cmstemplate  建立個人倉儲與網站  \n \n 說明與 cmsimde 編輯及轉靜態網頁有關的認知 \n \n 說明 topic0 執行動機以及自選組員後所衍生相關資料擷取問題的因應及處理 \n \n', 'tags': '', 'url': 'W1-W2.html'}, {'title': '網頁除錯', 'text': '利用 08 倉儲作為範例, 說明若近端的 cmsimde 已經弄亂, 可以重新 git clone 遠端倉儲進行除錯 這個影片最後因為 ssh key 設定錯誤因此在下一個影片才能直接進行 acp.bat 之執行示範. \n \n 接續上一個影片, 說明若使用最新 cmsimde 版本, 可以進入 cmsimde 目錄 git pull 後, 從 up_dir 複製  cms.bat acp.bat http-server.py localhost.crt localhost.key 至倉儲根目錄後, 再回到根目錄進行 acp "提交訊息" 即可. \n', 'tags': '', 'url': '網頁除錯.html'}, {'title': 'W4', 'text': '分組專題 \n W3 自選組員 6 人一組 \n W4 - W9 分組專題: \n 1. 各組根據 W1 - W3 的課程內容從  https://qry.nfu.edu.tw/  以網際程式截取四技設一甲班上各課程的開課時段與修課人員名單, 並使用  https://github.com/mdecourse/nfulist  程式架構, 將分組程式送到  Heroku  伺服. \n http://mde.tw/cp2020/content/Heroku.html \n http://mde.tw/cp2020/content/nfu-project.html \n http://mde.tw/cp2020/content/scissor-rock-paper.html \n 2.  http://mde.tw/wcmj2021/content/W4.html \n 3. 請根據  https://qry.nfu.edu.tw/classroom.php  中有關機械設計工程系相關的實習實驗室排課時數, 按照排課時數多寡, 列出各實習實驗室的總排課時數表. \n 4. 請問從各學制的班級名條 ( https://qry.nfu.edu.tw/classlist.php ) 統計, 可以算出各學制 2021 Spring 總註冊人數嗎? \n 練習英文打字與寫作編輯: \n 請將下列 paper 重新打字整理為 .txt 純文字檔案, 之後再利用 LaTeX 整理為 pdf 檔案. \n 1990_evaluating_the_use_of_cad_systems_in_mechanical_design_engineering.pdf \n W10 - W18 自選與網際內容管理相關的題目完成: \n 各組必選項目: \n 請各組學員協同研究如何利用  Fusion 360  進行零組件設計繪圖, 並利用  Web Interface  進行動態模擬: \n https://rawgit.com/AutodeskFusion360/AutodeskFusion360.github.io/master/Installation.html \n https://github.com/AutodeskFusion360 \n https://2019wcm.blogspot.com/search/label/webots \n https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/ \n \n \n \n \n \n Reveal 期中報告 \n LaTeX PDF 期中報告 \n Reveal 期末報告 \n LaTeX PDF 期末報告 \n Reference: \n https://github.com/mdecourse/latex-on-ci-cd \n https://github.com/mdecourse/texpdf \n https://github.com/mdecourse/tex-pdf-pipeline \n https://github.com/mdecourse/travis-ci-latex-pdf \n https://www.vipinajayakumar.com/continuous-integration-of-latex-projects-with-gitlab-pages.html \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W4 教學', 'text': '簡要說明網際內容管理課程開課緣由, 以及課程目標. 其次說明 wcm2021 Topic0 專案執行目的. 相關頁面:  http://mde.tw/wcm2021/content/Topic 0.html \n \n 說明如何從特定主機, 利用 requests 送出 post 參數後取回 html, 並以 bs4 解讀後利用指令要求 firefox 檢視傳回資料. 擷取程式:  https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py \n \n 說明  https://github.com/mdecourse/wcm2021/blob/main/downloads/w1_class_local.py  程式內容. \n \n 說明如何利用 cms.bat 與 acp.bat 開啟動態網頁並透過 ssh 進行 git add, commit 與 push. \n \n 說明如何在近端啟動  https://github.com/mdecourse/nfulist   因為目前近端為純 IPv6 上網, 且使用 Python 3.9.1 解譯, 因此啟動 server 時必須自行以程式設定 Proxy (due to bug of Python 3.9.1, 不會自動使用 Windows 10 的 Proxy 設定上網). \n', 'tags': '', 'url': 'W4 教學.html'}, {'title': 'W5', 'text': '各分組開始執行 W4-W9 的分組專案 (延續  Topic0  的程式開發), 並從下列台灣未來 10 年科技願景內容中, 確認此舉隸屬未來創新教育體系 ( 多元適性, 未來產業人才, 終身學習 ) 的一環. \n 創新教育體系下, 個人學習心態 (Mindset): \n \n 多元適性 -  自主知識 學習, 動手 實作驗證知識效用 , 發揮 個人特色 . ( 開放專業教材範例 ) \n 未來產業人才 -  數位化 多元環境下 ( 分散式版次管理 ,  區塊鍊, AI ), 充分與產業發展及需求結合. ( Pro Git ,  Blockchain ,  AI ) \n 終身學習 - 以 敏捷  (Agile) 及 彈性  (Flexible) 學習, 適應未來科技與自然環境的變化. ( The Scrum Culture ) \n \n 還沒有啟用 SSH 對 Github 推送的學員, 請參考  SSH 了沒  中的說明, 儘快啟用. \n 一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham] 將 registry 設定匯出存為 y:\\my_github.reg, 並在 start_ipv6.bat 中以\xa0 regedit.exe /S y:\\my_github.reg 將設定匯入. \n 台灣 2030 科技願景: \n taiwan_2030_tech_vision.pdf \n 台灣2030—創新、包容、永續, 實現樂活社會、高值經濟、強韌環境、普惠科技、創新教育等五大目標. \n 鑒於IoT、AI 與區塊鏈等新科技應用越趨成熟，數位化轉型趨勢已然成形. \n \n 數位科技驅動的創新社會 - 產業創新, 跨域加乘, 勞動升級. \n 跨文化、族群、世代的多元包容社會 - 長幼安居, 青壯樂業, 族群多元. \n 循環再生、零污染、智慧強韌的永續社會 - 循環生態, 韌性家園. \n \n \n WCM2021 Programming Project: \n 目前的  https://github.com/mdecourse/cmsimde \xa0 只提供將動態文件 config/content.htm 轉為 content 中各靜態頁面的功能, 為了能夠整理上述 CoppeliaSim 說明文件的轉換, 首先需要建立將 content 中各頁面, 設法集結為 config/content.htm 的功能, 而這項任務將列為  https://mde.tw/wcm2021 \xa0 課程中的網際內容管理課程專案. \n 參考資料: \n http://mde.tw/cd2021/content/W5.html \n https://github.com/mdecourse/copsim/discussions/1 \n https://github.com/showdownjs/showdown \n https://github.com/cyberbotics/webots \n https://github.com/CoppeliaRobotics \n https://github.com/cyberbotics \n https://github.com/bulletphysics/bullet3/tree/master/examples/pybullet \n http://a.kmol.info:88/', 'tags': '', 'url': 'W5.html'}, {'title': 'W5 教學影片', 'text': '假如您使用的 cmsimde 並不是最新版本, 可以設法進入 cmsimde 子目錄後, 以 git pull origin master 拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄. \n \n 為了要讓各組組員更清楚網際內容管理課程內容, 以及期中簡報必須涵蓋的內容,\xa0 特別將 W1-W4 與課程相關的頁面及內容加以說明. \n \n 說明如何利用 Putty 設定以 SSH 將近端版本推送至 Github \n', 'tags': '', 'url': 'W5 教學影片.html'}, {'title': '創新教育', 'text': '創新教育有下列三項策略: \n \n 推動多元適性教育 \n 培育未來產業人才 \n 營造終身學習環境 \n \n \n \n 推動多元適性教育 策略說明: 科技顛覆工作與就業所需的技能, 因此學齡教育更需要能夠按照學童的能力、興趣及需求, 提供 個人化的教學方式 , 並且創造公平學習機會, 強化學童 自主學習與動手實作 的動機, 朝向 深度知識學習 , 進而為未來社會與公民做出有意義的貢獻. 回應族群: 滿足學童自我探索知識且能深入理解內容的需求, 包含對於知識資訊、概念想法、實作技巧與直覺等, 並 建立同儕認同感, 以共同合作取代競爭 觀念; 提供橋接多元教育及升學途徑之認證體系, 緩減家長經濟負擔與學童學習壓力. 國際標竿: 愛沙尼亞推動 全面的數位科技教育應用 , 讓學生能充分獲得數位技能, 例如"ekool" 和 "Stuudium" 能協助教師與家長討論學童學習狀況和教學方法的平台, "電子書包(e-Scoolbag)" 提供數位教材, 如電子教科書、互動遊戲, 且能蒐集學習數據. 新加坡自 2019 年開始逐步 取消中小學考試 , 從傳統的菁英教育轉型為提供公平教育機會、培育未來人才的搖籃, 改為採用 " 課堂評估 " 瞭解學生學習狀況, 讓老師能以彈性的方式取代制式教學, 注重每一個學生個體的成長與發展. 建議推動方向: - 科技輔助自主深度學習 - 協助彌平城鄉數位落差 2. 培育未來產業人才 策略說明: 依據未來產業發展階段之可能需求,  培養數位人才 , 並縮短學用落差. 理解產業需求脈絡, 建置 數位化勞動技能地圖 , 以科技強化職場與技職教育連結, 讓 學歷、技能與資歷認證流程數位化 . 同時也應標靶式鎖定特定領域, 強化延攬與留住專業人才, 使人才供應更活化多元. 回應族群: 回應中壯年面對自動化科技持續演進趨勢下, 將被迫面臨專業或就業轉換的挑戰, 跨越技能落差, 破除求職障礙; 滿足青年族群預判職業發展所需具備技能, 強化教育與職場連結的人才培育; 滿足產業界對於高階人才(如科技、數位人才)的需求, 支持國內產業轉型. 國際標竿: 美國勞工部的生涯輔導網站 CareerOneStop, 提供整合職業生涯訊息的網路平台, 目的在於幫助求職者、學生、勞工、人資單位及雇主, 可以有效運用資源藉以達到自我發展, 並在新經濟環境下做出有效的決策. 更提供美國地區的未來就業預測, 針對不同教育程度提供未來 10 年就業的可能環境. 體驗新加坡 (Contact\xa0 Singapore) 計劃: 海內外共設有 9 個專門吸引外籍專業人士及海外學生的據點, 提供最新的就業規範及生活訊息. 透過寬鬆的專業人士移民政策、外籍專業人士稅賦優惠及親屬安置、個人化就業許可證、維持良好生活環境等, 提高人才駐留入籍的誘因. 建議推動方向: ‒創建 勞動與數位技能地圖 連結職場 ‒推動 目標導向 專業人才平台設置 3.  營造終身學習環境 策略說明: 協助建立終身學習平台, 可記錄實體和數位技能學習的進程與軌跡, 提供多元微課程的推薦服務, 能夠自主選擇培養興趣課程或累積培訓進修權利, 可輕鬆參與學習社群, 分享學習資源或合作實踐成果, 增加學習的持久性並促進社會參與. 回應族群: 滿足中高齡與高齡者終身學習與持續貢獻社會的需求, 提供能按自有學習經驗, 連結吸收新知的管道或加入學習社群; 同時, 也提供教育工作者研究及交流數位教學方法內容之設計, 協助教師社群應用數位工具, 發展創新的教學模式. 國際標竿: 新加坡終身學習及培訓帳戶 "SkillsFuture" 提供 25 歲以上的新加坡公民每年新加坡幣 500 元 (約新台幣一萬元) 的津貼, 讓 公民能夠選修超過 200 堂技能加值與進修課程 , 另外也提供額外 500 元新幣協助 40 到 60 歲的勞工就業或轉職. 愛沙尼亞的教育資訊系統 (EHIS) 儲存 2005 年以來, 學生受教的資訊與統計數據, 能夠協助老師調整教學方法, 成為政府確保未來勞動力的重要依據, 也能 促進老師和教育科技廠商共同開發新的科技教材、教具 , 啟發學生自主學習動機. 建議推動方向: ‒打造 全齡個人學習帳戶 ‒推動 數位師資 培訓革新 \n', 'tags': '', 'url': '創新教育.html'}, {'title': '網際程式開發', 'text': '實習目的: \n \n 利用網際模組擷取資料 ( Python requests ) \n 利用 bs4 擷取網頁資料 \n 利用 Flask 編寫網際程式 \n 利用 Heroku 部署網際程式 \n 利用 Ubuntu 虛擬主機作為伺服器 \n \n 先看懂  https://github.com/mdecourse/scissor-rock-paper2/blob/main/wsgi.py \n request . args . get ( \'user\' ) 以 GET 方式取得 user 出拳變數值 \n 電腦出拳以亂數取值 \n 兩者比較後傳回超文件顯示比賽結果 \n 部署到 Heroku 需要  requirements.txt ,  runtime.txt  與  Procfile . \n 接著請試著透過  http://mde.tw/lab/content/Heroku.html  與  http://mde.tw/cp2020/content/Heroku.html  的導引, 將  Topic0  中的機械設計系實驗室排課時間表程式部署到 Heroku. 至於個人 Github 靜態網站也可以同步一份到 Heroku. \n Beautifulsoup 參考教材: \n beautifulsoup.pdf \n WebScraping_with_bs4.pdf \n beautiful_soup_tutorial.pdf \n 2019_beautifulsoup_document.pd \n Flask 參考教材: \n flask.pdf \n flask_tutorial.pdf \n flask_document.pdf \n 2021_flask_document.pdf \n https://realpython.com/primer-on-python-decorators/ \n https://www.programiz.com/python-programming/decorator \n https://www.python-course.eu/python3_decorators.php \n Python has a feature called decorators to add functionality to an existing code. This is also called metaprogramming because a part of the program tries to modify another part of the program at compile time. \n Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it. \n Heroku 參考教材: \n http://mde.tw/cp2020/content/Heroku.html \n http://mde.tw/cp2020/content/scissor-rock-paper.html  ( https://scissor-rock-paper.herokuapp.com ) \n https://github.com/mdecourse/scissor-rock-paper2  ( https://scissor-rock-paper2.herokuapp.com/ ) \n heroku.pdf \n 2017_web_apps.pdf \n Ubuntu server 參考教材 . \n Topic 0  已經列出兩組可以從學校教務主機擷取資料的程式, 分別可以根據學期代號與班級代號取出班級排課表, 還有利用學期代號與實習實驗室代號擷取排客時間表. \n 接下來實習的目標是希望寫一組程式可以擷取機械設計工程系各實習實驗室排課表, 並且統計各實驗室每週排課總時數. \n 我們先來看  Python requests  的用法: \n W5_requests_ex1.py \n import requests\n\nr = requests.get("https://mde.tw")\nprint("status_code:", r.status_code)\nprint("content-type:", r.headers[\'content-type\'])\nprint("encoding:", r.encoding)\nprint("text:", r.text)\n \n 要看懂下列程式, 必須知道何謂  html entity , 而且要會使用 requests.post() 與 bs4.BeautifulSoup() \n import requests\nimport bs4\n# for os.environ and os.system()\nimport os\n# for geting html file path\nimport pathlib\n \n# for pythn 3.9\nproxy = \'http://[2001:288:6004:17::69]:3128\'\n \nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n \n\'\'\'\nurl:  \'class_ajax.php\',\ndata: { pselyr: pselyr, pselclss: pselclss\n\'\'\'\nsemester = \'1092\'\nclassno = \'42311\'\ncolumn = True\n \nif semester == None:\n    semester = \'1091\'\nif classno == None:\n    # 42311 is 設一甲\n    classno = \'42311\'\n     \nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n \nurl = \'https://qry.nfu.edu.tw/class_ajax.php\'\npost_var = {\'pselyr\': semester, \'pselclss\': classno}\n \nresult = requests.post(url, data = post_var, headers = headers)\n \n# result.content 傳回 binary 資料\n# soup = bs4.BeautifulSoup(result.content, \'lxml\')\n# result.text 傳回純文字資料\nsoup = bs4.BeautifulSoup(result.text, \'lxml\')\n \n# 先除掉所有 anchor\nfor a in soup.findAll(\'a\'):\n    # bs3 語法\n    #a.replaceWithChildren()\n    # bs4 語法, 將標註與內容拆開\n    a.unwrap()\n \n# 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料\ntable = soup.find(\'table\', {\'class\': \'tbcls\'})\n \n# 重建 table, 設定邊線為 1 pixel\noutput = "<table border=\'1\'>"\n \nfor i in table.contents:\n    # 利用 replace 復原  \n    # https://www.w3schools.com/html/html_entities.asp\n    # https://developer.mozilla.org/en-US/docs/Glossary/Entity\n    output += str(i).replace("&amp;nbsp", " ")\noutput += "</table>"\n# print(output)\n# 將 output 寫入 w1_class_local.html\nwith open("w1_class_local.html", "w", encoding="utf-8") as file:\n    file.write(output)\n# 利用 os.system() 以 default browser 開啟 w1_class_local.html\nfilePath = pathlib.Path(__file__).parent.absolute()\n#print(filePath)\n# set firefox as default browser and start url to open html file\nos.system("start file:///" + str(filePath) + "\\\\w1_class_local.html") \n 以上在 CMSMDE 列出程式碼, 有一個技巧, 針對  Html entity  符號必須將 & 表示為 &amp; 否則在頁面程式引用時無法正確顯示出原始碼內容. \n Flask example: \n from flask import Flask, request\nfrom datetime import datetime\nimport os\n\n# for pythn 3.9\nproxy = \'http://[2001:288:6004:17::69]:3128\'\n\'\'\' \nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n\'\'\'\napp = Flask(__name__)\n\n# https://realpython.com/primer-on-python-decorators/\n@app.route(\'/\')\ndef hello():\n    # 若取不到 name 則 name = None\n    name = request.args.get(\'name\')\n    if name == None:\n        name = "test"\n    # https://realpython.com/python-formatted-output/\n    return HELLO_HTML.format(\n            name, str(datetime.now()))\n\nHELLO_HTML = """\n    <html><body>\n        <h1>Hello, {0}!</h1>\n        現在時間為: {1}.\n    </body></html>"""\n\nif __name__ == "__main__":\n    # Launch the Flask dev server\n    app.run(host="localhost", debug=True) \n', 'tags': '', 'url': '網際程式開發.html'}, {'title': '開放教科書', 'text': 'https://www.openculture.com/free_textbooks  (K-12) \n https://openstax.org/subjects  (University) \n \n 透過理論分析與模擬進行產品設計: \n https://github.com/OpenFOAM \n 有限元素分析法教科書:  http://web.mit.edu/kjb/www/Books/FEP_2nd_Edition_4th_Printing.pdf \n', 'tags': '', 'url': '開放教科書.html'}, {'title': 'W6', 'text': '教學目標: \n W1-W5 除了熟悉利用  SSH  與  https://github.com/mdecourse/cmstemplate  建立網站外, 也希望透過學校教務主機的資料擷取, 讓學員應用  https://mde.tw/cp2020  中的 Python 程式擷取網際資料, 練習自行編寫網際 Python 程式. 並將程式部署至  Heroku . (包括靜態網站與動態網站, Heroku 參考資料  1 ,  2 ) \n 自 W6 開始則將逐步引導學員以 Robotics 機電資整合系統為例, 利用 Python 程式操控  RoboDK  模擬平台上的系統模型, 以了解各項機電資產品設計的核心包含 Mechanics 中的 Kinematics 與 Dynamics, 以及零組件 CAD 模型建立, 轉換以及自動控制. ( 機械設計相關參考資料 ) \n 網際內容管理課程將以  RoboDK  為例,  CoppeliaSim  與  Webots  則將在電腦輔助設計實習與協同產品設計實習課程中使用. \n Robot 適用場合: \n https://robodk.com/blog/10-perfect-pick-and-place-tasks-for-a-robot/ , 堆疊, 分類, 包裝, 感測揀選, 品質管控, 上貨架, 下貨架, 製造輔助, 組立, 物品佈置. \n KMOLab 使用的機電資模擬套件: \n \n RoboDK  ( Free Trial version )  OBS  + Youtube Live + Web based Python API \n CoppeliaSim  ( Free Educational version ) Image sensor streamming + Web based Python remote API \n Webots  ( Free Apache 2.0 version )  Web based ready \n \n 進階延伸套件開發: \n 從  Robot_stl.7z  下載 Robot stl ASCII 檔案, 並利用\xa0 https://github.com/mdecourse/RobotSimulator  程式架構, 結合  https://github.com/bulletphysics/bullet3  (可以利用  http://a.kmol.info:88/fall2020_v3.1_pybullet.7z  可攜程式環境) 建立 Robotics oriented 開源套件. \n 執行步驟: \n \n 將 Robot 所有零件 (STL ASCII 格式) 輸入 RoboDK 5.2.2, 透過 Utilities - Model Mechanism or Robot 功能與 Robot 對應的 xml 檔案資訊, 建立所屬 Robot 模型. \n 參考  http://mde.tw/virtualkossel/  ( https://github.com/mdecourse/virtualkossel ), 將 Robot STL 零組件檔案轉入\xa0 https://threejs.org/  網際環境. \n 嘗試利用 Javascript 或  Brython  操控上述 Robot. \n \n 離線模擬的準確性: \n https://robodk.com/blog/robot-calibration-offline-programming/ \n 10 Causes of Inaccurate Robot Programming: \n \n Lack of calibration — The most important factor has got to be calibration, or lack of it. If your cell is not calibrated, you are setting yourself up to fail. I’ll cover calibration in more detail in the rest of this article. \n Inaccurate robot model — Your offline program is only as good as your robot model. Over the years I have spent hours and hours building various robot models for simulators. In the process, I have learned this: if you can find an existing, accurate robot model (like the ones in RoboDK’s Robot Library) you’ll save yourself a lot of time and energy. The accuracy of the robot model can be improved using robot calibration. \n Inaccurate cell layout design — Equally important is having an accurate model of the robot’s work cell. This you will almost certainly have to build yourself, so check and double check that it is an accurate representation of the real workstation. \n Bad post-processor — The post-processor turns the program you have created in offline programming into code which the robot can use. If you are using a good post-processor (such as those included in RoboDK) this is very simple. However, if you have to write your own post-processor for any reason, it could introduce inaccuracies if it is not programmed correctly. \n Distortions in the real world — The real world is never as clean as a simulated environment. The robot links will be slightly different sizes, its joint angles will be slightly different from the readings, etc. This is why calibration is so important. \n Sensor inaccuracy — Sensors are used to detect the difference between the theoretical values and real robot values. The simplest example is a potentiometer to detect the real position of a robot joint. A more complex example is a 3D vision setup. However, sensors are also physical devices sensors so can also introduce errors. \n Unhelpful product design — Some objects are harder to manipulate with a robot than others. Even if your robot program is entirely accurate, you may see inaccuracies in the robot’s actions if the objects it manipulates are not designed with robots in mind. \n Different coordinate systems — Robot manufacturers sometimes use different coordinate systems. This can cause inaccuracies if the wrong system is used or if errors are introduced when converting between different systems. \n Wrong reference frame — All positions in a robot program are given relative to a reference frame. Sometimes this is a fixed frame, e.g. the robot’s base, but you can also make it relative to another frame, like the manipulated object. Poorly calibrating this frame can cause inaccuracies. \n Lack of testing — Test your program. Even when your cell is properly calibrated, you should always test the program thoroughly in software and then double check it on the real robot before you go into production \n \n RoboDK (由 Solvespace 提供系統零組件 STL) \n 利用  https://portableapps.com/apps/music_video/obs-studio-portable  將 Windows 10 上的  RoboDK  程式畫面串流至 Youtube Live 頻道, 並將 Python 控制程式轉為 Flask based 後, 將可讓使用者在網際環境操控遠端的 Robot 系統. \n 單機  RoboDK Free trial 版本 近端操作: \n \n 免費評估版本無法存檔, 因此操作過程只能使用既有的 Station 範例檔案, 或者在操作時自行輸入所需的 robot 與相關定位座標. \n 下載 RoboDK 5.22 版本 \n 開啟可攜程式系統與 RoboDK \n 執行 Draw 與 Pick and Place \n \n 練習: \n 請寫一個 Python 程式可以在 Pick and Place 程式架構下, 不使用 Replace Objects 情況下, 將所有的球放回原處. \n Tips: \n Item.setParentStatic("ParentName") Item should be the item to grab. ParentName should be the gripper name. \n welding_ex1.7z \n Draw: \n \n Pick and Place: \n \n 測試是否可以將 Solvespace 建立的 Robot 存為 RoboDK 的 .robot 格式. \n \n 參考資料: \n http://mde.tw/cad2020/content/Robot.html \n UR3_IntroRobotics.pdf \n RoboDK-Doc-EN-Getting-Started.pdf \n https://wiredworkers.io/product/ur10/ \n Multi-Robot Collaboration.pdf \n Semi-Automatic Robot Welding for Workshops.pdf \n UR5_User_Manual_en_US-3.5.5.pdf  ( UR5_scriptManual-3.5.4.pdf ,  UR5_ik_coppeliaSim.7z ) \n /downloads/UR5_Artificial Intelligence and ComputerVision Techniques for Human-RobotInteraction.pdf \n https://robodk.com/Python-API-examples \n https://github.com/aikorea/awesome-rl \n Learning from delayed rewards.pdf \n Reinforcement learning in robotics, a survey.pdf \n A survey on policy search for Robotics.pdf \n Robot Learning From a Human ExpertUsing Inverse Reinforcement Learning.pdf \n', 'tags': '', 'url': 'W6.html'}, {'title': 'Heroku steps', 'text': '步驟一:  ( 建立 Heroku 帳號 ) 進入  https://heroku.com , 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,\xa0 並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號. \n 完成帳號登記後, 必須知道目前 Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB. \n 步驟二:  ( 建立 Heroku app ) 登入 Heroku 後, 先以 s + 學號 建立第一個 app, 完成後, 將可至 https://s學號.herokuapp.com 連線取得網站最初內容. \n 步驟三:  (下載 Heroku CLI) 從  http://a.kmol.info:88/heroku.7z  下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置或者是 Hybrid 設定的位置. \n 步驟四:  ( 修改命令搜尋路徑 ) 修改隨身系統的啟動批次檔案, 讓 Windows 的命令視窗中可以執行 heroku.exe, 或者稱作"設法將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一". \n 重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat \n 步驟五:  ( 測試 heroku 執行 ) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功. \n 步驟六:  ( 設定 heroku 代理主機 ) 先前我們已經知道網路的應用包含 client 與 server, 不同 client 採用不同的 proxy 設定與 server 連線, 其中 firefox 作為 WWW 網路協定的 client, 有其自己的網路 Proxy 設定, 也可以直接使用操作系統的 Proxy 設定. \n Chrome 作為 WWW 網路協定的 client, 目前 Windows 下的最新版, 只能使用操作系統的 Proxy 設定. \n 而 git 作為 git client 與 github server 連線的 Proxy 設定, 則寫在 y:\\home_ipv6 下的 .giconfig 中,\xa0 以 git config --global http.proxy "http://your_proxy:port" 進行設定. \n 相同的道理 heroku cli 作為  https://heroku.com  伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入: \n REM for heroku login\nset HTTP_PROXY=http://[2001:288:6004:17::53]:3128\nset HTTPS_PROXY=http://[2001:288:6004:17::53]:3128 \n 步驟七:  ( 設定同步倉儲 ) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁: \n 靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html \n 動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服. \n 步驟八:  ( 以 git 進行提交推送 ) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲. \n 指令操作步驟: \n # 以 interactive 模式登入 Heroku, 完成後產生 y:\\home_ipv6\\_netrc\nheroku login -i\n# 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.\nheroku git:remote -a taiwan-no1 \n 上述步驟完成後的 Heroku 網站:  https://taiwan-no1.herokuapp.com', 'tags': '', 'url': 'Heroku steps.html'}, {'title': 'RoboDK', 'text': '2015 年  https://robodk.com/  從  http://www.etsmtl.ca/unites-de-recherche/coro/accueil  spin off 創立公司, 最早開發的程式位於  https://www.parallemic.org/RoKiSim.html  ( http://a.kmol.info:88/RoKiSim.7z ), 至今已經支援超過 500 型工業用機械手臂的離線與在線控制, 且支援 STL, STEP, IGES, WRML, 3DS and OBJ 的零件格式輸入. 相關介紹:  https://en.wikipedia.org/wiki/RoboDK . \n RoboDK API 為開源套件:  https://github.com/mdecourse/RoboDK-API \n https://robodk.com/doc/en/PythonAPI/index.html \n robodk_modules_for_python39.7z \n 以下在 RoboDK 的啟發下, 可以利用下列工具建立開源 Robotics 套件: \n 從  Robot_stl.7z  下載 Robot stl ASCII 檔案, 並利用\xa0 https://github.com/mdecourse/RobotSimulator  程式架構, 結合  https://github.com/bulletphysics/bullet3  (可以利用  http://a.kmol.info:88/fall2020_v3.1_pybullet.7z  可攜程式環境) 建立 Robotics oriented 開源套件. \n Tips: \n 從  https://robodk.com/forum/attachment.php?aid=502  應該有機會將 RoboDK 執行畫面串流至網際伺服器. \n tool_item = robot.AddTool(robodk.Mat(mat))  shape = RDK.AddShape(triangles)  tool_item.AddGeometry(shape, robodk.eye())  shape.Delete() \n \n csvdata = LoadList(strfile, \',\') values = [] for i in range(len(csvdata)): \xa0\xa0\xa0 print(csvdata[i]) \xa0\xa0\xa0 values.append(csvdata[i]) \xa0  # We can also save the list back to a CSV file # SaveList(csvdata, strfile, \',\') \n \n 在 RoboDK 中雙點擊 robot 即可開啟控制 Panel. \n \n Tool -Trace -Active 若為綠色, 表示 end-effector 移動將會留下軌跡, 若為紅色則不會留下軌跡, reset 可抹除先前留下的運行軌跡. \n robodk_ex1.7z \n from robolink import *              # import the robolink library (bridge with RoboDK)\nfrom robodk import *                # import the robodk library (robotics toolbox)\n\nRDK = Robolink()                    # establish a link with the simulator\nrobot = RDK.Item(\'KUKA KR210\')      # retrieve the robot by name\nrobot.setJoints([0,-90,90,0,0,0])   # set the robot to the home position\n\ntarget = robot.Pose()               # retrieve the current target as a pose (position of the active tool with respect to the active reference frame)\nxyzabc = Pose_2_KUKA(target)        # Convert the 4x4 pose matrix to XYZABC position and orientation angles (mm and deg)\n\nx,y,z,a,b,c = xyzabc                # Calculate a new pose based on the previous pose\nxyzabc2 = [x,y,z+50,a,b,c+45]\ntarget2 = KUKA_2_Pose(xyzabc2)      # Convert the XYZABC array to a pose (4x4 matrix)\n\nrobot.MoveJ(target2)                # Make a linear move to the calculated position \n robodk_ex2.7z \n from robolink import *                  # import the robolink library\nfrom robodk import *                    # import the robodk library\n\nRDK = Robolink()                        # connect to the RoboDK API\nrobot  = RDK.Item(\'\', ITEM_TYPE_ROBOT)  # Retrieve a robot available in RoboDK\n#target  = RDK.Item(\'Target 1\')         # Retrieve a target (example)\n\n\npose = robot.Pose()                     # retrieve the current robot position as a pose (position of the active tool with respect to the active reference frame)\n# target = target.Pose()                # the same can be applied to targets (taught position)\n\n# Read the 4x4 pose matrix as [X,Y,Z , A,B,C] Euler representation (mm and deg): same representation as KUKA robots\nXYZABC = Pose_2_KUKA(pose)\nprint(XYZABC)\n\n# Read the 4x4 pose matrix as [X,Y,Z, q1,q2,q3,q4] quaternion representation (position in mm and orientation in quaternion): same representation as ABB robots (RAPID programming)\nxyzq1234 = Pose_2_ABB(pose)\nprint(xyzq1234)\n\n# Read the 4x4 pose matrix as [X,Y,Z, u,v,w] representation (position in mm and orientation vector in radians): same representation as Universal Robots\nxyzuvw = Pose_2_UR(pose)\nprint(xyzuvw)\n\nx,y,z,a,b,c = XYZABC                    # Use the KUKA representation (for example) and calculate a new pose based on the previous pose\nXYZABC2 = [x,y,z+50,a,b,c+45]\npose2 = KUKA_2_Pose(XYZABC2)            # Convert the XYZABC array to a pose (4x4 matrix)\n\nrobot.MoveJ(pose2)                      # Make a joint move to the new position\n# target.setPose(pose2)                  # We can also update the pose to targets, tools, reference frames, objects, ... \n robodk_ex3.7z \n from robolink import *                  # import the robolink library\nfrom robodk import *                    # import the robodk library\n\nangle = int(mbox(\'Enter your angle (0-45)\', entry=True))\n\nRDK = Robolink()                        # connect to the RoboDK API\nrobot  = RDK.Item(\'\', ITEM_TYPE_ROBOT)  # Retrieve a robot available in RoboDK\n#target  = RDK.Item(\'Target 1\')         # Retrieve a target (example)\n \n \npose = robot.Pose()                     # retrieve the current robot position as a pose (position of the active tool with respect to the active reference frame)\n# target = target.Pose()                # the same can be applied to targets (taught position)\n \n# Read the 4x4 pose matrix as [X,Y,Z , A,B,C] Euler representation (mm and deg): same representation as KUKA robots\nXYZABC = Pose_2_KUKA(pose)\nprint(XYZABC)\n \n# Read the 4x4 pose matrix as [X,Y,Z, q1,q2,q3,q4] quaternion representation (position in mm and orientation in quaternion): same representation as ABB robots (RAPID programming)\nxyzq1234 = Pose_2_ABB(pose)\nprint(xyzq1234)\n \n# Read the 4x4 pose matrix as [X,Y,Z, u,v,w] representation (position in mm and orientation vector in radians): same representation as Universal Robots\nxyzuvw = Pose_2_UR(pose)\nprint(xyzuvw)\n \nx,y,z,a,b,c = XYZABC                    # Use the KUKA representation (for example) and calculate a new pose based on the previous pose\nXYZABC2 = [x,y,z+50,a,b,c+angle]\npose2 = KUKA_2_Pose(XYZABC2)            # Convert the XYZABC array to a pose (4x4 matrix)\n \nrobot.MoveJ(pose2)                      # Make a joint move to the new position\n# target.setPose(pose2)                  # We can also update the pose to targets, tools, reference frames, objects, ... \n robodk_ex4.7z \n from robolink import *                  # import the robolink library\nfrom robodk import *                    # import the robodk library\n\nRDK = Robolink()                        # connect to the RoboDK API\nrobot  = RDK.Item(\'\', ITEM_TYPE_ROBOT)  # Retrieve a robot available in RoboDK\n# get the current position of the TCP with respect to the reference frame:\n# (4x4 matrix representing position and orientation)\ntarget_ref = robot.Pose()\npos_ref = target_ref.Pos()\nprint("Drawing a polygon around the target: ")\nprint(Pose_2_TxyzRxyz(target_ref))\n \n \n# move the robot to the first point:\nrobot.MoveJ(target_ref)\n \n# It is important to provide the reference frame and the tool frames when generating programs offline\nrobot.setPoseFrame(robot.PoseFrame())\nrobot.setPoseTool(robot.PoseTool())\nrobot.setZoneData(10) # Set the rounding parameter (Also known as: CNT, APO/C_DIS, ZoneData, Blending radius, cornering, ...)\nrobot.setSpeed(200) # Set linear speed in mm/s\n \n# Set the number of sides of the polygon:\nn_sides = 6\nR = 400\n \n# make a hexagon around reference target:\nfor i in range(n_sides+1):\n    ang = i*2*pi/n_sides #angle: 0, 60, 120, ...\n \n    #-----------------------------\n    # Movement relative to the reference frame\n    # Create a copy of the target\n    target_i = Mat(target_ref)\n    pos_i = target_i.Pos()\n    pos_i[0] = pos_i[0] + R*cos(ang)\n    pos_i[1] = pos_i[1] + R*sin(ang)\n    target_i.setPos(pos_i)\n    print("Moving to target %i: angle %.1f" % (i, ang*180/pi))\n    print(str(Pose_2_TxyzRxyz(target_i)))\n    robot.MoveL(target_i)\n     \n    #-----------------------------\n    # Post multiply: relative to the tool\n    #target_i = target_ref * rotz(ang) * transl(R,0,0) * rotz(-ang)\n    #robot.MoveL(target_i)\n \n# move back to the center, then home:\nrobot.MoveL(target_ref)\n \nprint(\'Done\') \n ex5: \n # Move a robot along a line given a start and end point by steps\n# This macro shows different ways of programming a robot using a Python script and the RoboDK API\n\n# Default parameters:\nP_START = [1755, -500, 2155]    # Start point with respect to the robot base frame\nP_END   = [1755,  600, 2155]    # End point with respect to the robot base frame\nNUM_POINTS  = 10                # Number of points to interpolate\n\n# Function definition to create a list of points (line)\ndef MakePoints(xStart, xEnd, numPoints):\n    """Generates a list of points"""\n    if len(xStart) != 3 or len(xEnd) != 3:\n        raise Exception("Start and end point must be 3-dimensional vectors")\n    if numPoints < 2:\n        raise Exception("At least two points are required")\n    \n    # Starting Points\n    pt_list = []\n    x = xStart[0]\n    y = xStart[1]\n    z = xStart[2]\n\n    # How much we add/subtract between each interpolated point\n    x_steps = (xEnd[0] - xStart[0])/(numPoints-1)\n    y_steps = (xEnd[1] - xStart[1])/(numPoints-1)\n    z_steps = (xEnd[2] - xStart[2])/(numPoints-1)\n\n    # Incrementally add to each point until the end point is reached\n    for i in range(numPoints):\n        point_i = [x,y,z] # create a point\n        #append the point to the list\n        pt_list.append(point_i)\n        x = x + x_steps\n        y = y + y_steps\n        z = z + z_steps\n    return pt_list\n\n#---------------------------------------------------\n#--------------- PROGRAM START ---------------------\nfrom robolink import *    # API to communicate with RoboDK for simulation and offline/online programming\nfrom robodk import *      # Robotics toolbox for industrial robots\n\n# Generate the points curve path\nPOINTS = MakePoints(P_START, P_END, NUM_POINTS)\n\n# Initialize the RoboDK API\nRDK = Robolink()\n\n# turn off auto rendering (faster)\nRDK.Render(False) \n\n# Automatically delete previously generated items (Auto tag)\nlist_items = RDK.ItemList() # list all names\nfor item in list_items:\n    if item.Name().startswith(\'Auto\'):\n        item.Delete()\n\n# Promt the user to select a robot (if only one robot is available it will select that robot automatically)\nrobot = RDK.ItemUserPick(\'Select a robot\', ITEM_TYPE_ROBOT)\n\n# Turn rendering ON before starting the simulation\nRDK.Render(True) \n\n# Abort if the user hits Cancel\nif not robot.Valid():\n    quit()\n\n# Retrieve the robot reference frame\nreference = robot.Parent()\n\n# Use the robot base frame as the active reference\nrobot.setPoseFrame(reference)\n\n# get the current orientation of the robot (with respect to the active reference frame and tool frame)\npose_ref = robot.Pose()\nprint(Pose_2_TxyzRxyz(pose_ref))\n# a pose can also be defined as xyzwpr / xyzABC\n#pose_ref = TxyzRxyz_2_Pose([100,200,300,0,0,pi])\n\n\n\n#-------------------------------------------------------------\n# Option 1: Move the robot using the Python script\n\n# We can automatically force the "Create robot program" action using a RUNMODE state\n# RDK.setRunMode(RUNMODE_MAKE_ROBOTPROG)\n\n# Iterate through all the points\nfor i in range(NUM_POINTS):\n    # update the reference target with the desired XYZ coordinates\n    pose_i = pose_ref\n    pose_i.setPos(POINTS[i])\n    \n    # Move the robot to that target:\n    robot.MoveJ(pose_i)\n    \n# Done, stop program execution\nquit()\n\n\n#-------------------------------------------------------------\n# Option 2: Create the program on the graphical user interface\n# Turn off rendering\nRDK.Render(False)\nprog = RDK.AddProgram(\'AutoProgram\')\n\n# Iterate through all the points\nfor i in range(NUM_POINTS):\n    # add a new target and keep the reference to it\n    ti = RDK.AddTarget(\'Auto Target %i\' % (i+1))\n    # use the reference pose and update the XYZ position\n    pose_i = pose_ref\n    pose_i.setPos(POINTS[i])\n    ti.setPose(pose_i)\n    # force to use the target as a Cartesian target\n    ti.setAsCartesianTarget()\n\n    # Optionally, add the target as a Linear/Joint move in the new program\n    prog.MoveL(ti)\n\n# Turn rendering ON before starting the simulation\nRDK.Render(True) \n\n# Run the program on the simulator (simulate the program):\nprog.RunProgram()\n# prog.WaitFinished() # wait for the program to finish\n\n# We can create the program automatically\n# prog.MakeProgram()\n\n# Also, if we have the robot driver we could use the following call to provoke a "Run on robot" action (simulation and the robot move simultaneously)\n# prog.setRunType(PROGRAM_RUN_ON_ROBOT)\n\n# Done, stop program execution\nquit()\n\n\n#-------------------------------------------------------------\n# Option 3: Move the robot using the Python script and detect if movements can be linear\n# This is an improved version of option 1\n#\n# We can automatically force the "Create robot program" action using a RUNMODE state\n# RDK.setRunMode(RUNMODE_MAKE_ROBOTPROG)\n\n# Iterate through all the points\nROBOT_JOINTS = None\nfor i in range(NUM_POINTS):\n    # update the reference target with the desired XYZ coordinates\n    pose_i = pose_ref\n    pose_i.setPos(POINTS[i])\n    \n    # Move the robot to that target:\n    if i == 0:\n        # important: make the first movement a joint move!\n        robot.MoveJ(pose_i)\n        ROBOT_JOINTS = robot.Joints()\n    else:\n        # test if we can do a linear movement from the current position to the next point\n        if robot.MoveL_Test(ROBOT_JOINTS, pose_i) == 0:\n            robot.MoveL(pose_i)\n        else:\n            robot.MoveJ(pose_i)\n            \n        ROBOT_JOINTS = robot.Joints()\n    \n# Done, stop program execution\nquit() \n ex6: \n # Move a robot along a line given a start and end point by steps\n# This macro shows different ways of programming a robot using a Python script and the RoboDK API\n\n# Default parameters:\nP_START = [1755, -500, 2155]    # Start point with respect to the robot base frame\nP_END   = [1755,  600, 2155]    # End point with respect to the robot base frame\nNUM_POINTS  = 10                # Number of points to interpolate\n\n# Function definition to create a list of points (line)\ndef MakePoints(xStart, xEnd, numPoints):\n    """Generates a list of points"""\n    if len(xStart) != 3 or len(xEnd) != 3:\n        raise Exception("Start and end point must be 3-dimensional vectors")\n    if numPoints < 2:\n        raise Exception("At least two points are required")\n    \n    # Starting Points\n    pt_list = []\n    x = xStart[0]\n    y = xStart[1]\n    z = xStart[2]\n\n    # How much we add/subtract between each interpolated point\n    x_steps = (xEnd[0] - xStart[0])/(numPoints-1)\n    y_steps = (xEnd[1] - xStart[1])/(numPoints-1)\n    z_steps = (xEnd[2] - xStart[2])/(numPoints-1)\n\n    # Incrementally add to each point until the end point is reached\n    for i in range(numPoints):\n        point_i = [x,y,z] # create a point\n        #append the point to the list\n        pt_list.append(point_i)\n        x = x + x_steps\n        y = y + y_steps\n        z = z + z_steps\n    return pt_list\n\n#---------------------------------------------------\n#--------------- PROGRAM START ---------------------\nfrom robolink import *    # API to communicate with RoboDK for simulation and offline/online programming\nfrom robodk import *      # Robotics toolbox for industrial robots\n\n# Generate the points curve path\nPOINTS = MakePoints(P_START, P_END, NUM_POINTS)\n\n# Initialize the RoboDK API\nRDK = Robolink()\n\n# turn off auto rendering (faster)\nRDK.Render(False) \n\n# Automatically delete previously generated items (Auto tag)\nlist_items = RDK.ItemList() # list all names\nfor item in list_items:\n    if item.Name().startswith(\'Auto\'):\n        item.Delete()\n\n# Promt the user to select a robot (if only one robot is available it will select that robot automatically)\nrobot = RDK.ItemUserPick(\'Select a robot\', ITEM_TYPE_ROBOT)\n\n# Turn rendering ON before starting the simulation\nRDK.Render(True) \n\n# Abort if the user hits Cancel\nif not robot.Valid():\n    quit()\n\n# Retrieve the robot reference frame\nreference = robot.Parent()\n\n# Use the robot base frame as the active reference\nrobot.setPoseFrame(reference)\n\n# get the current orientation of the robot (with respect to the active reference frame and tool frame)\npose_ref = robot.Pose()\nprint(Pose_2_TxyzRxyz(pose_ref))\n# a pose can also be defined as xyzwpr / xyzABC\n#pose_ref = TxyzRxyz_2_Pose([100,200,300,0,0,pi])\n\n\n#-------------------------------------------------------------\n# Option 1: Create a curve follow project\n\n# First we need to create an object from the provided points or add the points to an existing object and optionally project them on the surface\n\n# Create a new object given the list of points (the 3xN vector can be extended to 6xN to provide the normal)\nobject_points = RDK.AddPoints(POINTS)\n\n# Alternatively, we can project the points on the object surface\n# object = RDK.Item(\'Object\', ITEM_TYPE_OBJECT)\n# object_points = object.AddPoints(POINTS, PROJECTION_ALONG_NORMAL_RECALC)\n# Place the points at the same location as the reference frame of the object\n# object_points.setParent(object.Parent())\n\n# Set the name of the object containing points\nobject_points.setName(\'AutoPoints n%i\' % NUM_POINTS)\n\npath_settings = RDK.AddMillingProject("AutoPointFollow settings")\nprog, status = path_settings.setMillingParameters(part=object_points)\n# At this point, we may have to manually adjust the tool object or the reference frame\n\n# Run the create program if success\nprog.RunProgram()\n\n# Done\nquit()\n\n\n\n#-------------------------------------------------------------\n# Option 2: Create a point follow project (similar to Option 4)\n\n# First we need to create an object from the provided points or add the points to an existing object and optionally project them on the surface\n\n# Create a new object given the list of points:\nobject_curve = RDK.AddCurve(POINTS)\n\n# Alternatively, we can project the points on the object surface\n# object = RDK.Item(\'Object\', ITEM_TYPE_OBJECT)\n# object_curve = object.AddCurve(POINTS, PROJECTION_ALONG_NORMAL_RECALC)\n# Place the curve at the same location as the reference frame of the object\n# object_curve.setParent(object.Parent())\n\n# Set the name of the object containing points\nobject_curve.setName(\'AutoPoints n%i\' % NUM_POINTS)\n\n# Create a new "Curve follow project" to automatically follow the curve\npath_settings = RDK.AddMillingProject("AutoCurveFollow settings")\nprog, status = path_settings.setMillingParameters(part=object_curve)\n# At this point, we may have to manually adjust the tool object or the reference frame\n\n# Run the create program if success\nprog.RunProgram()\n\n# Done\nquit() \n ex7: \n from robodk import *\nfrom robolink import *\n\n# Set the name of the reference frame to place the targets:\nREFERENCE_NAME = \'Reference CSV\'\n\n# Set the name of the reference target\n# (orientation will be maintained constant with respect to this target)\nTARGET_NAME = \'Home\' \n\n#---------------------------\n# Start the RoboDK API\nRDK = Robolink()\n\n# Ask the user to pick a file:\nrdk_file_path = RDK.getParam("PATH_OPENSTATION")\npath_file = getOpenFile(rdk_file_path + "/")\nif not path_file:\n    print("Nothing selected")\n    quit()\n\n# Get the program name from the file path\nprogram_name = getFileName(path_file)\n\n# Load the CSV file as a list of list [[x,y,z,speed],[x,y,z,speed],...]\ndata = LoadList(path_file)\n\n# Delete previously generated programs that follow a specific naming\n# Automatically delete previously generated items (Auto tag)\n#list_items = RDK.ItemList() # list all names\n#for item in list_items:\n#    if item.Name().startswith(\'Frame\'):\n#        item.Delete()\n\n# Select the robot (the popup is diplayed only if there are 2 or more robots)\nrobot = RDK.ItemUserPick(\'Select a robot\',ITEM_TYPE_ROBOT)\nif not robot.Valid():\n    raise Exception("Robot not selected or not valid")\n    quit()\n\n# Get the reference frame to generate the path\nframe = RDK.Item(REFERENCE_NAME,ITEM_TYPE_FRAME)\nif not frame.Valid():\n    raise Exception("Reference frame not found. Use name: %s" % REFERENCE_NAME)\n\n# Use the home target as a reference\ntarget = RDK.Item(TARGET_NAME, ITEM_TYPE_TARGET)\nif not target.Valid():\n    raise Exception("Home target is not valid. Set a home target named: %s" % TARGET_NAME)\n\n# Set the robot to the home position\nrobot.setJoints(target.Joints())\n\n# Get the pose reference from the home target\npose_ref = robot.Pose()\n\n# Add a new program\nprogram = RDK.AddProgram(program_name, robot)\n\n# Turn off rendering (faster)\nRDK.Render(False)\n\n# Speed up by not showing the instruction:\nprogram.ShowInstructions(False)\n\n# Remember the speed so that we don\'t set it with every instruction\ncurrent_speed = None\ntarget = None\n\n# Very important: Make sure we set the reference frame and tool frame so that the robot is aware of it\nprogram.setPoseFrame(frame)\nprogram.setPoseTool(robot.PoseTool())\n\n# Iterate through all the points\nfor i in range(len(data)):\n    pi = pose_ref\n    pi.setPos(data[i])\n\n    # Update speed if there is a 4th column\n    if len(data[i]) >= 3:\n        speed = data[i][3]\n        # Update the program if the speed is different than the previously set speed\n        if type(speed) != str and speed != current_speed:\n            program.setSpeed(speed)\n            current_speed = speed\n\n    target = RDK.AddTarget(\'T%i\'% i, frame)\n    target.setPose(pi)\n    pi = target\n\n    # Add a linear movement (with the exception of the first point which will be a joint movement)\n    if i == 0:\n        program.MoveJ(pi)\n    else:\n        program.MoveL(pi)\n\n    # Update from time to time to notify the user about progress\n    if i % 100 == 0:\n        program.ShowTargets(False)\n        RDK.ShowMessage("Loading %s: %.1f %%" % (program_name, 100*i/len(data)),False)\n        RDK.Render()\n        \nprogram.ShowTargets(False)\n\nRDK.ShowMessage("Done",False)\nprint("Done") \n ex8: \n from robolink import *    # API to communicate with RoboDK\nfrom robodk import *      # basic matrix operations\n\n# Start the with RoboDK\nRDK = Robolink()\n\n# Select the robot\nROBOT = RDK.ItemUserPick(\'Select a robot\', ITEM_TYPE_ROBOT)\n\nFRAME = RDK.Item(\'Path Reference\', ITEM_TYPE_FRAME)\nTOOL = RDK.Item(\'Tool Reference\', ITEM_TYPE_TOOL)\nif not FRAME.Valid() or not TOOL.Valid():\n    raise Exception("Select appropriate FRAME and TOOL references")\n\n# Check if the user selected a robot\nif not ROBOT.Valid():\n    quit()\n\n# csv_file = \'C:/Users/Albert/Desktop/Var_P.csv\'\ncsv_file = getOpenFile(RDK.getParam(\'PATH_OPENSTATION\'))\n\n# Load P_Var.CSV data as a list of poses, including links to reference and tool frames\ndef load_targets(strfile):\n    csvdata = LoadList(strfile, \',\', \'utf-8\')\n    poses = []\n    idxs = []\n    for i in range(0, len(csvdata)):\n        x,y,z,rx,ry,rz = csvdata[i][0:6]\n        poses.append(transl(x,y,z)*rotz(rz*pi/180)*roty(ry*pi/180)*rotx(rx*pi/180))\n        idxs.append(csvdata[i][6])\n    return poses, idxs\n\n# Load and display Targets from the CSV file\ndef load_targets_GUI(strfile):\n    poses, idxs = load_targets(strfile)\n    program_name = getFileName(strfile)\n    program_name = program_name.replace(\'-\',\'_\').replace(\' \',\'_\')\n    program = RDK.Item(program_name, ITEM_TYPE_PROGRAM)\n    if program.Valid():\n        program.Delete()\n        \n    program = RDK.AddProgram(program_name, ROBOT)\n    program.setFrame(FRAME)\n    program.setTool(TOOL)\n    ROBOT.MoveJ(ROBOT.JointsHome())\n    \n    for pose, idx in zip(poses, idxs):\n        name = \'%s-%i\' % (program_name, idx)\n        target = RDK.Item(name, ITEM_TYPE_TARGET)\n        if target.Valid():\n            target.Delete()\n        target = RDK.AddTarget(name, FRAME, ROBOT)\n        target.setPose(pose)\n        \n        try:\n            program.MoveJ(target)\n        except:\n            print(\'Warning: %s can not be reached. It will not be added to the program\' % name)\n\n\ndef load_targets_move(strfile):\n    poses, idxs = load_targets(strfile)\n    \n    ROBOT.setFrame(FRAME)\n    ROBOT.setTool(TOOL)\n\n    ROBOT.MoveJ(ROBOT.JointsHome())\n    \n    for pose, idx in zip(poses, idxs):\n        try:\n            ROBOT.MoveJ(pose)\n        except:\n            RDK.ShowMessage(\'Target %i can not be reached\' % idx, False)\n        \n\n# Force just moving the robot after double clicking\n#load_targets_move(csv_file)\n#quit()\n\n# Recommended mode of operation:\n# 1-Double click the python file creates a program in RoboDK station\n# 2-Generate program generates the program directly\n\nMAKE_GUI_PROGRAM = False\n\nROBOT.setFrame(FRAME)\nROBOT.setTool(TOOL)\n\n\nif RDK.RunMode() == RUNMODE_SIMULATE:\n    MAKE_GUI_PROGRAM = True\n    # MAKE_GUI_PROGRAM = mbox(\'Do you want to create a new program? If not, the robot will just move along the tagets\', \'Yes\', \'No\')\n    \nelse:\n    # if we run in program generation mode just move the robot\n    MAKE_GUI_PROGRAM = False\n\n\nif MAKE_GUI_PROGRAM:\n    RDK.Render(False) # Faster if we turn render off\n    load_targets_GUI(csv_file)\nelse:\n    load_targets_move(csv_file) \n ex9: \n # This macro shows how to load a KUKA SRC file\n# PTP movements with joint coordinates and LIN movements with Cartesian information (XYZABC) will be imported as a program.\n# This macro also supports defining the tool and the base inline and changing the speed using the VEL.CP global variable\n\n## Example program:\n# DEF Milling ( )\n# \n# $BASE = {FRAME: X 0.000,Y -1000.000,Z 0.000,A 0.000,B 0.000,C 0.000}\n# $TOOL = {FRAME: X 466.604,Y -4.165,Z 109.636,A -0.000,B 90.000,C 0.000}\n# \n# $VEL.CP = 1.00000\n# \n# PTP {A1 107.78457,A2 -44.95260,A3 141.64681,A4 107.66839,A5 -87.93467,A6 6.37710}\n# LIN {X -0.000,Y -0.000,Z 6.350,A -180.000,B 0.000,C -180.000}\n# \n# $VEL.CP = 0.02117\n# LIN {X 276.225,Y 0.000,Z 6.350,A 180.000,B 0.000,C -180.000}\n# LIN {X 276.225,Y 323.850,Z 6.350,A -160.000,B 0.000,C 180.000}\n# LIN {X -0.000,Y 323.850,Z 6.350,A -180.000,B -0.000,C -180.000}\n# LIN {X -0.000,Y -0.000,Z 6.350,A -180.000,B 0.000,C -180.000}\n# $VEL.CP = 1.00000\n# LIN {X -0.000,Y -0.000,Z 106.350,A -180.000,B 0.000,C -180.000}\n# \n# END\n\n\nfrom robodk import *\nfrom robolink import *\n\n#---------------------------\n# Start the RoboDK API\nRDK = Robolink()\n\n# Ask the user to pick an SRC file:\nrdk_file_path = RDK.getParam("PATH_OPENSTATION")\nsrc_file_path = getOpenFile(rdk_file_path + "/")\nif not src_file_path:\n    print("Nothing selected")\n    quit()\n\n# Get the program name from the file path\nprogram_name = getFileName(src_file_path)\nprint("Loading program: " + program_name)\n\nif not src_file_path.lower().endswith(".src"):\n    raise Exception("Invalid file selected. Select an SRC file.")\n\ndef GetValues(line):\n    """Get all the numeric values from a line"""\n    # LIN {X 1671.189,Y -562.497,Z -243.070,A 173.363,B -8.525,C -113.306} C_DIS    \n    line = line.replace(",", " ")\n    line = line.replace("}", " ")\n    values = line.split(" ")\n\n    list_values = []\n    for value in values:\n        try:\n            value = float(value)\n        except:\n            continue\n\n        list_values.append(value)\n    \n    return list_values\n\n# Ask the user to select a robot (if more than a robot is available)    \nrobot = RDK.ItemUserPick(\'Select a robot\',ITEM_TYPE_ROBOT)\nif not robot.Valid():\n    raise Exception("Robot not selected or not valid")\n\n# Get the active reference frame\nframe = robot.getLink(ITEM_TYPE_FRAME)\nif not frame.Valid():\n    # If there is no active reference frame, use the robot base\n    frame = robot.Parent()\n\n# Get the active tool frame\ntool = robot.getLink(ITEM_TYPE_TOOL)\n\n# Add a new program\nprogram = RDK.AddProgram(program_name, robot)\n\n# Turn off rendering (faster)\nRDK.Render(False)\n\n# Speed up by not showing the instruction:\nprogram.ShowInstructions(False)\n\n# Open the file and iterate through each line\nf = open(src_file_path)\ncount = 0\nfor line in f:\n    # Remove empty characters:\n    line = line.strip()\n    print("Loading line: " + line)\n\n    # Get all the numeric values in order\n    values = GetValues(line)\n\n    # Increase the counter\n    count = count + 1\n\n    # Update TCP speed (KUKA works in m/s, RoboDK works in mm/s)\n    if line.startswith("$VEL.CP"):\n        program.setSpeed(values[0]*1000)\n        continue\n        \n    # Check operations that involve a pose\n    if len(values) < 6:\n        print("Warning! Invalid line: " + line)\n        continue\n\n    # Check what instruction we need to add:\n    if line.startswith("LIN"):\n        target = RDK.AddTarget(\'T%i\'% count, frame)\n        target.setPose(KUKA_2_Pose(values))\n        program.MoveL(target)\n\n    # Check PTP move\n    elif line.startswith("PTP"):\n        target = RDK.AddTarget(\'T%i\'% count, frame)\n        target.setAsJointTarget()\n        target.setJoints(values)\n        program.MoveJ(target)\n\n    # Set the tool\n    elif line.startswith("$TOOL"):\n        pose = KUKA_2_Pose(values)\n        tool = robot.AddTool(pose, "SRC TOOL")\n        program.setTool(tool)\n\n    # Set the reference frame\n    elif line.startswith("$BASE"):\n        frame = RDK.AddFrame("SRC BASE", robot.Parent())\n        frame.setPose(KUKA_2_Pose(values))\n        program.setFrame(frame)\n\n# Hide the targets\nprogram.ShowTargets(False)\n\n# Show the instructions\nprogram.ShowInstructions(True)\n\nRDK.ShowMessage("Done",False)\nprint("Done") \n ex10: \n # This macro shows how you can create a program that moves the robot through a set of points\n# The points are automatically created as a cube grid around a reference target\n# If a linear movement can\'t be done from one point to the next one the robot will follow a joint movement\nfrom robolink import *    # API to communicate with RoboDK\nfrom robodk import *      # basic matrix operations\nfrom random import uniform # to randomly calculate rz (rotation around the Z axis)\n\n# Name of the reference target\nREFERENCE_TARGET = \'RefTarget\'\n\n# Check for collisions\nCHECK_COLLISIONS = False\n\n#Start the RoboDK API\nRDK = Robolink()\n\n# Set collision checking ON or OFF\nRDK.setCollisionActive(COLLISION_ON if CHECK_COLLISIONS else COLLISION_OFF)\n\n# Run on robot: Force the program to run on the connected robot (same behavior as right clicking the program, then, selecting "Run on Robot")\n# RDK.setRunMode(RUNMODE_RUN_ROBOT)\n\n# Get the main/only robot in the station\nrobot = RDK.Item(\'\', ITEM_TYPE_ROBOT)\nif not robot.Valid():\n    raise Exception("Robot not valid or not available")\n\n# Get the active reference frame\nframe = robot.getLink(ITEM_TYPE_FRAME)\nif not frame.Valid():\n    frame = robot.Parent()\n    robot.setPoseFrame(frame)\n\n# Get the reference pose with respect to the robot\nframe_pose = robot.PoseFrame()\n\n# Get the active tool\ntool = robot.getLink(ITEM_TYPE_TOOL)\nif not tool.Valid():\n    tool = robot.AddTool(transl(0,0,75), "Tool Grid")\n    robot.setPoseTool(tool)\n\n# Get the target reference RefTarget\ntarget_ref = RDK.Item(REFERENCE_TARGET, ITEM_TYPE_TARGET)\nif not target_ref.Valid():\n    target_ref = RDK.AddTarget(REFERENCE_TARGET, frame, robot)\n\n# Get the reference position (pose=4x4 matrix of the target with respect to the reference frame)\npose_ref = target_ref.Pose()\nstartpoint = target_ref.Joints()\nconfig_ref = robot.JointsConfig(startpoint)\n\n# Retrieve the tool pose\ntool_pose = tool.PoseTool()\n\n# Retrieve the degrees of freedom or axes (num_dofs = 6 for a 6 axis robot)\nnum_dofs = len(robot.JointsHome().list())\n\n# Get the reference frame of the target reference\nref_frame = target_ref.Parent()\n\n# Function definition to check if 2 robot configurations are the same\n# Configurations are set as [Rear/Front,LowerArm/UpperArm,Flip/NonFlip] bits (int values)\ndef config_equal(config1, config2):\n    if config1[0] != config2[0] or config1[1] != config2[1] or config1[2] != config2[2]:\n        return False\n    return True\n\n\n# Create a new program\nprog = RDK.AddProgram(\'AutoCreated\')\n\n# This should make program generation slightly faster\n#prog.ShowInstructions(False)\n\n# Start creating the program or moving the robot:\nprogram_or_robot = prog\nprogram_or_robot.setPoseTool(tool_pose)\n\nprogram_or_robot.MoveJ(target_ref)\nlastjoints = startpoint\nrz = 0\nntargets = 0\nfor tz in range(-100, 101, 100):\n    for ty in range(0, 401, 200):\n        for tx in range(100, -5001, -250):\n            ntargets = ntargets + 1\n            # calculate a random rotation around the Z axis of the tool\n            #rz = uniform(-20*pi/180, 20*pi/180)\n                        \n            # Calculate the position of the new target: translate with respect to the robot base and rotate around the tool\n            newtarget_pose = transl(tx,ty,tz)*pose_ref*rotz(rz)\n            \n            # First, make sure the target is reachable:\n            newtarget_joints = robot.SolveIK(newtarget_pose, lastjoints, tool_pose, frame_pose)\n            if len(newtarget_joints.list()) < num_dofs:\n                print(\'...target not reachable!! Skipping target\')\n                continue\n\n            # Create a new target:\n            newtarget_name = \'Auto T%.0f,%.0f,%.0f Rz=%.1f\' % (tx,ty,tz,rz)\n            print(\'Creating target %i: %s\' % (ntargets, newtarget_name))\n            newtarget = RDK.AddTarget(newtarget_name, ref_frame, robot)\n\n            # At this point, the target is reachable.\n            # We have to check if we can do a linear move or not. We have 2 methods:\n            can_move_linear = True\n            \n            # ------------------------------\n            # Validation method 1: check the joints at the destination target\n            # and make sure we have the same configuration\n            # A quick way to validate (it may not be perfect if robot joints can move more than 1 turn)\n            # To improve this method we would have to check configurations on all possible solutions\n            # from the inverse kinematics, using SolveIK_All()\n            if False:\n                target_joints_config = robot.JointsConfig(newtarget_joints)\n                if not config_equal(config_ref, target_joints_config):\n                    # We can\'t do a linear movement\n                    can_move_linear = False\n                    print("Warning! configuration is not the same as the reference target! Linear move will not be possible")\n                    \n                    # update the reference configuration to the new one\n                    config_ref = target_joints_config\n            # -------------------------------\n\n\n\n            # -------------------------------\n            # Validation method 2: use the robot.MoveL_Test option to check if the robot can make a linear movement\n            # This method is more robust and should provide a 100% accurate result but it may take more time\n            # robot.MoveL_Test can also take collisions into account if collision checking is activated\n            issues = robot.MoveL_Test(lastjoints, newtarget_pose)\n            can_move_linear = (issues == 0)\n            # We can retrieve the final joint position by retrieving the robot joints\n            if can_move_linear:\n                newtarget_joints = robot.Joints()\n            \n            # ---------------------------------\n\n            if can_move_linear:\n                # All good, we don\'t need to modify the target.\n                # However, we could set the joints in the target as this may allow us to retrieve the robot configuration if we ever need it\n                newtarget.setAsCartesianTarget() # default behavior\n                newtarget.setJoints(newtarget_joints)\n                # It is important to have setPose after setJoints as it may recalculate the joints to match the target\n                newtarget.setPose(newtarget_pose) \n\n                # Add the linear movement\n                program_or_robot.MoveL(newtarget)\n                \n            else:\n                #print(newtarget_joints)\n                # Check if we can do a joint movement (check for collisions)\n                issues = robot.MoveJ_Test(lastjoints, newtarget_joints)\n                can_move_joints = (issues == 0)\n                if not can_move_joints:\n                    # Skip this point\n                    print("Skipping movement to: " + str(newtarget_joints))\n                    continue\n\n                # Make sure we have a joint target and a joint movement\n                newtarget.setAsJointTarget() # default behavior\n                \n                # Setting the pose for a joint target is not important unless we want to retrieve the pose later\n                # or we want to use the Cartesian coordinates for post processing\n                newtarget.setPose(newtarget_pose)\n\n                # Make sure we set the joints after the pose for a joint taget as it may recalculate the pose\n                newtarget.setJoints(newtarget_joints)\n\n                # Add the joint movement\n                program_or_robot.MoveJ(newtarget)\n\n\n            # Remember the joint poisition of the last movement\n            lastjoints = newtarget_joints\n\n# Showing the instructions at the end is faster:\nprog.ShowInstructions(True)\n\n# Hiding the targets is cleaner and more difficult to accidentaly move a target\n#prog.ShowTargets(False)\n\nprint(\'Program done with %i targets\' % ntargets) \n ex11: \n from tkinter import *\nfrom robolink import *\nimport threading    \n\n# Create a new window\nwindow = tkinter.Tk()\n\n# Close the window\ndef onClose():\n    window.destroy()\n    quit(0)\n\n# Trigger Select button\n# IMPORTANT: We need to run the action on a separate thread because\n# (otherwise, if we want to interact with RoboDK window it will freeze)\ndef on_btnSelect():\n    def thread_btnSelect():\n        # Run button action (example to select an item and display its name)\n        RDK = Robolink()\n        item = RDK.ItemUserPick(\'Select an item\')\n        if item.Valid():\n            RDK.ShowMessage("You selected the item: " + item.Name())\n        \n    threading.Thread(target=thread_btnSelect).start()\n\n# Set the window title (must be unique for the docking to work, try to be creative)\nwindow_title = \'RoboDK API Docked Window\'\nwindow.title(window_title)\n\n# Delete the window when we close it\nwindow.protocol("WM_DELETE_WINDOW", onClose)\n\n# Add a button (Select action)\nbtnSelect = Button(window, text=\'Trigger on_btnSelect\', height=5, width=60, command=on_btnSelect)\nbtnSelect.pack(fill=X)\n\n# Embed the window\nEmbedWindow(window_title)\n\n# Run the window event loop. This is like an app and will block until we close the window\nwindow.mainloop() \n ex12: \n # Start the RoboDK API\nfrom robolink import *    # RoboDK API\nRDK = Robolink()\n\n# Ask the user to select a program\nprogram = RDK.ItemUserPick(\'Select a program (make sure the program does not change the robot speed)\', ITEM_TYPE_PROGRAM)\n\n# Retrieve the robot linked to the selected program\nrobot = program.getLink(ITEM_TYPE_ROBOT)\n\n# Output the linear speed, joint speed and time (separated by tabs)\nwriteline = "Linear Speed (mm/s)\\tJoint Speed (deg/s)\\tCycle Time(s)"\nprint(writeline)\n# Prepare an HTML message we can show to the user through the RoboDK API:\nmsg_html = "<table border=1><tr><td>"+writeline.replace(\'\\t\',\'</td><td>\')+"</td></tr>"\n\nfor speed_lin in [1, 5, 10, 20, 50, 100, 200, 500]:\n    for speed_joints in [1, 5, 10, 20, 50, 100, 200, 500]:\n        # Set the robot speed\n        robot.setSpeed(speed_lin, speed_joints)\n\n        # Update the program and retrieve updated information:\n        # https://robodk.com/doc/en/PythonAPI/robolink.html#robolink.Item.Update\n        result = program.Update()\n        instructions, time, travel, ok, error = result\n\n        # Print the information\n        newline = "%.1f\\t%.1f\\t%.1f" % (speed_lin, speed_joints, time)\n        print(newline)\n        msg_html = msg_html + \'<tr><td>\' + newline.replace(\'\\t\',\'</td><td>\') + \'</td></tr>\'\n\nmsg_html = msg_html + \'</table>\'\n\nRDK.ShowMessage(msg_html) \n ex13: \n import sys # allows getting the passed argument parameters\nfrom robodk import *\nfrom robolink import *\n\nRDK = Robolink()\n\nTOOL_ID = 0\nif len(sys.argv) >= 2:\n    TOOL_ID = int(sys.argv[1])\nelse:\n    tool_str = mbox("Enter the tool number:\\n(for example, for Tool 1 set 1)", entry=\'1\')\n    if not tool_str:\n        # No input\n        quit()\n    TOOL_ID = int(tool_str)\n\n# Select a robot\nrobot = RDK.Item(\'\', ITEM_TYPE_ROBOT)\nif not robot.Valid():\n    raise Exception("Robot not available")\n\n# Create the tool name\ntool_name = \'Tool \' + str(TOOL_ID)\nprint("Using robot: " + robot.Name())\nprint("Setting tool: " + tool_name)\n\n# Select the tool\ntool = RDK.Item(tool_name, ITEM_TYPE_TOOL)\nif not tool.Valid():\n    raise Exception("Tool %s does not exist!" % tool_name)\n\n# Update the robot to use the tool\nrobot.setTool(tool)\n\nprint("Done!") \n ex14: \n from robolink import *    # RoboDK API\nfrom robodk import *      # Robot toolbox\nRDK = Robolink()\n\n# Set to True to invert the normals (flip the normals)\nFlipNormals = False\n\n# Set the type of projection\nProjectionType = PROJECTION_ALONG_NORMAL_RECALC\n# Available values include:\n#PROJECTION_NONE                = 0 # No curve projection\n#PROJECTION_CLOSEST             = 1 # The projection will be the closest point on the surface\n#PROJECTION_ALONG_NORMAL        = 2 # The projection will be done along the normal.\n#PROJECTION_ALONG_NORMAL_RECALC = 3 # The projection will be done along the normal. Furthermore, the normal will be recalculated according to the surface normal.\n#PROJECTION_CLOSEST_RECALC      = 4 # The projection will be the closest point on the surface and the normals will be recalculated\n#PROJECTION_RECALC              = 5 # The normals are recalculated according to the surface normal of the closest projection\n\n#-------------------------------------------------------------\n# Ask the user to provide the object with the features\nobject_features = RDK.ItemUserPick("Select object with the features to project (curves and/or points)", ITEM_TYPE_OBJECT)\nif not object_features.Valid():\n    quit()\n\n# Ask the user to provide the object with the surface used as a reference\nobject_surface = RDK.ItemUserPick("Select Surface Object to project features", ITEM_TYPE_OBJECT)\nif not object_surface.Valid():\n    quit()\n\n# Create a duplicate copy of the surface object\nobject_surface.Copy()\nnew_object = RDK.Paste(object_surface.Parent())\nnew_object.setName("Recalculated Normals")\nnew_object.setVisible(True)\n\n# Hide the objects used to build the new object with the desired curves\nobject_features.setVisible(False)\nobject_surface.setVisible(False)\n\n# Turn Off rendering (faster)\nRDK.Render(False)\n\n# Add all curves, projected as desired (iterate through all curves until no more curves are found)\ncurve_id = 0\nwhile True:\n    # Retrieve the curve points\n    curve_points, name_feature = object_features.GetPoints(FEATURE_CURVE, curve_id)\n    print(name_feature)\n    curve_id = curve_id + 1\n    npoints = len(curve_points)\n    if npoints == 0:\n        break\n\n    print("Adding curve %s with %i points" % (name_feature, npoints))\n    curve_points_proj = RDK.ProjectPoints(curve_points, object_surface, ProjectionType)\n\n    # Optionally flip the normals (ijk vector)\n    if FlipNormals:\n        for ci in range(len(curve_points_proj)):\n            x,y,z,i,j,k = curve_points_proj[ci]\n            curve_points_proj[ci] = [x,y,z,-i,-j,-k]\n\n    RDK.AddCurve(curve_points_proj, new_object, True, PROJECTION_NONE)\n\n# Add all points projected\npoint_list, name_feature = object_features.GetPoints(FEATURE_POINT)\nnpoints = len(point_list)\nprint("Adding %i points" % npoints)\nif npoints > 0:    \n    #RDK.AddPoints(point_list, new_object, True, PROJECTION_ALONG_NORMAL_RECALC)\n    point_list_proj = RDK.ProjectPoints(point_list, object_surface, ProjectionType)\n    RDK.AddPoints(point_list_proj, new_object, True, PROJECTION_NONE)\n    #RDK.AddCurve(curve_points, new_object, True, PROJECTION_NONE)\n\n# Set the curve width\nnew_object.setValue(\'DISPLAY\',\'LINEW=2\')\n# Set the curve color\nnew_object.setColorCurve([0.0,0.5,0.5])\n\n# Turn On rendering (Optional)\nRDK.Render(True)\nprint("Done") \n ex14: \n # Enter the size of the average filter, in number of samples.\n# If this value is set to -1 it will popup a message asking the user to enter a value\nFilterNormalSamples = -1 # in samples\n\n# Enter the distance, in mm, to filter close points.\n# For example, if we want one point each 2 mm at most, we should enter 2.\n# Set to -1 to not filter the number of points.\nFilterPointDistance = -1 # in mm\n\n# ------------------------------------------------------\n# Start the RoboDK API\nfrom robolink import *    # RoboDK API\nfrom robodk import *      # Robot toolbox\nRDK = Robolink()\n\n# Ask the user to select the object\nobj = RDK.ItemUserPick("Select the object or the tool to filter curves") # we can optionally filter by ITEM_TYPE_OBJECT or ITEM_TYPE_TOOL (not both)\n# Exit if the user selects cancel\nif not obj.Valid():\n    quit()\n\n# Ask the user to enter the filter size\nif FilterNormalSamples <= 0:\n    str_avg_filter = mbox("Enter the filter size (the number of points/normals used for the average filter).\\nFor example, if the filter size is 10 units, the 10 closest normals are used to average each individual normal.", entry="10")\n    if not str_avg_filter:\n        # The user selected cancel\n        quit()\n    # Convert the user input to an integer\n    FilterNormalSamples = int(str_avg_filter)\n    if FilterNormalSamples <=0:\n        RDK.ShowMessage("Invalid Filter value. Enter a value >= 1", False)\n        raise Exception(msg)\n\n# Iterate through all object curves, extract the curve points and average the normals\ncurve_id = 0\nobj_filtered = None\nwhile True:\n    points, name_feature = obj.GetPoints(FEATURE_CURVE, curve_id)\n    # points is a double array of float with np points and xyzijk data for each point\n    # point[np] = [x,y,z,i,j,k] # where xyz is the position and ijk is the tool orientation (Z axis, usually the normal to the surface)\n    np = len(points)\n    # when curve_id is out of bounds, an empty double array is returned\n    if np == 0 or len(points[0]) < 6:\n        break\n        \n    msg = "Filtering: " + name_feature\n    print(msg)\n    RDK.ShowMessage(msg, False)\n    curve_id = curve_id + 1\n    \n    # For each point, average the normals in the range of points [-FilterNormalSamples/2 ; +FilterNormalSamples/2] \n    new_normals = []\n    for i in range(np):\n        id_avg_from = round(max(0, i - 0.5*FilterNormalSamples))\n        id_avg_to = round(min(np-1, i + 0.5*FilterNormalSamples))\n\n        # Make sure we account for the start and end sections (navg is usually FilterNormalSamples, except near the borders)\n        n_avg = id_avg_to - id_avg_from\n        normal_i = [0,0,0]\n        for j in range(id_avg_from, id_avg_to):\n            ni = points[j][3:6]\n            normal_i = add3(normal_i, ni)\n\n        # Divide the object\n        normal_i = mult3(normal_i, 1.0/n_avg)\n        \n        # Add the new normal to the list\n        new_normals.append(normal_i)\n\n    # Combine the normals with the list of points\n    for i in range(np):\n        points[i][3:6] = new_normals[i][0:3]\n\n    # Filter points, if desired\n    if FilterPointDistance > 0:\n        lastp = None\n        points_filtered = []\n        points_filtered.append(points[0])\n        lastp = points[0]\n\n        for i in range(1,np):\n            if distance(lastp, points[i]) > FilterPointDistance:\n                points_filtered.append(points[i])\n                lastp = points[i]\n                \n        points = points_filtered\n\n    # For the first curve: create a new object, rename it and place it in the same location of the original object\n    if obj_filtered is None:\n        obj_filtered = RDK.AddCurve(points, 0, False, PROJECTION_NONE)\n        obj_filtered.setName(obj.Name() + " Filtered")\n        obj_filtered.setParent(obj.Parent())\n        obj_filtered.setGeometryPose(obj_filtered.GeometryPose())\n\n    else:\n        # After the first curve has been added, add following curves to the same object\n        RDK.AddCurve(points, obj_filtered, True, PROJECTION_NONE)\n\n# Set the curve display width\nobj_filtered.setValue(\'DISPLAY\',\'LINEW=2\')\n# Set the curve color as RGBA values [0-1.0]\nobj_filtered.setColorCurve([0.0,0.5,1.0, 0.8]) \n ex15: \n # This macro allows moving a robot using the keyboard\n# Note: This works on console mode only, you must run the PY file separately\n#\n# More information about the RoboDK API here:\n# https://robodk.com/doc/en/RoboDK-API.html\n# Type help("robolink") or help("robodk") for more information\n\nfrom robolink import *    # API to communicate with RoboDK\nfrom robodk import *      # basic matrix operations\nRDK = Robolink()\n\n# Arrow keys program example\n\n# get a robot\nrobot = RDK.Item(\'\', ITEM_TYPE_ROBOT)\nif not robot.Valid():\n    print("No robot in the station. Load a robot first, then run this program.")\n    pause(5)\n    raise Exception("No robot in the station!")\n\nprint(\'Using robot: %s\' % robot.Name())\nprint(\'Use the arrows (left, right, up, down), Q and A keys to move the robot\')\nprint(\'Note: This works on console mode only, you must run the PY file separately\')\n\n# define the move increment\nmove_speed = 10\n\nfrom msvcrt import getch\nwhile True:\n    key = (ord(getch()))\n    move_direction = [0,0,0]\n    # print(key)\n    if key == 75:\n        print(\'arrow left (Y-)\')\n        move_direction = [0,-1,0]\n    elif key == 77:\n        print(\'arrow right (Y+)\')\n        move_direction = [0,1,0]\n    elif key == 72:\n        print(\'arrow up (X-)\')\n        move_direction = [-1,0,0]\n    elif key == 80:\n        print(\'arrow down (X+)\')\n        move_direction = [1,0,0]\n    elif key == 113:\n        print(\'Q (Z+)\')\n        move_direction = [0,0,1]\n    elif key == 97:\n        print(\'A (Z-)\')\n        move_direction = [0,0,-1]\n\n    # make sure that a movement direction is specified\n    if norm(move_direction) <= 0:\n        continue\n\n    # calculate the movement in mm according to the movement speed\n    xyz_move = mult3(move_direction, move_speed)\n\n    # get the robot joints\n    robot_joints = robot.Joints()\n\n    # get the robot position from the joints (calculate forward kinematics)\n    robot_position = robot.SolveFK(robot_joints)\n\n    # get the robot configuration (robot joint state)\n    robot_config = robot.JointsConfig(robot_joints)\n\n    # calculate the new robot position\n    new_robot_position = transl(xyz_move)*robot_position\n\n    # calculate the new robot joints\n    new_robot_joints = robot.SolveIK(new_robot_position)\n    if len(new_robot_joints.tolist()) < 6:\n        print("No robot solution!! The new position is too far, out of reach or close to a singularity")\n        continue\n\n    # calculate the robot configuration for the new joints\n    new_robot_config = robot.JointsConfig(new_robot_joints)\n\n    if robot_config[0] != new_robot_config[0] or robot_config[1] != new_robot_config[1] or robot_config[2] != new_robot_config[2]:\n        print("Warning!! Robot configuration changed!! This will lead to unextected movements!")\n        print(robot_config)\n        print(new_robot_config)\n\n    # move the robot joints to the new position\n    robot.MoveJ(new_robot_joints)\n    #robot.MoveL(new_robot_joints) \n ex15: \n from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming\nfrom robodk import *      # Robotics toolbox for industrial robots\n\n# Start RoboDK API\nRDK = Robolink()\n\n# gather all robots as item objects\nrobots = RDK.ItemList(ITEM_TYPE_ROBOT, False)\n\n# loop through all the robots and connect to the robot\nerrors = \'\'\ncount = 0\nfor robot in robots:\n    count = count + 1\n    \n    # force disconnect from all robots by simulating a double click\n    #if count == 0:\n    #    robot.Disconnect()\n    #    robot.Disconnect()\n    #    pause(1)\n    \n    # Important, each robot needs a new API connection to allow moving them separately in different threads (if required)\n    rdk = Robolink()\n    robot.link = rdk\n    \n    # Force simulation mode in case we are already connected to the robot. \n    # Then, gather the joint position of the robots.\n    # This will gather the position of the simulated robot instead of the real robot.\n    rdk.setRunMode(RUNMODE_SIMULATE)\n    jnts = robot.Joints()\n        \n    # connect to the robot:\n    # rdk.setRunMode(RUNMODE_RUN_ROBOT) # not needed because connect will automatically do it\n    # state = robot.ConnectSafe()\n    state = robot.Connect()\n    print(state)   \n    \n    # Check the connection status and message\n    state, msg = robot.ConnectedState()\n    print(state)\n    print(msg)\n    if state != ROBOTCOM_READY:\n        errors = errors + \'Problems connecting: \' + robot.Name() + \': \' + msg + \'\\n\'\n    else:\n        # move to the joint position in the simulator:\n        robot.MoveJ(jnts, False)\n\n# Display connection errors, if any\nif len(errors) > 0:\n    print(errors)\n    raise Exception(errors)\nelse:\n    quit(0) \n ex16: \n # This macro will save a time stamp and robot joints each 50 ms\nfrom robolink import *    # API to communicate with RoboDK for simulation and offline/online programming\nfrom robodk import *      # Robotics toolbox for industrial robots\nRDK = Robolink()\n\nrobot = RDK.Item(\'\',ITEM_TYPE_ROBOT)\n\nif not robot.Valid():\n    raise Exception("Robot is not available")\n\nfile_path = RDK.getParam(\'PATH_OPENSTATION\') + \'/joints.txt\'\n\nfid = open(file_path,\'w\')\ntic()\nwhile True:\n    time = toc()\n    print(\'Current time (s):\' + str(time))\n    joints = str(robot.Joints().tolist())\n    fid.write(str(time) + \', \' + joints[1:-1] + \'\\n\')\n    pause(0.05)\n\nfid.close() \n ex17: \n from robolink import *    # API to communicate with RoboDK for offline/online programming\nfrom robodk import *      # Robotics toolbox for industrial robots\n\nimport threading\nimport queue\n\n#----------------------------------------------\n# Function definitions and global variable declarations\n\n# Global variables used to synchronize the robot movements\n# These variables are managed by SyncSet() and SynchWait()\n\nSYNC_COUNT = 0\nSYNC_TOTAL = 0\nSYNC_ID = 0\nlock = threading.Lock()\n\ndef SyncSet(total_sync):\n    """SyncSet will set the number of total robot programs (threads) that must be synchronized togeter.\n    Every time SyncSet is called SYNC_ID is increased by one."""\n    global SYNC_COUNT\n    global SYNC_TOTAL\n    global SYNC_ID    \n    with lock:\n        SYNC_COUNT = 0\n        SYNC_TOTAL = total_sync\n        SYNC_ID = SYNC_ID + 1\n        #print(\'SyncSet\')\n\ndef SyncWait():\n    """SyncWait will block the robot movements for a robot when necessary, synchronizing the movements sequentially.\n    Use SyncSet(nrobots) to define how many robots must be synchronized together."""\n    global SYNC_COUNT\n    # Save a local variable with the sync event id\n    sync_id = SYNC_ID\n    with lock:\n        # Increase the number of threads that are synchronized\n        SYNC_COUNT += 1\n\n    # Move to the next sync event if all threads reached the SyncWait (SYNC_COUNT = SYNC_TOTAL)\n    if SYNC_COUNT >= SYNC_TOTAL:\n        SyncSet(SYNC_TOTAL)\n        return\n\n    # Wait for a SynchSet to move forward\n    while sync_id >= SYNC_ID:\n        time.sleep(0.0001)\n\n\n# Main procedure to move each robot   \ndef DoWeld(q, robotname):\n    # Any interaction with RoboDK must be done through Robolink()\n    # Each robot movement requires a new Robolink() object (new link of communication).\n    # Two robots can\'t be moved by the same communication link.\n    \n    rdk = Robolink()\n\n    # get the robot item:\n    robot = rdk.Item(robotname)\n\n    # get the home joints target\n    home = robot.JointsHome()\n\n    # get the reference welding target:\n    target = rdk.Item(\'Target\')\n\n    # get the reference frame and set it to the robot\n    reference = target.Parent()\n    robot.setPoseFrame(reference)\n\n    # get the pose of the target (4x4 matrix):\n    poseref = target.Pose()\n    pose_approach = poseref*transl(0,0,-100)\n\n    # move the robot to home, then to the center:\n    robot.MoveJ(home)\n    robot.MoveJ(pose_approach)\n    SyncWait()\n    robot.MoveL(target)\n\n    # make an hexagon around the center:\n    for i in range(7):\n        ang = i*2*pi/6 #angle: 0, 60, 120, ...\n        posei = poseref*rotz(ang)*transl(200,0,0)*rotz(-ang)\n        SyncWait()\n        robot.MoveL(posei)\n\n    # move back to the center, then home:\n    SyncWait()\n    robot.MoveL(target)\n    robot.MoveL(pose_approach)\n    robot.MoveJ(home)\n    q.put(\'Robot %s finished\' % robotname)\n\n#----------------------------------------\n# Python program start \n    \n# retrieve all available robots in the RoboDK station (as a list of names)\nRDK = Robolink()\nrobots = RDK.ItemList(ITEM_TYPE_ROBOT)\nprint(robots)\n\n# retrieve the number of robots to synchronize together\nnrobots = len(robots)\nSyncSet(nrobots)\n\n# the queue allows sharing messages between threads\nq = queue.Queue()\n\n# Start the DoWeld program for all robots. Each robot will run on a separate thread.\nthreads = []\nfor i in range(nrobots):\n    robotname = robots[i]\n    t = threading.Thread(target=DoWeld, args = (q, robotname))\n    t.daemon = True\n    t.start()\n    threads.append(t)\n\n# wait for every thead to finish\nfor x in threads:\n    x.join()\n    print(q.get())\n\nprint(\'Main program finished\') \n ex18: \n from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming\nfrom robodk import *      # Robotics toolbox for industrial robots\n\n#----------------------------------------------\n# Function definitions\n\ndef FK_Robot(dh_table, joints):\n    """Computes the forward kinematics of the robot.\n    dh_table must be in mm and radians, the joints array must be given in degrees."""\n    Habs = []\n    Hrel = []    \n    nlinks = len(dh_table)\n    HiAbs = eye(4)\n    for i in range(nlinks):\n        [rz,tx,tz,rx] = dh_table[i]\n        rz = rz + joints[i]*pi/180\n        Hi = dh(rz,tx,tz,rx)\n        HiAbs = HiAbs*Hi\n        Hrel.append(Hi)\n        Habs.append(HiAbs)\n\n    return [HiAbs, Habs, Hrel]\n\ndef Frames_setup_absolute(frameparent, nframes):\n    """Adds nframes reference frames to frameparent"""\n    frames = []\n    for i in range(nframes):\n        newframe = frameparent.RDK().AddFrame(\'frame %i\' % (i+1), frameparent)\n        newframe.setPose(transl(0,0,100*i))\n        frames.append(newframe)\n\n    return frames\n\ndef Frames_setup_relative(frameparent, nframes):\n    """Adds nframes reference frames cascaded to frameparent"""\n    frames = []\n    parent = frameparent\n    for i in range(nframes):\n        newframe = frameparent.RDK().AddFrame(\'frame %i\' % (i+1), parent)\n        parent = newframe\n        newframe.setPose(transl(0,0,100))\n        frames.append(newframe)\n\n    return frames\n\ndef Set_Items_Pose(itemlist, poselist):\n    """Sets the pose (3D position) of each item in itemlist"""\n    for item, pose in zip(itemlist,poselist):\n        item.setPose(pose)\n\ndef are_equal(j1, j2):\n    """Returns True if j1 and j2 are equal, False otherwise"""\n    if j1 is None or j2 is None:\n        return False\n    sum_diffs_abs = sum(abs(a - b) for a, b in zip(j1, j2))\n    if sum_diffs_abs > 1e-3:\n        return False\n    return True\n        \n#----------------------------------------------------------\n# The program starts here:\nRDK = Robolink()        \n        \n#-----------------------------------------------------\n# DH table of the robot: ABB IRB 120-3/0.6\nDH_Table = []\n#                 rZ (theta),   tX,   tZ,   rX (alpha)\nDH_Table.append([          0,    0,  290,  -90*pi/180])\nDH_Table.append([ -90*pi/180,  270,    0,           0])\nDH_Table.append([          0,   70,    0,  -90*pi/180])\nDH_Table.append([          0,    0,  302,   90*pi/180])\nDH_Table.append([          0,    0,    0,  -90*pi/180])\nDH_Table.append([ 180*pi/180,    0,   72,           0])\n\n# degrees of freedom: (6 for ABB IRB 120-3/0.6)\nDOFs = len(DH_Table)\n\n# get the robot:\nrobot = RDK.Item(\'ABB IRB 120-3/0.6\')\n\n# cleanup of all items containing "Mirror tests" from previous tests\nwhile True:\n    todelete = RDK.Item(\'Robot base\')\n    # make sure an item was found\n    if not todelete.Valid():\n        break\n    # delete only frames\n    if todelete.Type() == ITEM_TYPE_FRAME:\n        print(\'Deleting: \' + todelete.Name())\n        todelete.Delete()\n\n# setup the parent frames for the test:\nparent_frameabs = RDK.AddFrame(\'Robot base (absolute frames)\')\nparent_framerel = RDK.AddFrame(\'Robot base (relative frames)\')\n\n# setup the child frames for the test:\nframes_abs = Frames_setup_absolute(parent_frameabs, DOFs)\nframes_rel = Frames_setup_relative(parent_framerel, DOFs)\n\n# remember the last robot joints to update when necessary\nlast_joints = None\n\n# infinite loop\nwhile True:\n    # get the current robot joints as a float array (list)\n    joints = robot.Joints().tolist()\n\n    # do not update if joints are the same as before\n    if are_equal(joints, last_joints):\n        continue\n\n    # if joints changed, compute the forward kinematics for this position\n    [Hrobot, HabsList, HrelList] = FK_Robot(DH_Table, joints)\n\n    # turn off rendering while we update all frames:\n    RDK.Render(False)\n    # update all frames\n    Set_Items_Pose(frames_abs, HabsList)\n    Set_Items_Pose(frames_rel, HrelList)\n    \n    # render and turn on rendering\n    RDK.Render(True)\n\n    # remember the last robot joints\n    last_joints = joints\n\n    print(\'Current robot joints:\')    \n    print(joints)\n    print(\'Pose of the robot (forward kinematics):\')\n    print(Hrobot)\n    print(\'\\n\\n\') \n camera example: \n #!/usr/local/bin/python3\n\'\'\'\nhttps://robodk.com/forum/Thread-Camera-Recorder-Script-APP\nIts simple to use, just paste the .py file in the Robodk´s script folder or in the new Robodk´s Apps folder -->C:\\RoboDK\\Apps\\Camera_Recorder\n\nExecute the program and it will be prompt you for a reference for the camera, in the next step the seconds you want to record... hit OK.\n\nThe output file will be saved in the desktop folder.\n\n\'\'\'\n\nimport cv2 #if is not installed in your system run in terminal " pip install opencv-python "\nimport os\nimport datetime\nimport tempfile\nimport shutil\nimport robodk   # import the robodk library (robotics toolbox)\nfrom robolink import *    # API to communicate with RoboDK\n\nRDK = Robolink()\n\nRDK.Cam2D_Close() #close any Camera on Robodk\ntempfile.TemporaryDirectory()\nsimulation_speed = RDK.SimulationSpeed()\n\n#Video Configuration (Slow(480p)=640x480@30FPS - Medium(720p)=1280x720@60FPS - High(1080p)=1920x1080@60FPS )  \nwidth = 1920\nheight = 1080\nframes_per_second = 60 #in frames per second FPS\n\n# Retrieve the camera reference frame\nRDK.setSelection([])\ncamref = RDK.ItemUserPick(\'Select a reference frame for the Camera Record\', ITEM_TYPE_FRAME)\nif not camref.Valid():\n    RDK.ShowMessage(\'No valid Reference frame\')\n    quit(0)    \n\n#Time to Record Question\n\ndef time_question(title_msg, show_value, expected_values):\n    if type(show_value) == Mat:\n        show_value = show_value.tolist()\n    answer = mbox(title_msg, entry=str(show_value))\n    if answer is False:\n        print(\'Operation cancelled by user\')\n        RDK.Cam2D_Close()\n        quit(0)\n    try:\n        answer = int(answer) \n    except:\n        print(\'Bad time number\')\n        RDK.Cam2D_Close()\n        RDK.ShowMessage("Not a valid time number")\n        quit(0)\n    else:        \n        time = answer\n        return time\n    \ntime_record = time_question("Enter the time to record in seconds", 10 , 20)\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=5 FOV=30 FAR_LENGHT=10000 SIZE=\' + str(width) + "x" + str(height))\npause(1)\n# Auxiliary items & operations\ndate_str = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")\ndir_path = tempfile.gettempdir() + \'\\Record_\' + date_str \nout_path = RDK.getParam(\'PATH_DESKTOP\')\nframe_rate = 1 / int(frames_per_second)\nn_photos = frames_per_second * int(time_record) \ncounter = 0\nimages = []\n\n# Creating the working folder\nif not os.path.exists(dir_path):\n    os.makedirs(dir_path)\n           \n# Image Capture Loop\nwhile counter < n_photos:\n    counter = counter +1\n    RDK.setSimulationSpeed(0.001)\n    file_name = dir_path + "/Image_" + str(counter) + ".png"\n    images.append(file_name)\n    RDK.Cam2D_Snapshot(file_name)\n    print("Saving camera snapshot to the file:" + file_name) \n    RDK.setSimulationSpeed(1)\n    pause(frame_rate)\n\n# Define the codec and create VideoWriter object \nfourcc = cv2.VideoWriter_fourcc(*\'XVID\') # Choose the codec (mp4v, XVID or DIVX)\noutput = out_path + "/" + date_str + ".avi" # ".mp4" for mp4v.... ".avi" for XVID and DIVX\nout = cv2.VideoWriter(output, fourcc, frames_per_second, (width, height))\n\n# Compose the video with the images and the parameters \nfor image in images:\n    image_path = os.path.join(dir_path, image)\n    frame = cv2.imread(image_path)\n    out.write(frame) # Write out frame to video\n    cv2.imshow(\'video\',frame)\n\n# Release everything if job is finished\nout.release()\ncv2.destroyAllWindows()\n\nmsg_str = "The output video is in " + out_path + format(output)\nprint(msg_str)\nRDK.Cam2D_Close()\nRDK.ShowMessage(msg_str)\n\n#Delete de trash (folder&files)\nshutil.rmtree(dir_path, ignore_errors=True)\n \n camex: \n from robolink import *    # API to communicate with RoboDK\nfrom robodk import *      # library for basic matrix operations\nRDK = Robolink()\n\n# Close any open 2D camera views\nRDK.Cam2D_Close()\n\ncamref = RDK.ItemUserPick(\'Select the Camera location (reference, tool or object)\')\n#camref = RDK.Item(\'Frame 7\',ITEM_TYPE_FRAME)\n\n# Set parameters in mm and degrees:\n#  FOV: Field of view in degrees (atan(0.5*height/distance) of the sensor\n#  FOCAL_LENGHT: focal lenght in mm\n#  FAR_LENGHT: maximum working distance (in mm)\n#  SIZE: size of the window in pixels (fixed) (width x height)\n#  SNAPSHOT: size of the snapshot image in pixels (width x height)\n#  BG_COLOR: background color (rgb color or named color: AARRGGBB)\n#  LIGHT_AMBIENT: ambient color (rgb color or named color: AARRGGBB)\n#  LIGHT_SPECULAR: specular color (rgb color or named color: AARRGGBB)\n#  LIGHT_DIFFUSE: diffuse color (rgb color or named color: AARRGGBB)\n#  DEPTH: Add this flag to create a 32 bit depth map (white=close, black=far)\n#  NO_TASKBAR: Don\'t add the window to the task bar\n#  MINIMIZED: Show the window minimized\n#  ALWAYS_VISIBLE: Keep the window on top of all other windows\n#  SHADER_VERTEX: File to a vertex shader (GLSL file)\n#  SHADER_FRAGMENT: File to a fragment shader (GLSL file)\n\n# Examples to call Camd2D_Add:\n\n# Camera without a fixed window size and 1000 mm length\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000\')\n\n# Camera with a fixed window size and 1000 mm length\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480\')\n\n# Camera with a black background\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 BG_COLOR=black\')\n\n# Camera without a fixed window size and high resolution snapshot\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480\')\n\n# Depth view: 32 bit depth map (white=close, black=far)\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 DEPTH\')\n\n# Minimized camera\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 MINIMIZED\')\n\n# Do not show the camera window in the taskbar\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 NO_TASKBAR\')\n\n# Customize the light\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 BG_COLOR=black LIGHT_AMBIENT=red LIGHT_DIFFUSE=#FF00FF00 LIGHT_SPECULAR=black\')\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=600 SIZE=640x480 BG_COLOR=black LIGHT_AMBIENT=red LIGHT_DIFFUSE=black LIGHT_SPECULAR=white\')\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=1000 SIZE=640x480 LIGHT_AMBIENT=red\')\n\n# Provoke a popup and allow the user to enter some parameters\ncam_id = RDK.Cam2D_Add(camref, \'POPUP\')\n\n# Example to take a snapshot from the camera\nRDK.Cam2D_Snapshot(RDK.getParam(\'PATH_OPENSTATION\') + "/sample_image.png", cam_id)\n\n# Special command to retrieve the window ID:\nwin_id = RDK.Command("CamWinID", str(cam_id))\n# print(str(win_id))\n\n#-----------------------------------------------------------------------------------\n# Example to use a customized shader to customize the effect of light\n# Tip: Use the example: C:/RoboDK/Library/Example-Shader-Customized-Light.rdk\n# Tip: If you need a fixed light source update the variable light_Position in the shader_fragment.glsl file\n\n# Get the path to the RoboDK library (usually in C:/RoboDK/Library/)\npath_library = RDK.getParam("PATH_LIBRARY")\nfile_shader_fragment = path_library + \'/Macros/Camera-Shaders/shader_fragment.glsl\'\nfile_shader_vertex = path_library + \'/Macros/Camera-Shaders/shader_vertex.glsl\'\ncam_id = RDK.Cam2D_Add(camref, \'FOCAL_LENGHT=6 FOV=32 FAR_LENGHT=2500 SHADER_FRAGMENT=\' + file_shader_fragment + \' SHADER_VERTEX=\' + file_shader_vertex) \n', 'tags': '', 'url': 'RoboDK.html'}, {'title': '分組專題', 'text': 'Solvespace 3D 參數設計繪圖建立零組件 ( Solvespace  編譯與 應用 ): \n \n 轉入  CoppeliaSim  組合為機電系統 ( STL 零件格式 ,  STL file format ,  STL viewer in Tkinter and Pygame.7z ,  STL-3D-Rasterer_pygame_opengl.7z ,  ADMesh ) \n 利用 Lua script 進行 Kinematic and Dynamic 控制 ( CoppeliaSim ,  XML 格式 ) \n 利用 Python remote API 進行 Kinematic and Dynamic 控制 ( UR5_ik_coppeliaSim.7z ) \n 利用  Ubuntu  建立 Web based server 進行機電資系統控制 ( uwsgi,   nginx ,  stunnel ) \n 利用  Ubuntu  建立 Fossil SCM 分散式版次控制系統 ( Git ,  Fossil SCM ,  Heroku  and  CMSiMDE ) \n \n Solvespace 編譯: \n 利用 MSYS2 編譯 Solvespace, 需要 install cmake pacman -S mingw-w64-x86_64-cmake 而且必須 rename Y:\\msys64\\usr\\bin\\sh.exe 換成其他名稱. cd solvespace mkdir build cd build cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release make need libwinpthread-1.dll to execute solvespace.exe 上述 流程影片 編譯時間約需 19 分鐘, 完成的  solvespace 可執行檔案下載 \n 以 Msys2 編譯 Solvespace: \n \n 根據 svg 檔案資料, 以 Python 驅動機械手臂繪圖.  ABB-IRB-4600-20-2.50_draw.7z \n \n 利用 Python 程式控制 robot 執行 Pick and Place.  pick_and_place.7z \n \n \n 以網際內容管理系統整理自動控制系統設計流程: \n Controller design for magnetic levitation system.pdf  (以  Coppeliasim  或  Webots  實現) \n https://github.com/mdecourse/vrep_inverted_pendulum \n https://github.com/mdecourse/RobotSimulator \n https://ctmakro.github.io/site/on_learning/rl/vrep.html \n https://medium.com/pytorch/robotic-assembly-using-deep-reinforcement-learning-dfd9916c5ad7 \n https://www.toptal.com/deep-learning/pytorch-reinforcement-learning-tutorial \n', 'tags': '', 'url': '分組專題.html'}, {'title': 'Topic 0', 'text': '網際內容管理程式練習題目: \n \n 學習如何解讀帶有  AJAX  程式架構的網際伺服器內容 \n 學習如何利用 Python  requests  中的 post 方法, 向伺服器送出表單資料 \n 學習如何利用  bs4  解讀  HTML  檔案 \n 學習如何利用 Python 程式執行操作系統指令 ( os Module ) \n 學習如何將網際程式伺服至  Heroku  雲端主機 \n \n 2021 Spring 的網際內容管理課程將從學校的課程主機中擷取資料開始: \n 學校的課程相關主機為:  https://qry.nfu.edu.tw/ \n 其中包括 \n 查詢各班課表用:  https://qry.nfu.edu.tw/class.php \n 查詢教師課表:  https://qry.nfu.edu.tw/teacher.php \n 查詢教室課表:  https://qry.nfu.edu.tw/classroom.php \n 查詢課程:  https://qry.nfu.edu.tw/classname.php \n 查詢班級名條:  https://qry.nfu.edu.tw/classlist.php \n 而與學校排課相關的專案. \n https://github.com/mdecourse/GeneticAlgorithmUniversityClassScheduler \n 2018_UNIVERSITY TIMETABLE SCHEDULING USING METAHEURISTIC ADAPTIVE-ELITIST GENETIC ALGORITHM.pdf \n Beginning PyQt - 2020 ebook.pdf \n 以下則為可用來擷取課程主機的參考程式碼: \n class.php  網頁原始碼中 AJAX 程式段: \n \n 在 class.php 頁面以表單選擇四技設一甲後進行查詢, 所得超文件中, 以 網頁開發者 中的 檢測器 可以查得所傳回的 table class 名稱為 tbcls: \n \n 取得四技設一甲 2021 Spring 班級課表, 存為 html 後以內定瀏覽器開啟: \n import requests\nimport bs4\n# for os.environ and os.system()\nimport os\n# for geting html file path\nimport pathlib\n\n# for pythn 3.9\nproxy = \'http://[2001:288:6004:17::69]:3128\'\n\nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n\n\'\'\'\nurl:  \'class_ajax.php\',\ndata: { pselyr: pselyr, pselclss: pselclss\n\'\'\'\nsemester = \'1092\'\nclassno = \'42311\'\ncolumn = True\n\nif semester == None:\n    semester = \'1091\'\nif classno == None:\n    # 42311 is 設一甲\n    classno = \'42311\'\n    \nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n\nurl = \'https://qry.nfu.edu.tw/class_ajax.php\'\npost_var = {\'pselyr\': semester, \'pselclss\': classno}\n\nresult = requests.post(url, data = post_var, headers = headers)\n\nsoup = bs4.BeautifulSoup(result.content, \'lxml\')\n\n# 先除掉所有 anchor\nfor a in soup.findAll(\'a\'):\n    # bs3 語法\n    #a.replaceWithChildren()\n    # bs4 語法, 將標註與內容拆開\n    a.unwrap()\n\n# 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料\ntable = soup.find(\'table\', {\'class\': \'tbcls\'})\n\n# 重建 table, 設定邊線為 1 pixel\noutput = "<table border=\'1\'>"\n\nfor i in table.contents:\n    # 利用 replace 復原 \xa0\n    output += str(i).replace("&amp;nbsp", "\xa0")\noutput += "</table>"\n# print(output)\n# 將 output 寫入 w1_class_local.html\nwith open("w1_class_local.html", "w", encoding="utf-8") as file:\n    file.write(output)\n# 利用 os.system() 以 default browser 開啟 w1_class_local.html\nfilePath = pathlib.Path(__file__).parent.absolute()\n#print(filePath)\n# set firefox as default browser and start url to open html file\nos.system("start file:///" + str(filePath) + "\\\\w1_class_local.html")\n \n 2021 Spring GDrive 下載區  (for @gm users only) \n kmol2021_spring_v1  只安裝 Python 3.9, Git, Putty, ShareX 與 processexplorer \n kmol2021_spring_v2  則安裝 Python 3.9, Git, Putty, ShareX 與 processexplorer 外, Python 又加裝 flask, flask_cors, bs4, lxml, pelican, markdown, leo \n 升級可攜隨身程式系統與其他工具的主要目的, 在確保先前的使用模式與所開發的程式碼, 可以在最新的環境中執行. \n 但是目前 Python 3.9 仍 無法 執行 Tensorflow 2.0, 因此若需使用 Tensorflow 2.0 必須退回 Python 3.8.5 環境. \n 主題: \n https://github.com/mdecourse/nfulist/discussions/2 \n 根據  https://qry.nfu.edu.tw/class.php \n 班級課表查詢程式: \n w1_class_local.py \n <script type="text/javascript">\n$(function(){\n\t$("#bt_qry").click(function(){\n\tpselyr=$("#selyr").val();\n\tpselclss=$(\'#selclss\').val();\n\t\tif(pselyr.length!=1 && pselclss.length!=1)\n\t\t{\n\t\t\t$.blockUI({\n\t\t\t\tmessage: $(\'<div id="loading" style="display: none;">處理中...</div>\'),\n\t\t\t\tcss: {\n\t\t\t\t\t\tborder: \'none\',\n\t\t\t\t\t\tpadding: \'10px\',\n\t\t\t\t\t\t\'font-size\': \'16px\'\n\t\t\t\t}\n\t\t\t});\n\t\t\t$.ajax({\n\t\t\t\ttype: "POST", //post,get\n\t\t\t\tdataType: "html",\n\t\t\t\tcache: false, //關閉ajax緩衝區\n\t\t\t\turl:  \'class_ajax.php\',\n\t\t\t\tdata: { pselyr: pselyr, pselclss: pselclss },\n\t\t\t\tsuccess: function(response){\n\t\t\t\t\t$("#div_output").html(response);\n\t\t\t\t\t//alert(response);\n\t\t\t\t\t//$("#myParentSelect").trigger(\'change\');\n\t\t\t\t$.unblockUI();\n\t\t\t\t}\n\t\t\t})\n\t\t}else{\n\t\t\talert("請選擇學年/學期或班級代號！");\n\t\t}\n\t});\n});\n</script> \n 選單參數與對應值 \n selyr\n\n<option value="1092" selected>109學年度第2學期</option>\n<option value="1091" >109學年度第1學期</option>\n<option value="1083" >108學年度第3學期</option>\n<option value="1082" >108學年度第2學期</option>\n\nselclss\n\n<option value="42310" >42310四設計一訓</option>\n<option value="42311" >42311四設計一甲</option>\n<option value="42312" >42312四設計一乙</option>\n<option value="42319" >42319四設計一攜</option>\n<option value="42320" >42320四設計二訓</option>\n<option value="42321" >42321四設計二甲</option>\n<option value="42322" >42322四設計二乙</option>\n<option value="42329" >42329四設計二攜</option>\n<option value="42330" >42330四設計三訓</option>\n<option value="42331" >42331四設計三甲</option>\n<option value="42332" >42332四設計三乙</option>\n<option value="42339" >42339四設計三攜</option>\n<option value="42340" >42340四設計四訓</option>\n<option value="42341" >42341四設計四甲</option>\n<option value="42342" >42342四設計四乙</option>\n<option value="42349" >42349四設計四攜</option> \n ajax 透過 post 送出對應變數值 \n url:  \'class_ajax.php\',\ndata: { pselyr: pselyr, pselclss: pselclss }, \n 利用 Python requests 以 post 送出查詢變數後取回查詢結果: \n 以下為綜一館八樓電腦輔助設計室 2021 Spring 排課表, 程式取回資料後存為 html 後以內定的瀏覽器開啟: \n w1_classroom_local.py \n import requests\nimport bs4\n# for os.environ and os.system\nimport os\n# for geting html file path\nimport pathlib\n\n# for pythn 3.9\nproxy = \'http://[2001:288:6004:17::69]:3128\'\n\nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n\n\'\'\'\nurl:  \'jclassroom_ajax.php\',\ndata: { pselyr: pselyr, pselclssroom: pselclssroom },\n\'\'\'\nsemester = \'1092\'\nclassroomno = \'BGA0810\'\ncolumn = True\n\nif semester == None:\n    semester = \'1092\'\nif classroomno == None:\n    # BGA0810 電腦輔助設計室\n    classroomno = \'BGA0810\'\n    \nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n\nurl = \'https://qry.nfu.edu.tw/jclassroom_ajax.php\'\npost_var = {\'pselyr\': semester, \'pselclssroom\': classroomno}\n\nresult = requests.post(url, data = post_var, headers = headers)\n\nsoup = bs4.BeautifulSoup(result.content, \'lxml\')\n\n# 先除掉所有 anchor\nfor a in soup.findAll(\'a\'):\n    # bs3 語法\n    #a.replaceWithChildren()\n    # bs4 語法, 將標註與內容拆開\n    a.unwrap()\n\n# 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料\ntable = soup.find(\'table\', {\'class\': \'tbcls\'})\n\n# 重建 table, 設定邊線為 1 pixel\noutput = "<table border=\'1\'>"\n\nfor i in table.contents:\n    # 利用 replace 復原 \xa0\n    output += str(i).replace("&amp;nbsp", "\xa0")\noutput += "</table>"\n#print(output)\n\n# 將 output 寫入 w1_classroom.html\nfileName = "w1_classroom.html"\nwith open(fileName, "w", encoding="utf-8") as file:\n    file.write(output)\n# 利用 os.system() 以 default browser 開啟 w1_class_local.html\nfilePath = pathlib.Path(__file__).parent.absolute()\n#print(filePath)\n# set firefox as default browser and start url to open html file\nos.system("start file:///" + str(filePath) + "\\\\" + fileName)\n\n \n 若根據  https://qry.nfu.edu.tw/jclassroom.php \n 與 \n <option value="BGA0611" >BGA0611 (研討室(三)_綜合工程一館 6F)</option>\n<option value="BGA0620" >BGA0620 (動態系統實驗室_綜合工程一館 6F)</option>\n<option value="BGA0640" >BGA0640 (創意設計室_綜合工程一館 6F)</option>\n<option value="BGA0710" >BGA0710 (研討室(二)_綜合工程一館 7F)</option>\n<option value="BGA0730" >BGA0730 (研討室(一)_綜合工程一館 7F)</option>\n<option value="BGA0760" >BGA0760 (逆向快速成型實驗室_綜合工程一館 7F)</option>\n<option value="BGA0810" >BGA0810 (電腦輔助設計室_綜合工程一館 8F)</option>\n<option value="BGA0820" >BGA0820 (智慧感測與致動實驗室_綜合工程一館 8F)</option>\n<option value="BGA0823" >BGA0823 (新產品創意設計中心_綜合工程一館 8F)</option>\n<option value="BGA0830" >BGA0830 (電腦輔助繪圖室_綜合工程一館 8F)</option>\n<option value="BGA0842" >BGA0842 (機械元件設計實驗室_綜合工程一館 8F)</option>\n<option value="BGA0901" >BGA0901 (國際會議廳_綜合工程一館 9F)</option>\n<option value="BGA0911" >BGA0911 (機電實驗室_綜合工程一館 9F)</option> \n 則可以查詢各教室排課結果: \n w1_classroom_local.py \n import requests\nimport bs4\n\'\'\'\n# 假如使用 Python 3.9 執行則必須自行在程式碼中設定代理主機\nimport os\n \nproxy = \'http://[2001:288:6004:17::69]:3128\'\n \nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n\'\'\'\n\n\'\'\'\nurl:  \'jclassroom_ajax.php\',\ndata: { pselyr: pselyr, pselclssroom: pselclssroom },\n\'\'\'\nsemester = \'1092\'\nclassroomno = \'BGA0810\'\ncolumn = True\n\nif semester == None:\n    semester = \'1092\'\nif classroomno == None:\n    # BGA0810 電腦輔助設計室\n    classroomno = \'BGA0810\'\n    \nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n\nurl = \'https://qry.nfu.edu.tw/jclassroom_ajax.php\'\npost_var = {\'pselyr\': semester, \'pselclssroom\': classroomno}\n\nresult = requests.post(url, data = post_var, headers = headers)\n\nsoup = bs4.BeautifulSoup(result.content, \'lxml\')\n\n# 先除掉所有 anchor\nfor a in soup.findAll(\'a\'):\n    a.replaceWithChildren()\n\n# 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料\ntable = soup.find(\'table\', {\'class\': \'tbcls\'})\n\n# 重建 table, 設定邊線為 1 pixel\noutput = "<table border=\'1\'>"\n\nfor i in table.contents:\n    # 利用 replace 復原 \xa0\n    output += str(i).replace("&amp;nbsp", "\xa0")\noutput += "</table>"\nprint(output)\n \n 有關專題分組: \n 請問我們打算如何解決  http://mde.tw/cd2021/content/Stage1.html  分組定組序與建立分組專題連結 html 的問題? \n 延伸練習: \n \n 請各組修改上述程式碼, 直接將查詢結果存為 html, 並且直接呼叫 firefox 瀏覽器開啟所建立的超文件檔案. \n 請各組將上述兩則程式套入 Flask, 改寫成網際程式, 並分別在 Windows 10 與 Ubuntu 20.04 中執行. \n 請各組設法為程將上述程式改為 Flask based 後, 將程式部署在 Heroku 中執行. \n 請問上述的近端或網際程式架構, 是否可以應用在機械設計的某一個過程? (網際, AJAX, Heroku 部署). \n \n 額外處理: \n https://forum.eng.nfu.edu.tw/t/topic/105/2 \n 針對 CMSiMDE 無法正確對 config/content.htm 分頁時能夠列出建議事項, 協助用戶解決問題. \n 問題: \n CMSiMDE 動態網站如何進行分頁? \n CMSiMDE 的靜態網頁如何產生? \n 為何網際內容管理系統要分動態與靜態網頁? \n CMSiMDE 的網站分頁架構源自  https://www.cmsimple.org/en/,  其中一度使用  https://cherrypy.org/ , 最後才改為現在的  https://github.com/pallets/flask . \n CMSiMDE 自 2013 年底開發至今, 可能需要重新改寫了:-) anybody?? \n 延伸練習: \n 請各組研究一下  https://github.com/mdecourse/cmsimde  中的分頁程式, 並嘗試編寫一個能夠協助使用者在無法正確編輯動態網頁時進行 Debug 用. \n 在處理特定目錄中檔案內容字串置換時, 可以利用下列程式碼: \n walk_in_dir_and_replace_string.py \n import os\nfindText = """content to remove"""\nfor dname, dirs, files in os.walk("path_name"):\n    for fname in files:\n        if fname[-5:] == ".html":\n            print(fname)\n            fpath = os.path.join(dname, fname)\n            with open(fpath, encoding="utf-8") as f:\n                s = f.read()\n            s = s.replace(findText, "")\n            with open(fpath, "w", encoding="utf-8") as f:\n                f.write(s) \n', 'tags': '', 'url': 'Topic 0.html'}, {'title': 'Topic 1', 'text': '\n 學會利用 Leo Editor 編輯 Blog 與簡報內容 \n 學會將 Pelican Blog 資料同步至 Blogger \n 學會將 Github 倉儲資料與 Pages 同步至 Fossil SCM 倉儲 \n \n Blogger, Pelican Blog 與 Reveal 簡報 \n 將  http://mde.tw/cp2020/  內容整理至個人  https://www.blogger.com, \n \xa0並設法將所有學員的個人  Blogger  網誌連結放入本頁面中. \n 如何使用  CMSiMDE  的  Pelican Blog  與  Reveal  網際簡報? \n Leo Editor \n 介紹如何利用 Leo Editor 建立  Pelican Blog  與  Reveal  網際簡報? \n 介紹如何利用 Leo Editor 讓  Pelican Blog  與  Blogger  網誌內容保持同步? \n 相較於  Blogger  網誌, 利用  CMSiMDE  所建立的  Pelican Blog  有那些優點? (分散式版本?) \n https://leoeditor.com/ \n https://github.com/leo-editor \n https://groups.google.com/g/leo-editor \n Fossil SCM \n https://fossil-scm.org \n 已經有了 Github 與 Gitlab, 為何還需要學習  Fossil SCM ? \n https://fossil.kmol.info/cd2021 \n https://fossil.kmol.info/lab/ \n https://fossil.kmol.info/lab/doc/trunk/index.html \n https://fossil.kmol.info/lab/doc/trunk/blog/index.html \n https://fossil.kmol.info/lab/doc/49a2fc64d0/index.html \n https://fossil.kmol.info/lab/doc/49a2fc64d0/blog/index.html \n https://fossil.kmol.info/fosgit/doc/trunk/index.html \n \n \n', 'tags': '', 'url': 'Topic 1.html'}, {'title': '輔助工具', 'text': 'Editor: \n SciTE: \n https://www.scintilla.org/SciTE.html \n Interpreter: \n Python: \n https://www.python.org/ \n Javascript: \n https://developer.mozilla.org/en-US/docs/Web/JavaScript \n Lua: \n http://www.lua.org/ \n http://mde.tw/vecp2018/lua/SchoolProject/ \n Dart: \n https://dart.dev/ \n https://dartpad.github.io/ \n Dart Examples  \n Compiler: \n Tiny C Compiler: \n https://bellard.org/tcc/ \n Msys2: \n https://www.msys2.org/ \n CAD tools: \n Solvespace \n https://solvespace.com/index.pl \n https://github.com/solvespace/solvespace \n https://solvespace.com/tutorial.pl \n http://www.farwire.net/SolveSpace-LearningGuide.htm \n http://mde.tw/cad2020/content/Project%20Plan.html \n https://thenewstack.io/how-solvespace-is-retooling-its-3d-cad-open-source-community/ \n NX12 \n http://mde.tw/cad2020/content/NX.html \n http://mde.tw/cad2020/content/HW1_NX.html \n Onshape \n https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-ling-jian.html \n https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-lun-kuo-hui-tu.html \n https://www.onshape.com/en/ \n https://cad.onshape.com/help/Content/introduction.htm \n https://cad.onshape.com/FsDoc/ \n https://forum.onshape.com/ \n Autodesk: \n Fusion 360 \n https://github.com/AutodeskFusion360   \n Add-ins and scripts \n CAE tools: \n Coppeliasim: \n https://www.coppeliarobotics.com/ \n https://www.coppeliarobotics.com/helpFiles/index.html \n https://forum.coppeliarobotics.com/ \n Webots: \n https://cyberbotics.com/ \n https://cyberbotics.com/doc/guide/index \n https://robotbenchmark.net/ \n Pyslvs-UI \n https://github.com/KmolYuan/Pyslvs-UI \n ps2020 \n https://github.com/mdecourse/ps2020 \n NGSolve \n https://ngsolve.org/', 'tags': '', 'url': '輔助工具.html'}, {'title': 'WSL', 'text': 'https://docs.microsoft.com/zh-tw/windows/wsl/ \n https://docs.microsoft.com/en-us/windows/wsl/ \n https://docs.microsoft.com/zh-tw/windows/wsl/compare-versions \n \n IPv6 \n https://github.com/microsoft/WSL/issues/4518', 'tags': '', 'url': 'WSL.html'}, {'title': 'Projects', 'text': '', 'tags': '', 'url': 'Projects.html'}, {'title': 'Delta Printer', 'text': '利用  Onshape  繪製所需零組件後, 轉入  CoppeliaSim  進行模擬與控制後, 利用網際環境展示虛擬列印流程. \n 可以將 Onshape 換為 Solidworks - 請討論有何差別? \n 可以將 CoppeliaSim 換為  Webots  - 請討論有何差別? \n https://robotbenchmark.net/ \n 可以將網際環境展示改為近端套件 GUI 展示 - 請討論有何差別? \n 3D Printer design and simulation \n https://github.com/mdecourse/virtualkossel \n http://mde.tw/virtualkossel/', 'tags': '', 'url': 'Delta Printer.html'}, {'title': 'CMSiMDE', 'text': '利用 Flask, flask_cors, lxml, bs4, markdown, reveal.js 與 Pelican 開發網際內容管理系統. \n 利用  CMSiMDE  基本架構, 寫一個 CMSi21:  https://github.com/mdecourse/cmsi21 \n 使用  Flask  網際框架編寫 \n https://flask.palletsprojects.com/en/1.1.x/blueprints/ \n https://flask.palletsprojects.com/en/1.1.x/tutorial/templates/ \n https://www.makotemplates.org/ \n 利用  Leo Editor  編寫 \n https://groups.google.com/g/leo-editor \n 利用 HTML 中的 H1, H2 與 H3 標題進行分頁 \n https://www.cmsimple.org \n 可以將動態系統頁面轉為靜態頁面 \n 設法置入機械設計與精密機械領域有關的網際協同功能', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': 'Fossil scm', 'text': '熟悉 Fossil SCM 在 Windows 與 Ubuntu 上的操作 \n https://fossil-scm.org \n', 'tags': '', 'url': 'Fossil scm.html'}, {'title': 'CDiMDE', 'text': '延伸 cdproject1 功能, 設法與 Discourse 整合, 應用於機械設計教學與研究. \n 整合 CDiMDE 與 Discourse \n https://meta.discourse.org/t/login-flow-flask-discourse-flask-with-oauth/162153 \n Flask and ember.js: \n https://flask.palletsprojects.com \n https://emberjs.com/ \n https://github.com/gaganpreet/todo-flask-ember \n Discourse: \n https://github.com/samamorgan/discourse \n PostgreSQL: \n https://www.postgresql.org/ \n Beginning Databases with PostgreSQL: \n https://link.springer.com/book/10.1007/978-1-4302-0018-5 \n PostgreSQL configuration: \n https://link.springer.com/book/10.1007/978-1-4842-5663-3', 'tags': '', 'url': 'CDiMDE.html'}, {'title': 'Discourse', 'text': '研究如何安裝配置 Discourse, 並設法透過 API 延伸其應用. \n https://github.com/discourse/discourse \n https://blog.codinghorror.com/ \n Forum for Discourse: \n https://meta.discourse.org/ \n Demo of Discourse: \n https://try.discourse.org/ \n MDE Discourse: \n https://forum.eng.nfu.edu.tw \n https://jpme.eng.nfu.edu.tw \n Beginning Ruby 3: \n https://link.springer.com/book/10.1007/978-1-4842-6324-2 \n Learn Rails 6: \n https://link.springer.com/book/10.1007/978-1-4842-6026-5 \n Clean Ruby: \n https://link.springer.com/book/10.1007/978-1-4842-5546-9 \n Ember.js: \n https://emberjs.com/ \n PostgreSQL: \n https://www.postgresql.org/', 'tags': '', 'url': 'Discourse.html'}]};